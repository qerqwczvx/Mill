import telebot
from telebot import types
from math import floor
from datetime import datetime, timedelta
import time
import random
import re
import crypto_pay
import json
from requests.exceptions import RequestException
import requests
import sqlite3
import db as db_module
import threading
import schedule
from telebot import TeleBot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from db import get_db
import config
import logging
from db import add_user, get_db  
from telebot.apihelper import ApiTelegramException
import io
from telebot.handler_backends import State, StatesGroup
from threading import Lock
import uuid


bot = telebot.TeleBot(config.BOT_TOKEN)


treasury_lock = threading.Lock()
active_treasury_admins = {}



class Database:
    def get_db(self):
        return sqlite3.connect('database.db')

    def get_user_price(self, user_id):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–µ–Ω—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é –∏–ª–∏ –≥–ª–æ–±–∞–ª—å–Ω—É—é)."""
        with self.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT CUSTOM_PRICE FROM users WHERE ID = ?', (user_id,))
            custom_price = cursor.fetchone()
            if custom_price and custom_price[0] is not None:
                return custom_price[0]
            cursor.execute('SELECT PRICE FROM settings')
            result = cursor.fetchone()
            return result[0] if result else 2.0

    def is_moderator(self, user_id):
        with self.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT * FROM personal WHERE ID = ? AND TYPE = ?', (user_id, 'moder'))
            return cursor.fetchone() is not None

    def update_balance(self, user_id, amount):
        with self.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('UPDATE users SET BALANCE = BALANCE + ? WHERE ID = ?', (amount, user_id))
            conn.commit()

    def get_group_name(self, group_id):
        return db_module.get_group_name(group_id)

    def update_last_activity(self, user_id):
        with self.get_db() as conn:
            cursor = conn.cursor()
            current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            cursor.execute('SELECT IS_AFK FROM users WHERE ID = ?', (user_id,))
            result = cursor.fetchone()
            if not result:
                cursor.execute('INSERT OR IGNORE INTO users (ID, BALANCE, REG_DATE, IS_AFK, LAST_ACTIVITY) VALUES (?, ?, ?, ?, ?)',
                              (user_id, 0.0, current_time, 0, current_time))
            else:
                if result[0] == 1:
                    cursor.execute('UPDATE users SET IS_AFK = 0 WHERE ID = ?', (user_id,))
                    print(f"{user_id} –≤—ã–≤–µ–¥–µ–Ω –∏–∑ —Ä–µ–∂–∏–º–∞ –ê–§–ö")
            cursor.execute('UPDATE users SET LAST_ACTIVITY = ? WHERE ID = ?', (current_time, user_id))
            conn.commit()
            print(f"[DEBUG] –û–±–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {current_time}")

    def get_afk_status(self, user_id):
        with self.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT IS_AFK FROM users WHERE ID = ?', (user_id,))
            result = cursor.fetchone()
            return bool(result[0]) if result else False

db = Database()


def is_russian_number(phone_number):
    phone_number = phone_number.strip()
    phone_number = re.sub(r'[\s\-()]+', '', phone_number)
    if phone_number.startswith('7') or phone_number.startswith('8'):
        phone_number = '+7' + phone_number[1:]
    elif phone_number.startswith('9') and len(phone_number) == 10:
        phone_number = '+7' + phone_number
    if not phone_number.startswith('+'):
        phone_number = '+' + phone_number
    pattern = r'^\+7\d{10}$'
    return phone_number if bool(re.match(pattern, phone_number)) else None

def check_balance_and_fix(user_id):
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT BALANCE FROM users WHERE ID = ?', (user_id,))
        user = cursor.fetchone()
        if user and user[0] < 0:
            cursor.execute('UPDATE users SET BALANCE = 0 WHERE ID = ?', (user_id,))
            conn.commit()

@bot.message_handler(commands=['help'])
def help_command(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    db.update_last_activity(user_id)  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    with db_module.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT STATUS, BLOCKED FROM requests WHERE ID = ?', (user_id,))
        request = cursor.fetchone()

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
        if request and request[1] == 1:
            bot.send_message(chat_id, "üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ: @{config.PAYOUT_MANAGER}", parse_mode='HTML')
            return

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–¥–æ–±—Ä–µ–Ω
        if not request or request[0] != 'approved':
            bot.send_message(chat_id, "üëã –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –µ—â—ë –Ω–µ –æ–¥–æ–±—Ä–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", parse_mode='HTML')
            return

    is_admin = user_id in config.ADMINS_ID
    is_moderator = db_module.is_moderator(user_id)

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))

    if is_admin:
        help_text = (
            "üëë <b>–°–ø—Ä–∞–≤–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
            "–í—ã –∏–º–µ–µ—Ç–µ –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –±–æ—Ç–æ–º. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ –¥–µ–π—Å—Ç–≤–∏—è:\n\n"
            "‚öôÔ∏è <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b> (–∫–Ω–æ–ø–∫–∞ –≤ –º–µ–Ω—é)\n"
            "   - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∞–º–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ\n"
            "   - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ê–§–ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            "   - –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            "   - –£–º–µ–Ω—å—à–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            "   - –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ–∫–æ–≤ (–≤—Å–µ–º –∏–ª–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º)\n\n"
            "üì± <b>–†–∞–±–æ—Ç–∞ —Å –Ω–æ–º–µ—Ä–∞–º–∏</b>\n"
            "   - –ö–æ–º–∞–Ω–¥–∞ –≤ –≥—Ä—É–ø–ø–µ: <code>–≤—Ü/–ø–∫1</code> (–æ—Ç 1 –¥–æ 70) ‚Äî –≤–∑—è—Ç—å –Ω–æ–º–µ—Ä –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É\n"
            "   - –ö–æ–º–∞–Ω–¥–∞: <code>—Å–ª–µ—Ç +79991234567</code> ‚Äî –ø–æ–º–µ—Ç–∏—Ç—å –Ω–æ–º–µ—Ä –∫–∞–∫ —Å–ª–µ—Ç–µ–≤—à–∏–π\n\n"
            "üí∞ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–ø–ª–∞—Ç–∞–º–∏</b>\n"
            "   - –ü—Ä–æ—Å–º–æ—Ç—Ä –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥\n"
            "   - –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ–∫–æ–≤ —á–µ—Ä–µ–∑ CryptoBot\n\n"
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n"
            "   - –î–æ—Å—Ç—É–ø–Ω–∞ –≤ –ø—Ä–æ—Ñ–∏–ª–µ: –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –Ω–æ–º–µ—Ä–æ–≤\n\n"
            "üìû <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞</b>\n"
            f"   - –°–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º: @{config.PAYOUT_MANAGER}"
        )
    elif is_moderator:
        help_text = (
            "üõ° <b>–°–ø—Ä–∞–≤–∫–∞ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–æ–º–µ—Ä–∞ –≤ —Ä–∞–±–æ—á–∏—Ö –≥—Ä—É–ø–ø–∞—Ö. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ –¥–µ–π—Å—Ç–≤–∏—è:\n\n"
            "üì± <b>–†–∞–±–æ—Ç–∞ —Å –Ω–æ–º–µ—Ä–∞–º–∏</b>\n"
            "   - –ö–æ–º–∞–Ω–¥–∞ –≤ –≥—Ä—É–ø–ø–µ: <code>–ø–∫/–≤—Ü1</code> (–æ—Ç 1 –¥–æ 70) ‚Äî –≤–∑—è—Ç—å –Ω–æ–º–µ—Ä –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É\n"
            "   - –ö–æ–º–∞–Ω–¥–∞: <code>—Å–ª–µ—Ç +79991234567</code> ‚Äî –ø–æ–º–µ—Ç–∏—Ç—å –Ω–æ–º–µ—Ä –∫–∞–∫ —Å–ª–µ—Ç–µ–≤—à–∏–π  \n"
            "   - –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏\n\n"
            "üîô <b>–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é</b>\n"
            "   - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /start\n\n"
            "üìû <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞</b>\n"
            f"   - –°–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º: @{config.PAYOUT_MANAGER}"
        )
    else:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        with db_module.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT PRICE, HOLD_TIME FROM settings')
            result = cursor.fetchone()
            price, hold_time = result if result else (2.0, 5)

        help_text = (
            f"<b>üì¢ –°–ø—Ä–∞–≤–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {config.SERVICE_NAME}</b>\n\n"
            f"<b>‚è≥ –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:</b> <code>{config.WORK_TIME}</code>\n\n"
            "<b>üíº –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?</b>\n"
            "‚Ä¢ –í—ã —Å–¥–∞—ë—Ç–µ –Ω–æ–º–µ—Ä, –º—ã –≤—ã–ø–ª–∞—á–∏–≤–∞–µ–º –≤–∞–º –¥–µ–Ω—å–≥–∏ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏.\n"
            f"‚Ä¢ –ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ CryptoBot –ø–æ—Å–ª–µ {hold_time} –º–∏–Ω—É—Ç —Ä–∞–±–æ—Ç—ã –Ω–æ–º–µ—Ä–∞.\n\n"
            "<b>üí∞ –¢–∞—Ä–∏—Ñ—ã:</b>\n"
            f"‚ñ™Ô∏è <code>{price}$</code> –∑–∞ –Ω–æ–º–µ—Ä (—Ö–æ–ª–¥ {hold_time} –º–∏–Ω—É—Ç)\n\n"
            "<b>üì± –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>\n"
            "1. <b>–°–¥–∞—Ç—å –Ω–æ–º–µ—Ä</b> ‚Äî —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é\n"
            "2. <b>–£–¥–∞–ª–∏—Ç—å –Ω–æ–º–µ—Ä</b> ‚Äî –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–±—Ä–∞—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä\n"
            "3. <b>–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä</b> ‚Äî –∑–∞–º–µ–Ω–∏—Ç—å –æ–¥–∏–Ω –Ω–æ–º–µ—Ä –Ω–∞ –¥—Ä—É–≥–æ–π\n"
            "4. <b>–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å</b> ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä –±–∞–ª–∞–Ω—Å–∞, –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏ —É—Å–ø–µ—à–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤\n"
            "5. <b>–í—ã–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏</b> ‚Äî –∑–∞–ø—Ä–æ—Å –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤\n"
            "6. <b>–ê–§–ö-—Ä–µ–∂–∏–º</b> ‚Äî —Å–∫—Ä—ã—Ç—å –Ω–æ–º–µ—Ä–∞ –Ω–∞ –≤—Ä–µ–º—è –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è\n\n"
            f"<b>üìç –ü–æ—á–µ–º—É –≤—ã–±–∏—Ä–∞—é—Ç {config.SERVICE_NAME}?</b>\n"
            "‚úÖ –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è\n"
            "‚úÖ –í—ã–≥–æ–¥–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã –∏ –±—ã—Å—Ç—Ä—ã–µ –≤—ã–ø–ª–∞—Ç—ã\n"
            "‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7\n\n"
            "<b>üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b>\n"
            f"–°–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º: @{config.PAYOUT_MANAGER}\n\n"
            "<b>üîπ –ù–∞—á–Ω–∏—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!</b>"
        )

    bot.send_message(chat_id, help_text, parse_mode='HTML', reply_markup=markup)
    
cooldowns = {}  # In-memory cooldown tracking

@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    username = message.from_user.username
    add_user(user_id=user_id, username=username)
    print(f"[DEBUG] Username –¥–ª—è user_id {user_id}: {username}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    current_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ê–§–ö
    was_afk = db_module.get_afk_status(user_id)
    db_module.update_last_activity(user_id)  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ê–§–ö
    
    chat_type = bot.get_chat(message.chat.id).type
    is_group = chat_type in ["group", "supergroup"]
    
    with db_module.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT BLOCKED FROM requests WHERE ID = ?', (user_id,))
        user = cursor.fetchone()
        if user and user[0] == 1:
            bot.send_message(
                message.chat.id,
                "üö´ –í–∞—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –≤ –±–æ—Ç–µ!",
                disable_notification=True  # –û—Ç–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            )
            return
    
    is_moderator = db_module.is_moderator(user_id)
    is_admin = user_id in config.ADMINS_ID

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã—Ö–æ–¥–µ –∏–∑ –ê–§–ö
    if was_afk:
        try:
            bot.send_message(
                message.chat.id,
                "üîî –í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –ê–§–ö. –í–∞—à–∏ –Ω–æ–º–µ—Ä–∞ —Å–Ω–æ–≤–∞ –≤–∏–¥–Ω—ã.",
                parse_mode='HTML',
                disable_notification=True  # –û—Ç–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            )
        except Exception as e:
            print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã—Ö–æ–¥–µ –∏–∑ –ê–§–ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    if is_group and is_moderator and not is_admin:
        with db_module.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT GROUP_ID FROM personal WHERE ID = ? AND TYPE = ?', (user_id, 'moder'))
            group_id = cursor.fetchone()
            group_name = db_module.get_group_name(group_id[0]) if group_id else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞"
        
        moderator_text = (
            f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ ü§ù\n"
            f"–í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º –≤ –≥—Ä—É–ø–ø–µ: <b>{group_name}</b>\n\n"
            "–í–æ—Ç —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ:\n\n"
            "1. –ë—Ä–∞—Ç—å –Ω–æ–º–µ—Ä–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É –∏ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –Ω–∏–º–∏\n\n"
            "2. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –Ω–æ–º–µ—Ä —Å–ª–µ—Ç–µ–≤—à–∏–º, –µ—Å–ª–∏ —Å –Ω–∏–º —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫\n"
            "–ù–µ –∑–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª—è–π—Ç–µ —ç—Ç–∏–º –≤ —é–º–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Ü–µ–ª—è—Ö!\n\n"
            "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–º –∫–æ–º–∞–Ω–¥—ã –≤ —á–∞—Ç–µ:</b>\n"
            "1. <b>–ó–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–æ–º–µ—Ä</b>\n"
            "–ó–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –≤–≤–æ–¥–æ–º —Ç–∞–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∫–∞–∫ ¬´–≤—Ü/–ø–∫1¬ª –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –µ–≥–æ –≤ —Ä–∞–±–æ—á–∏–π —á–∞—Ç\n"
            "–í–≤–æ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –ø—Ä–∏—Å–≤–æ–∏–ª–∏ –∏–ª–∏ –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–ø–∏—Å–∞–Ω –≤–∞—à–µ–º—É –ü–ö\n"
            "<b>–í–∞–∂–Ω–æ!</b> –ú—ã –Ω–µ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞ –ü–ö, –∫–æ—Ç–æ—Ä—ã–º –ø—Ä–∏—Å–≤–æ–µ–Ω –Ω–æ–º–µ—Ä –±–æ–ª—å—à–µ 70\n\n"
            "2. –ï—Å–ª–∏ —Å –Ω–æ–º–µ—Ä–æ–º —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, –≤—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç (—ç—Ç–æ –≤—Ä–µ–º—è –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–µ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞) –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å –µ–≥–æ ¬´—Å–ª–µ—Ç–µ–≤—à–∏–º¬ª\n"
            "–ß—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä —Å–ª–µ—Ç–µ–≤—à–∏–º, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É: ¬´—Å–ª–µ—Ç –∏ –Ω–æ–º–µ—Ä —Å –∫–æ—Ç–æ—Ä—ã–º –≤—ã —Ä–∞–±–æ—Ç–∞–ª–∏¬ª\n"
            "–ü—Ä–∏–º–µ—Ä: <code>—Å–ª–µ—Ç +79991112345</code>\n"
            "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω–æ–º–µ—Ä –æ—Ç–º–µ—Ç–∏—Ç—Å—è —Å–ª–µ—Ç–µ–≤—à–∏–º, –∏ –≤—ã–π–¥–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –Ω–æ–º–µ—Ä —Å–ª–µ—Ç–µ–ª"
        )
        bot.send_message(
            message.chat.id,
            moderator_text,
            parse_mode='HTML',
            disable_notification=True  # –û—Ç–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        )
        return
    
    if user_id in config.ADMINS_ID:
        with db_module.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('INSERT OR REPLACE INTO requests (ID, LAST_REQUEST, STATUS, BLOCKED, CAN_SUBMIT_NUMBERS) VALUES (?, ?, ?, ?, ?)',
                          (user_id, current_date, 'approved', 0, 1))
            conn.commit()
        if is_group:
            markup = types.InlineKeyboardMarkup()
            markup.row(
                types.InlineKeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
                types.InlineKeyboardButton("üì± –°–¥–∞—Ç—å –Ω–æ–º–µ—Ä", callback_data="submit_number")
            )
            markup.add(types.InlineKeyboardButton("‚öôÔ∏è –ê–¥–º–∏–Ω–∫–∞", callback_data="admin_panel"))
            is_afk = db_module.get_afk_status(user_id)
            afk_button_text = "üü¢ –í–∫–ª—é—á–∏—Ç—å –ê–§–ö" if not is_afk else "üî¥ –í—ã–∫–ª—é—á–∏—Ç—å –ê–§–ö"
            markup.add(types.InlineKeyboardButton(afk_button_text, callback_data="toggle_afk"))
            bot.send_message(
                message.chat.id,
                f"<b>üì¢ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {config.SERVICE_NAME}</b>\n\n"
                f"<b>‚è≥ –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:</b> <code>{config.WORK_TIME}</code>\n\n"
                f"<b>üíº –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?</b>\n"
                f"‚Ä¢ <i>–í—ã —Å–¥–∞–µ—Ç–µ –Ω–æ–º–µ—Ä</i> ‚Äì <b>–º—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã.</b>\n"
                f"‚Ä¢ <i>–ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã</i> ‚Äì <b>–ø–æ—Å–ª–µ —Å—Ç–æ–ø –≤–æ—Ä–∫–∞.</b>\n\n"
                f"<b>üìç –ü–æ—á–µ–º—É –≤—ã–±–∏—Ä–∞—é—Ç {config.SERVICE_NAME}?</b>\n"
                f"‚úÖ <i>–ü—Ä–æ–∑—Ä–∞—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞</i>\n"
                f"‚úÖ <i>–í—ã–≥–æ–¥–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã –∏ –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã</i>\n"
                f"‚úÖ <i>–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7</i>\n\n"
                f"<b>üí∞ –¢–∞—Ä–∏—Ñ—ã –Ω–∞ —Å–¥–∞—á—É –Ω–æ–º–µ—Ä–æ–≤:</b>\n"
                f"‚ñ™Ô∏è 6$ –∑–∞ –Ω–æ–º–µ—Ä (—Ö–æ–ª–¥ 1-6$, 2-12$)\n\n"
                "<b>üîπ –ù–∞—á–Ω–∏—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!</b>",
                reply_markup=markup,
                parse_mode='HTML',
                disable_notification=True  # –û—Ç–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            )
        else:
            # Send a temporary message to get message_id
            temp_message = bot.send_message(
                chat_id,
                "–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–Ω—é...",
                parse_mode='HTML',
                disable_notification=True  # –û—Ç–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            )
            show_main_menu(chat_id, temp_message.message_id, user_id)
        return
    
    with db_module.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT LAST_REQUEST, STATUS FROM requests WHERE ID = ?', (user_id,))
        request = cursor.fetchone()
        if request and request[1] == 'approved':
            if is_group:
                markup = types.InlineKeyboardMarkup()
                markup.row(
                    types.InlineKeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
                    types.InlineKeyboardButton("üì± –°–¥–∞—Ç—å –Ω–æ–º–µ—Ä", callback_data="submit_number")
                )
                is_afk = db_module.get_afk_status(user_id)
                afk_button_text = "üü¢ –í–∫–ª—é—á–∏—Ç—å –ê–§–ö" if not is_afk else "üî¥ –í—ã–∫–ª—é—á–∏—Ç—å –ê–§–ö"
                markup.add(types.InlineKeyboardButton(afk_button_text, callback_data="toggle_afk"))
                bot.send_message(
                    message.chat.id,
                f"<b>üì¢ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {config.SERVICE_NAME}</b>\n\n"
                f"<b>‚è≥ –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:</b> <code>{config.WORK_TIME}</code>\n\n"
                f"<b>üíº –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?</b>\n"
                f"‚Ä¢ <i>–í—ã —Å–¥–∞–µ—Ç–µ –Ω–æ–º–µ—Ä</i> ‚Äì <b>–º—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã.</b>\n"
                f"‚Ä¢ <i>–ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã</i> ‚Äì <b>–ø–æ—Å–ª–µ —Å—Ç–æ–ø –≤–æ—Ä–∫–∞.</b>\n\n"
                f"<b>üìç –ü–æ—á–µ–º—É –≤—ã–±–∏—Ä–∞—é—Ç {config.SERVICE_NAME}?</b>\n"
                f"‚úÖ <i>–ü—Ä–æ–∑—Ä–∞—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞</i>\n"
                f"‚úÖ <i>–í—ã–≥–æ–¥–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã –∏ –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã</i>\n"
                f"‚úÖ <i>–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7</i>\n\n"
                f"<b>üí∞ –¢–∞—Ä–∏—Ñ—ã –Ω–∞ —Å–¥–∞—á—É –Ω–æ–º–µ—Ä–æ–≤:</b>\n"
                f"‚ñ™Ô∏è 6$ –∑–∞ –Ω–æ–º–µ—Ä (—Ö–æ–ª–¥ 1-6$, 2-12$)\n\n"
                "<b>üîπ –ù–∞—á–Ω–∏—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!</b>",
                    reply_markup=markup,
                    parse_mode='HTML',
                    disable_notification=True  # –û—Ç–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                )
            else:
                # Send a temporary message to get message_id
                temp_message = bot.send_message(
                    chat_id,
                    "–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–Ω—é...",
                    parse_mode='HTML',
                    disable_notification=True  # –û—Ç–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                )
                show_main_menu(chat_id, temp_message.message_id, user_id)
            return
        if request:
            last_request_time = datetime.strptime(request[0], "%Y-%m-%d %H:%M:%S")
            if datetime.now() - last_request_time < timedelta(minutes=15):
                time_left = 15 - ((datetime.now() - last_request_time).seconds // 60)
                bot.send_message(
                    message.chat.id, 
                    f"‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –í—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ {time_left} –º–∏–Ω—É—Ç.",
                    disable_notification=True  # –û—Ç–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                )
                return
        cursor.execute('INSERT OR REPLACE INTO requests (ID, LAST_REQUEST, STATUS, BLOCKED, CAN_SUBMIT_NUMBERS) VALUES (?, ?, ?, ?, ?)',
                      (user_id, current_date, 'pending', 0, 1))
        conn.commit()
        bot.send_message(
            message.chat.id, 
            "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –û–∂–∏–¥–∞–π—Ç–µ, –ø–æ–∫–∞ –≤–∞—Å –≤–ø—É—Å—Ç–∏—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.",
            disable_notification=True  # –û—Ç–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        )
        # Notify admins with approval buttons for non-admin/moderator pending users
        with db_module.get_db() as conn:
            cursor = conn.cursor()
            # Dynamically create placeholders for config.ADMINS_ID
            admin_ids = config.ADMINS_ID
            admin_placeholders = ','.join('?' for _ in admin_ids)
            query = f'SELECT ID, LAST_REQUEST FROM requests WHERE STATUS = ? AND ID NOT IN (SELECT ID FROM requests WHERE ID IN ({admin_placeholders}) OR ID IN (SELECT ID FROM personal WHERE TYPE = ?)) AND ID != ?'
            params = ('pending', *admin_ids, 'moderator', user_id)
            cursor.execute(query, params)
            pending_users = cursor.fetchall()
    if pending_users:
        admin_text = "üîî <b>–ó–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è</b>\n\n"
        markup = types.InlineKeyboardMarkup()
        
        for pending_user_id, reg_date in pending_users:
            try:
                # Fetch user information using bot.get_chat_member
                user = bot.get_chat_member(pending_user_id, pending_user_id).user
                username = f"@{user.username}" if user.username else "–ù–µ—Ç username"
                # Create clickable username link
                username_link = f"<a href=\"tg://user?id={pending_user_id}\">{username}</a>" if user.username else "–ù–µ—Ç username"
            except Exception as e:
                print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å username –¥–ª—è user_id {pending_user_id}: {e}")
                username_link = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

            # Add user details to admin_text
            admin_text += (
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: <a href=\"https://t.me/@id{pending_user_id}\">{pending_user_id}</a> (–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {reg_date})\n"
                f"üë§ Username: {username_link}\n\n"
            )

            # Add approve/reject buttons for each user
            approve_button = types.InlineKeyboardButton(f"‚úÖ –û–¥–æ–±—Ä–∏—Ç—å {pending_user_id}", callback_data=f"approve_user_{pending_user_id}")
            reject_button = types.InlineKeyboardButton(f"‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å {pending_user_id}", callback_data=f"reject_user_{pending_user_id}")
            markup.row(approve_button, reject_button)

        try:
            for admin_id in config.ADMINS_ID:
                bot.send_message(
                    admin_id,
                    admin_text,
                    parse_mode='HTML',
                    reply_markup=markup,
                    disable_notification=True  # –û—Ç–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                )
        except Exception as e:
            print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º: {e}")

def show_main_menu(chat_id, message_id, user_id):
    with db_module.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT IS_AFK, AFK_LOCKED FROM users WHERE ID = ?', (user_id,))
        result = cursor.fetchone()
        if not result:
            db_module.add_user(user_id)
            is_afk = False
            afk_locked = False
        else:
            is_afk, afk_locked = result

    # Check if the user is a moderator
    is_moderator = db_module.is_moderator(user_id)

    if is_moderator:
        # –ü–æ–ª—É—á–∞–µ–º ID –≥—Ä—É–ø–ø—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        with db_module.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT GROUP_ID FROM personal WHERE ID = ? AND TYPE = ?', (user_id, 'moder'))
            group_id = cursor.fetchone()
            group_name = db_module.get_group_name(group_id[0]) if group_id else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞"

        moderator_text = (
            f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ ü§ù\n"
            f"–í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º –≤ –≥—Ä—É–ø–ø–µ: <b>{group_name}</b>\n\n"
            "–í–æ—Ç —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ:\n"
            "1. –ë—Ä–∞—Ç—å –Ω–æ–º–µ—Ä–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É –∏ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –Ω–∏–º–∏\n"
            "2. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –Ω–æ–º–µ—Ä —Å–ª–µ—Ç–µ–≤—à–∏–º, –µ—Å–ª–∏ —Å –Ω–∏–º —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫\n"
            "   –ù–µ –∑–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª—è–π—Ç–µ —ç—Ç–∏–º –≤ —é–º–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Ü–µ–ª—è—Ö!\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–º –∫–æ–º–∞–Ω–¥—ã –≤ —á–∞—Ç–µ:\n"
            "1. –ó–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–æ–º–µ—Ä\n"
            "   –ó–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –≤–≤–æ–¥–æ–º —Ç–∞–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∫–∞–∫ ¬´–≤—Ü/–ø–∫1¬ª –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –µ–≥–æ –≤ —Ä–∞–±–æ—á–∏–π —á–∞—Ç\n"
            "   –í–≤–æ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –ø—Ä–∏—Å–≤–æ–∏–ª–∏ –∏–ª–∏ –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–ø–∏—Å–∞–Ω –≤–∞—à–µ–º—É –ü–ö\n"
            "   –í–∞–∂–Ω–æ! –ú—ã –Ω–µ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞ –ü–ö, –∫–æ—Ç–æ—Ä—ã–º –ø—Ä–∏—Å–≤–æ–µ–Ω –Ω–æ–º–µ—Ä –±–æ–ª—å—à–µ 70\n\n"
            "2. –ï—Å–ª–∏ —Å –Ω–æ–º–µ—Ä–æ–º —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, –≤—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç (—ç—Ç–æ –≤—Ä–µ–º—è –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–µ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞) –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å –µ–≥–æ ¬´—Å–ª–µ—Ç–µ–≤—à–∏–º¬ª\n"
            "   –ß—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä —Å–ª–µ—Ç–µ–≤—à–∏–º, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É: ¬´—Å–ª–µ—Ç –∏ –Ω–æ–º–µ—Ä —Å –∫–æ—Ç–æ—Ä—ã–º –≤—ã —Ä–∞–±–æ—Ç–∞–ª–∏¬ª\n"
            "   –ü—Ä–∏–º–µ—Ä: <code>—Å–ª–µ—Ç +79991112345</code>\n"
            "   –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω–æ–º–µ—Ä –æ—Ç–º–µ—Ç–∏—Ç—Å—è —Å–ª–µ—Ç–µ–≤—à–∏–º, –∏ –≤—ã–π–¥–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –Ω–æ–º–µ—Ä —Å–ª–µ—Ç–µ–ª"
        )
        try:
            bot.edit_message_text(
                moderator_text,
                chat_id,
                message_id,
                parse_mode='HTML'
            )
        except telebot.apihelper.ApiTelegramException as e:
            if "message is not modified" in str(e):
                print(f"[DEBUG] –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è chat_id={chat_id}, message_id={message_id}")
            else:
                print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                bot.send_message(
                    chat_id,
                    moderator_text,
                    parse_mode='HTML',
                    disable_notification=True  # –û—Ç–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                )
    else:
        price = db_module.get_user_price(user_id)
        with db_module.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT HOLD_TIME FROM settings')
            result = cursor.fetchone()
            hold_time = result[0] if result else 5

        welcome_text = (
                f"<b>üì¢ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {config.SERVICE_NAME}</b>\n\n"
                f"<b>‚è≥ –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:</b> <code>{config.WORK_TIME}</code>\n\n"
                f"<b>üíº –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?</b>\n"
                f"‚Ä¢ <i>–í—ã —Å–¥–∞–µ—Ç–µ –Ω–æ–º–µ—Ä</i> ‚Äì <b>–º—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã.</b>\n"
                f"‚Ä¢ <i>–ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã</i> ‚Äì <b>–ø–æ—Å–ª–µ —Å—Ç–æ–ø –≤–æ—Ä–∫–∞.</b>\n\n"
                f"<b>üìç –ü–æ—á–µ–º—É –≤—ã–±–∏—Ä–∞—é—Ç {config.SERVICE_NAME}?</b>\n"
                f"‚úÖ <i>–ü—Ä–æ–∑—Ä–∞—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞</i>\n"
                f"‚úÖ <i>–í—ã–≥–æ–¥–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã –∏ –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã</i>\n"
                f"‚úÖ <i>–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7</i>\n\n"
                f"<b>üí∞ –¢–∞—Ä–∏—Ñ—ã –Ω–∞ —Å–¥–∞—á—É –Ω–æ–º–µ—Ä–æ–≤:</b>\n"
                f"‚ñ™Ô∏è 6$ –∑–∞ –Ω–æ–º–µ—Ä (—Ö–æ–ª–¥ 1-6$, 2-12$)\n\n"
                "<b>üîπ –ù–∞—á–Ω–∏—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!</b>"
        )
        markup = types.InlineKeyboardMarkup()
        markup.row(
            types.InlineKeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
            types.InlineKeyboardButton("üì± –°–¥–∞—Ç—å –Ω–æ–º–µ—Ä", callback_data="submit_number")
        )

        is_admin = user_id in config.ADMINS_ID
        if not is_admin and not is_moderator:
            markup.add(types.InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –Ω–æ–º–µ—Ä", callback_data="delete_number"))
            markup.add(types.InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä", callback_data="change_number"))

        if is_admin:
            markup.add(types.InlineKeyboardButton("‚öôÔ∏è –ê–¥–º–∏–Ω–∫–∞", callback_data="admin_panel"))

        afk_button_text = "üî¥ –í—ã–∫–ª—é—á–∏—Ç—å –ê–§–ö" if is_afk and not afk_locked else "üü¢ –í–∫–ª—é—á–∏—Ç—å –ê–§–ö"
        if afk_locked:
            markup.add(types.InlineKeyboardButton(f"üîí –ê–§–ö –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω (–∞–¥–º–∏–Ω)", callback_data="afk_locked_info"))
        else:
            markup.add(types.InlineKeyboardButton(afk_button_text, callback_data="toggle_afk"))

        try:
            bot.edit_message_text(
                welcome_text,
                chat_id,
                message_id,
                parse_mode='HTML',
                reply_markup=markup
            )
        except telebot.apihelper.ApiTelegramException as e:
            if "message is not modified" in str(e):
                print(f"[DEBUG] –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è chat_id={chat_id}, message_id={message_id}")
            else:
                print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                bot.send_message(
                    chat_id,
                    welcome_text,
                    parse_mode='HTML',
                    reply_markup=markup,
                    disable_notification=True  # –û—Ç–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                )

        if is_afk and not afk_locked:
            bot.send_message(
                chat_id,
                "üîî –í–∞—à –ê–§–ö –æ—Ç–∫–ª—é—á—ë–Ω. –í–∞—à–∏ –Ω–æ–º–µ—Ä–∞ —Å–Ω–æ–≤–∞ –≤–∏–¥–Ω—ã.",
                parse_mode='HTML',
                disable_notification=True  # –û—Ç–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            )
        elif is_afk and afk_locked:
            bot.send_message(
                chat_id,
                "üîî –í—ã –≤ —Ä–µ–∂–∏–º–µ –ê–§–ö, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ù–æ–º–µ—Ä–∞ —Å–∫—Ä—ã—Ç—ã.",
                parse_mode='HTML',
                disable_notification=True  # –û—Ç–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            )

@bot.callback_query_handler(func=lambda call: call.data == "back_to_main")
def back_to_main(call):
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    user_id = call.from_user.id
    broadcast_state.pop(user_id, None)
    show_main_menu(chat_id, message_id, user_id)


@bot.callback_query_handler(func=lambda call: call.data.startswith("approve_user_"))
def approve_user_callback(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!")
        return
    
    user_id = int(call.data.split("_")[2])
    
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('UPDATE requests SET STATUS = ? WHERE ID = ?', ('approved', user_id))
        conn.commit()
        
        try:
            bot.send_message(user_id, "‚úÖ –í–∞—Å –≤–ø—É—Å—Ç–∏–ª–∏ –≤ –±–æ—Ç–∞! –ù–∞–ø–∏—à–∏—Ç–µ /start")
            text = f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ–¥–æ–±—Ä–µ–Ω"
        except:
            text = f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ–¥–æ–±—Ä–µ–Ω, –Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ"
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üìù –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ", callback_data="pending_requests"))
        
        bot.edit_message_text(text,
                             call.message.chat.id,
                             call.message.message_id,
                             parse_mode='HTML',
                             reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("reject_user_"))
def reject_user_callback(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!")
        return
    
    user_id = int(call.data.split("_")[2])
    
    with db.get_db() as conn:
        cursor = conn.cursor()
        current_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        cursor.execute('UPDATE requests SET STATUS = ?, LAST_REQUEST = ? WHERE ID = ?', ('rejected', current_date, user_id))
        conn.commit()
        
        try:
            bot.send_message(user_id, "‚ùå –í–∞–º –æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ. –í—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç.")
            text = f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫–ª–æ–Ω—ë–Ω"
        except:
            text = f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫–ª–æ–Ω—ë–Ω, –Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ"
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üìù –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ", callback_data="pending_requests"))
        
        bot.edit_message_text(text,
                             call.message.chat.id,
                             call.message.message_id,
                             parse_mode='HTML',
                             reply_markup=markup)





#–ß–¢–û –ë–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –£–î–ê–õ–ò–õ –ù–û–ú–ï–† –°–ê–ú –°–í–û–ô
@bot.callback_query_handler(func=lambda call: call.data == "delete_number")
def handle_delete_number(call):
    user_id = call.from_user.id
    chat_id = call.message.chat.id
    message_id = call.message.message_id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏ –Ω–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä
    is_admin = user_id in config.ADMINS_ID
    is_moderator = db_module.is_moderator(user_id)
    if is_admin or is_moderator:
        bot.answer_callback_query(call.id, "‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–±—ã—á–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!")
        return

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä(–∞) –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    msg = bot.send_message(
        chat_id,
        "üìû –í–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ –æ–¥–Ω–æ–º—É –≤ —Å—Ç—Ä–æ–∫–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n+79891234567\n79091234567\n9021234567:",
        reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")),
        disable_notification=True  # –û—Ç–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    )
    bot.register_next_step_handler(msg, process_delete_number, message_id)

def process_delete_number(message, original_message_id):
    chat_id = message.chat.id
    user_id = message.from_user.id
    input_text = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    if message.text == "/start" or (message.reply_markup and any(btn.callback_data == "back_to_start" for btn in message.reply_markup.inline_keyboard[0])):
        start(message)
        return

    if not input_text or input_text.startswith('/'):
        bot.send_message(
            chat_id,
            "‚ùå –í–≤–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –∏–ª–∏ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥'.",
            disable_notification=True  # –û—Ç–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        )
        start(message)
        return

    # –†–∞–∑–±–∏–≤–∞–µ–º –≤–≤–æ–¥ –Ω–∞ —Å–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤
    numbers = [num.strip() for num in input_text.split('\n') if num.strip()]
    results = []
    deleted_count = 0
    invalid_count = 0
    not_found_count = 0

    try:
        with db_module.get_db() as conn:
            cursor = conn.cursor()
            for number in numbers:
                # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä —Å –ø–æ–º–æ—â—å—é is_russian_number
                normalized_number = is_russian_number(number)
                if not normalized_number:
                    results.append(f"‚ùå –ù–æ–º–µ—Ä {number}: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–æ—Å—Å–∏–π—Å–∫–∏–π –Ω–æ–º–µ—Ä, –Ω–∞–ø—Ä–∏–º–µ—Ä, +79991234567, 79091234567 –∏–ª–∏ 9021234567.")
                    invalid_count += 1
                    continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                cursor.execute('SELECT * FROM numbers WHERE ID_OWNER = ? AND NUMBER = ?', (user_id, normalized_number))
                number_record = cursor.fetchone()

                if not number_record:
                    results.append(f"‚ùå –ù–æ–º–µ—Ä {normalized_number}: –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.")
                    not_found_count += 1
                    continue

                # –£–¥–∞–ª—è–µ–º –Ω–æ–º–µ—Ä
                cursor.execute('DELETE FROM numbers WHERE ID_OWNER = ? AND NUMBER = ?', (user_id, normalized_number))
                conn.commit()
                deleted_count += 1
                results.append(f"‚úÖ –ù–æ–º–µ—Ä {normalized_number}: —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")
                print(f"[DEBUG] –ù–æ–º–µ—Ä {normalized_number} —É–¥–∞–ª—ë–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        summary = "\n".join(results)
        summary += f"\n\nüìä –ò—Ç–æ–≥: —É–¥–∞–ª–µ–Ω–æ {deleted_count} –Ω–æ–º–µ—Ä–æ–≤, –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö {invalid_count}, –Ω–µ –Ω–∞–π–¥–µ–Ω–æ {not_found_count}."
        bot.send_message(
            chat_id,
            summary,
            disable_notification=True  # –û—Ç–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        )

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        start(message)

    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        bot.send_message(
            chat_id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            disable_notification=True  # –û—Ç–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        )
        start(message)

@bot.callback_query_handler(func=lambda call: call.data == "change_number")
def handle_change_number(call):
    user_id = call.from_user.id
    chat_id = call.message.chat.id
    message_id = call.message.message_id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏ –Ω–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä
    is_admin = user_id in config.ADMINS_ID
    is_moderator = db_module.is_moderator(user_id)
    if is_admin or is_moderator:
        bot.answer_callback_query(call.id, "‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–±—ã—á–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!")
        return

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –Ω–æ–º–µ—Ä —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    msg = bot.send_message(
        chat_id,
        "üìû –í–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
        reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")),
        disable_notification=True  # –û—Ç–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    )
    bot.register_next_step_handler(msg, process_old_number, message_id)

def process_old_number(message, original_message_id):
    chat_id = message.chat.id
    user_id = message.from_user.id
    old_number = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É
    if message.text == "/start" or (message.reply_markup and any(btn.callback_data == "back_to_start" for btn in message.reply_markup.inline_keyboard[0])):
        start(message)
        return

    if not old_number or old_number.startswith('/'):
        bot.send_message(
            chat_id,
            "‚ùå –ù–æ–º–µ—Ä –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –∏–ª–∏ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥'.",
            disable_notification=True  # –û—Ç–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        )
        start(message)
        return

    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä —Å –ø–æ–º–æ—â—å—é is_russian_number
    normalized_old_number = is_russian_number(old_number)
    if not normalized_old_number:
        bot.send_message(
            chat_id,
            "‚ùå –ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–æ—Å—Å–∏–π—Å–∫–∏–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79991234567, 79091234567 –∏–ª–∏ 9021234567).",
            disable_notification=True  # –û—Ç–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        )
        start(message)
        return

    try:
        with db_module.get_db() as conn:
            cursor = conn.cursor()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –Ω–æ–º–µ—Ä —É –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute('SELECT * FROM numbers WHERE ID_OWNER = ? AND NUMBER = ?', (user_id, normalized_old_number))
            number_record = cursor.fetchone()

            if not number_record:
                bot.send_message(
                    chat_id,
                    f"‚ùå –ù–æ–º–µ—Ä {normalized_old_number} –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –≤–∞—à–∏—Ö –Ω–æ–º–µ—Ä–æ–≤ –∏–ª–∏ –æ–Ω –≤–∞–º –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç.",
                    disable_notification=True  # –û—Ç–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                )
                start(message)
                return

            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
            msg = bot.send_message(
                chat_id,
                f"üìû –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –¥–ª—è –∑–∞–º–µ–Ω—ã {normalized_old_number}:",
                reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")),
                disable_notification=True  # –û—Ç–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            )
            bot.register_next_step_handler(msg, process_new_number, original_message_id, normalized_old_number)

    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–º–µ—Ä–∞ {normalized_old_number} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        bot.send_message(
            chat_id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            disable_notification=True  # –û—Ç–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        )
        start(message)

def process_new_number(message, original_message_id, old_number):
    chat_id = message.chat.id
    user_id = message.from_user.id
    new_number = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É
    if message.text == "/start" or (message.reply_markup and any(btn.callback_data == "back_to_start" for btn in message.reply_markup.inline_keyboard[0])):
        start(message)
        return

    if not new_number or new_number.startswith('/'):
        bot.send_message(
            chat_id,
            "‚ùå –ù–æ–≤—ã–π –Ω–æ–º–µ—Ä –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –∏–ª–∏ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥'.",
            disable_notification=True  # –û—Ç–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        )
        start(message)
        return

    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Å –ø–æ–º–æ—â—å—é is_russian_number
    normalized_new_number = is_russian_number(new_number)
    if not normalized_new_number:
        bot.send_message(
            chat_id,
            "‚ùå –ù–æ–≤—ã–π –Ω–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–æ—Å—Å–∏–π—Å–∫–∏–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79991234567, 79091234567 –∏–ª–∏ 9021234567).",
            disable_notification=True  # –û—Ç–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        )
        start(message)
        return

    try:
        with db_module.get_db() as conn:
            cursor = conn.cursor()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —É –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute('SELECT * FROM numbers WHERE NUMBER = ? AND ID_OWNER != ?', (normalized_new_number, user_id))
            existing_record = cursor.fetchone()
            if existing_record:
                bot.send_message(
                    chat_id,
                    f"‚ùå –ù–æ–º–µ—Ä {normalized_new_number} —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.",
                    disable_notification=True  # –û—Ç–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                )
                start(message)
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            cursor.execute('UPDATE numbers SET NUMBER = ? WHERE ID_OWNER = ? AND NUMBER = ?', (normalized_new_number, user_id, old_number))
            conn.commit()
            print(f"[DEBUG] –ù–æ–º–µ—Ä –∏–∑–º–µ–Ω—ë–Ω —Å {old_number} –Ω–∞ {normalized_new_number} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏
            bot.send_message(
                chat_id,
                f"‚úÖ –ù–æ–º–µ—Ä –∏–∑–º–µ–Ω—ë–Ω —Å {old_number} –Ω–∞ {normalized_new_number} —É—Å–ø–µ—à–Ω–æ!",
                disable_notification=True  # –û—Ç–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            )

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            start(message)

    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞ {old_number} –Ω–∞ {normalized_new_number} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        bot.send_message(
            chat_id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            disable_notification=True  # –û—Ç–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        )
        start(message)
        
#===========================================================================
#======================–ü–†–û–§–ò–õ–¨=====================–ü–†–û–§–ò–õ–¨==================
#===========================================================================

@bot.callback_query_handler(func=lambda call: call.data == "profile")
def show_profile(call):
    user_id = call.from_user.id
    db.update_last_activity(user_id)
    check_balance_and_fix(user_id)
    
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM users WHERE ID = ?', (user_id,))
        user = cursor.fetchone()
        
        cursor.execute('SELECT PRICE, HOLD_TIME FROM settings')
        result = cursor.fetchone()
        price, hold_time = result if result else (2.0, 5)
        
        if user:
            cursor.execute('SELECT COUNT(*) FROM numbers WHERE ID_OWNER = ? AND SHUTDOWN_DATE = "0"', (user_id,))
            active_numbers = cursor.fetchone()[0]
            
            # –ü–æ–¥—Å—á–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            cursor.execute('''
                SELECT 
                    SUM(CASE WHEN STATUS = "–æ—Ç—Å—Ç–æ—è–ª 1/2" THEN 1 ELSE 0 END) as half,
                    SUM(CASE WHEN STATUS = "–æ—Ç—Å—Ç–æ—è–ª 2/2" THEN 1 ELSE 0 END) as full,
                    SUM(CASE WHEN STATUS LIKE "–æ—Ç—Å—Ç–æ—è–ª 2/2%" AND HOLDS_COUNT > 2 THEN 1 ELSE 0 END) as plus
                FROM numbers 
                WHERE ID_OWNER = ? AND STATUS LIKE "–æ—Ç—Å—Ç–æ—è–ª%"
            ''', (user_id,))
            result = cursor.fetchone()
            half, full, plus = result if result else (0, 0, 0)
            
            roles = []
            if user_id in config.ADMINS_ID:
                roles.append("üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
            if db.is_moderator(user_id):
                roles.append("üõ° –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä")
            if not roles:
                roles.append("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —É—Å–ø–µ—à–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤
            successful_text = "‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤:\n"
            successful_text += f"1. 1/2: {half}\n"
            successful_text += f"2. 2/2: {full}\n"
            successful_text += f"3. 2/2+: {plus}\n"
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π (–∏–Ω–¥–µ–∫—Å 9 –¥–ª—è WARNINGS)
            warnings = user[9] if len(user) > 9 and user[9] is not None else 0

            profile_text = (f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n\n"
                          f"üÜîID —Å—Å—ã–ª–∫–æ–π: <code>https://t.me/@id{user_id}</code>\n"
                          f"üÜî ID: <code>{user[0]}</code>\n"
                          f"üí∞ –ë–∞–ª–∞–Ω—Å: {user[1]} $\n"
                          f"üì± –ê–∫—Ç–∏–≤–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤: {active_numbers}\n"
                          f"{successful_text}"
                          f"üé≠ –†–æ–ª—å: {' | '.join(roles)}\n"
                          f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {warnings}/6\n"
                          f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user[2]}\n"  # REG_DATE - 3-–π —Å—Ç–æ–ª–±–µ—Ü
                          f"üíµ –¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: {price}$ –∑–∞ –Ω–æ–º–µ—Ä\n"
                          f"‚è± –í—Ä–µ–º—è —Ö–æ–ª–¥–∞: {hold_time} –º–∏–Ω—É—Ç")

            markup = types.InlineKeyboardMarkup()
            markup.add(
                types.InlineKeyboardButton("üí≥ –í—ã–≤–µ—Å—Ç–∏", callback_data="withdraw"),
                types.InlineKeyboardButton("üì± –ú–æ–∏ –Ω–æ–º–µ—Ä–∞", callback_data="my_numbers")
            )
            
            if user_id in config.ADMINS_ID:
                cursor.execute('SELECT COUNT(*) FROM users')
                total_users = cursor.fetchone()[0]
                cursor.execute('SELECT COUNT(*) FROM numbers WHERE SHUTDOWN_DATE = "0"')
                active_total = cursor.fetchone()[0]
                cursor.execute('SELECT COUNT(*) FROM numbers')
                total_numbers = cursor.fetchone()[0]
                
                profile_text += (f"\n\nüìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:</b>\n"
                               f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
                               f"üì± –ê–∫—Ç–∏–≤–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤: {active_total}\n"
                               f"üìä –í—Å–µ–≥–æ –Ω–æ–º–µ—Ä–æ–≤: {total_numbers}")
            
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
            
            try:
                bot.delete_message(call.message.chat.id, call.message.message_id)
            except:
                pass
            bot.send_message(call.message.chat.id, profile_text, reply_markup=markup, parse_mode='HTML')          

@bot.callback_query_handler(func=lambda call: call.data == "withdraw")
def start_withdrawal_request(call):
    user_id = call.from_user.id
    db.update_last_activity(user_id)
    
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT BALANCE FROM users WHERE ID = ?', (user_id,))
        balance = cursor.fetchone()[0]
        
        if balance > 0:
            msg = bot.edit_message_text(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance}$\nüí≥ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–î–∞' –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤—Å–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞:",
                                      call.message.chat.id,
                                      call.message.message_id)
            bot.register_next_step_handler(msg, handle_withdrawal_request, balance)
        else:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üë§ –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url=f"https://t.me/{config.PAYOUT_MANAGER}"))
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile"))
            markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
            bot.edit_message_text(f"‚ùå –ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞.\n\n"
                               f"–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∏–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –≤—ã–≤–æ–¥—É, "
                               f"—Å–≤—è–∂–∏—Ç–µ—Å—å —Å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º –∑–∞ –≤—ã–ø–ª–∞—Ç—ã: @{config.PAYOUT_MANAGER}",
                                call.message.chat.id,
                                call.message.message_id,
                                reply_markup=markup)


def handle_withdrawal_request(message, amount):
    user_id = message.from_user.id
    chat_id = message.chat.id  # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è get_chat_member

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è username
    try:
        user_info = bot.get_chat_member(chat_id, user_id).user
        username = f"@{user_info.username}" if user_info.username else "–ù–µ—Ç username"
        username_link = f"<a href=\"tg://user?id={user_id}\">{username}</a>" if user_info.username else "–ù–µ—Ç username"
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å username –¥–ª—è user_id {user_id}: {e}")
        username_link = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT BALANCE FROM users WHERE ID = ?', (user_id,))
        user = cursor.fetchone()

        if not user or user[0] <= 0:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile"))
            markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
            bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –≤—ã–≤–æ–¥–∞.", reply_markup=markup)
            return
        withdrawal_amount = user[0]
        
        try:
            if message.text != "–î–∞" and message.text != "–¥–∞":
                try:
                    requested_amount = float(message.text)
                    if requested_amount <= 0:
                        markup = types.InlineKeyboardMarkup()
                        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile"))
                        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
                        bot.send_message(message.chat.id, "‚ùñ –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.", reply_markup=markup)
                        return
                        
                    if requested_amount > withdrawal_amount:
                        markup = types.InlineKeyboardMarkup()
                        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile"))
                        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
                        bot.send_message(message.chat.id, 
                                      f"‚ùå –ó–∞–ø—Ä–æ—à–µ–Ω–Ω–∞—è —Å—É–º–º–∞ ({requested_amount}$) –ø—Ä–µ–≤—ã—à–∞–µ—Ç –≤–∞—à –±–∞–ª–∞–Ω—Å ({withdrawal_amount}$).", 
                                      reply_markup=markup)
                        return
                        
                    withdrawal_amount = requested_amount
                except ValueError:
                    pass
            
            processing_message = bot.send_message(message.chat.id, 
                                        f"‚è≥ <b>–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–≤–æ–¥ {withdrawal_amount}$...</b>\n\n"
                                        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –º—ã —Ñ–æ—Ä–º–∏—Ä—É–µ–º –≤–∞—à —á–µ–∫.",
                                        parse_mode='HTML')
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –∫–∞–∑–Ω—ã –∏–∑ API CryptoBot
            treasury_balance = db_module.get_treasury_balance()
            logging.info(f"[DEBUG] Treasury balance: {treasury_balance}, Withdrawal amount: {withdrawal_amount}")
            
            if withdrawal_amount > treasury_balance:
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile"))
                markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
                bot.edit_message_text(
                    f"‚ùå <b>–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—ã–≤–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</b>\n\n"
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    message.chat.id, 
                    processing_message.message_id,
                    parse_mode='HTML',
                    reply_markup=markup
                )
                
                admin_message = (
                    f"‚ö†Ô∏è <b>–ü–æ–ø—ã—Ç–∫–∞ –≤—ã–≤–æ–¥–∞ –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤–∞—Ö</b>\n\n"
                    f"üë§ ID: <a href=\"https://t.me/@id{user_id}\">{user_id}</a>\n"
                    f"üë§ Username: {username_link}\n"
                    f"üíµ –ó–∞–ø—Ä–æ—à–µ–Ω–Ω–∞—è —Å—É–º–º–∞: {withdrawal_amount}$\n"
                    f"üí∞ –ë–∞–ª–∞–Ω—Å –∫–∞–∑–Ω—ã: {treasury_balance}$\n\n"
                    f"‚õîÔ∏è –í—ã–≤–æ–¥ –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–∑-–∑–∞ –Ω–µ—Ö–≤–∞—Ç–∫–∏ —Å—Ä–µ–¥—Å—Ç–≤ –≤ –∫–∞–∑–Ω–µ."
                )
                for admin_id in config.ADMINS_ID:
                    try:
                        bot.send_message(admin_id, admin_message, parse_mode='HTML')
                    except:
                        continue
                return
            
            auto_input_status = db_module.get_auto_input_status()
            
            if not auto_input_status:
                cursor.execute('INSERT INTO withdraws (ID, AMOUNT, DATE, STATUS) VALUES (?, ?, ?, ?)', 
                             (user_id, withdrawal_amount, datetime.now().strftime("%Y-%m-%d %H:%M:%S"), "pending"))
                conn.commit()
                new_balance = user[0] - withdrawal_amount
                cursor.execute('UPDATE users SET BALANCE = ? WHERE ID = ?', (new_balance, user_id))
                conn.commit()
                # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –∫–∞–∑–Ω—ã –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ü–µ–ª–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è)
                treasury_new_balance = treasury_balance - withdrawal_amount
                # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
                db_module.update_treasury_balance(-withdrawal_amount)
                
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile"))
                markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
                
                bot.edit_message_text(
                    f"‚úÖ <b>–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –ø—Ä–∏–Ω—è—Ç!</b>\n\n"
                    f"–°—É–º–º–∞: <code>{withdrawal_amount}$</code>\n"
                    f"–ù–æ–≤–æ–π –±–∞–ª–∞–Ω—Å: <code>{new_balance}$</code>\n\n"
                    f"‚ö†Ô∏è –ê–≤—Ç–æ-–≤—ã–≤–æ–¥ –æ—Ç–∫–ª—é—á–µ–Ω. –°—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –≤—ã–≤–µ–¥–µ–Ω—ã –≤—Ä—É—á–Ω—É—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                    message.chat.id, 
                    processing_message.message_id,
                    parse_mode='HTML',
                    reply_markup=markup
                )
                
                admin_message = (
                    f"üí∞ <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É</b>\n\n"
                    f"üë§ ID: <a href=\"https://t.me/@id{user_id}\">{user_id}</a>\n"
                    f"üë§ Username: {username_link}\n"
                    f"üíµ –°—É–º–º–∞: {withdrawal_amount}$\n"
                    f"üí∞ –ë–∞–ª–∞–Ω—Å –∫–∞–∑–Ω—ã: {treasury_balance}$"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π –±–∞–ª–∞–Ω—Å
                )
                admin_markup = types.InlineKeyboardMarkup()
                admin_markup.add(
                    types.InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫", callback_data=f"send_check_{user_id}_{withdrawal_amount}"),
                    types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_withdraw_{user_id}_{withdrawal_amount}")
                )
                for admin_id in config.ADMINS_ID:
                    try:
                        bot.send_message(admin_id, admin_message, reply_markup=admin_markup, parse_mode='HTML')
                    except:
                        continue
                return
            
            try:
                crypto_api = crypto_pay.CryptoPay()
                cheque_result = crypto_api.create_check(
                    amount=withdrawal_amount,
                    asset="USDT",
                    description=f"–í—ã–ø–ª–∞—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}"
                )
                
                if cheque_result.get("ok", False):
                    cheque = cheque_result.get("result", {})
                    cheque_link = cheque.get("bot_check_url", "")
                    
                    if cheque_link:
                        new_balance = user[0] - withdrawal_amount
                        cursor.execute('UPDATE users SET BALANCE = ? WHERE ID = ?', (new_balance, user_id))
                        conn.commit()
                        # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –∫–∞–∑–Ω—ã –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
                        treasury_new_balance = treasury_balance - withdrawal_amount
                        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
                        db_module.update_treasury_balance(-withdrawal_amount)
                        db_module.log_treasury_operation("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥", withdrawal_amount, treasury_new_balance)
                        
                        markup = types.InlineKeyboardMarkup()
                        markup.add(types.InlineKeyboardButton("üí≥ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —á–µ–∫", url=cheque_link))
                        markup.add(types.InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile"))
                        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
                        
                        bot.edit_message_text(
                            f"‚úÖ <b>–í–∞—à –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!</b>\n\n"
                            f"–°—É–º–º–∞: <code>{withdrawal_amount}$</code>\n"
                            f"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: <code>{new_balance}$</code>\n\n"
                            f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —á–µ–∫:",
                            message.chat.id, 
                            processing_message.message_id,
                            parse_mode='HTML',
                            reply_markup=markup
                        )
                        
                        log_entry = f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] | –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥ | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} | –°—É–º–º–∞ {withdrawal_amount}$"
                        with open("withdrawals_log.txt", "a", encoding="utf-8") as log_file:
                            log_file.write(log_entry + "\n")
                        
                        admin_message = (
                            f"üí∏ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω</b>\n\n"
                            f"üë§ ID: <a href=\"https://t.me/@id{user_id}\">{user_id}</a>\n"
                            f"üë§ Username: {username_link}\n"
                            f"üíµ –°—É–º–º–∞: {withdrawal_amount}$\n"
                            f"üí∞ –ë–∞–ª–∞–Ω—Å –∫–∞–∑–Ω—ã: {treasury_new_balance}$\n\n"
                            f"üîó –ß–µ–∫: {cheque_link}"
                        )
                        for admin_id in config.ADMINS_ID:
                            try:
                                bot.send_message(admin_id, admin_message, parse_mode='HTML')
                            except:
                                continue
                    else:
                        markup = types.InlineKeyboardMarkup()
                        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile"))
                        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
                        bot.edit_message_text(
                            f"‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á–µ–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞</b>\n\n"
                            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                            message.chat.id, 
                            processing_message.message_id,
                            parse_mode='HTML',
                            reply_markup=markup
                        )
                else:
                    markup = types.InlineKeyboardMarkup()
                    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile"))
                    markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
                    bot.edit_message_text(
                        f"‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á–µ–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞</b>\n\n"
                        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                        message.chat.id, 
                        processing_message.message_id,
                        parse_mode='HTML',
                        reply_markup=markup
                    )
            except Exception as e:
                print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–µ–∫–∞ –¥–ª—è user_id {user_id}: {e}")
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile"))
                markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
                bot.edit_message_text(
                    f"‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–≤–æ–¥–∞</b>\n\n"
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    message.chat.id, 
                    processing_message.message_id,
                    parse_mode='HTML',
                    reply_markup=markup
                )
                admin_message = (
                    f"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –≤—ã–≤–æ–¥–µ</b>\n\n"
                    f"üë§ ID: <a href=\"https://t.me/@id{user_id}\">{user_id}</a>\n"
                    f"üë§ Username: {username_link}\n"
                    f"üíµ –°—É–º–º–∞: {withdrawal_amount}$\n"
                    f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
                )
                for admin_id in config.ADMINS_ID:
                    try:
                        bot.send_message(admin_id, admin_message, parse_mode='HTML')
                    except:
                        continue
        except Exception as e:
            print(f"[ERROR] –û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ handle_withdrawal_request –¥–ª—è user_id {user_id}: {e}")
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile"))
            markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
            bot.send_message(message.chat.id, 
                           f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", 
                           reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data in ["check_afk_status"])
def check_and_set_afk(call):
    try:
        user_id = call.from_user.id
        logging.debug(f"[DEBUG] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ AFK –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. –ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.")

        with db_module.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT WARNINGS, AFK_LOCKED FROM users WHERE ID = ?', (user_id,))
            user_data = cursor.fetchone()
            if not user_data:
                logging.error(f"[ERROR] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞: –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            warnings, afk_locked = user_data
            logging.debug(f"[DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: WARNINGS={warnings}, AFK_LOCKED={afk_locked}")

            if warnings >= 6 and afk_locked == 0:  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å == 6 –Ω–∞ >= 6
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º AFK –Ω–∞–≤—Å–µ–≥–¥–∞
                cursor.execute('UPDATE users SET AFK_LOCKED = 1 WHERE ID = ?', (user_id,))
                conn.commit()
                logging.info(f"[INFO] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–µ—Ä–µ–≤–µ–¥—ë–Ω –≤ AFK –Ω–∞–≤—Å–µ–≥–¥–∞ –∏–∑-–∑–∞ {warnings} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")

                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                message = (
                    f"‚ö†Ô∏è –£ –≤–∞—Å {warnings} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π! ‚ùå\n"
                    f"–ò–∑-–∑–∞ —ç—Ç–æ–≥–æ –≤–∞–º –≤—ã–¥–∞–Ω —Ä–µ–∂–∏–º AFK –Ω–∞–≤—Å–µ–≥–¥–∞ (–¥–æ —Å–Ω—è—Ç–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º)."
                )
                markup = telebot.types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
                bot.send_message(user_id, message, reply_markup=markup, parse_mode='HTML')

            elif afk_locked == 1:
                bot.answer_callback_query(call.id, "‚ùå –í—ã —É–∂–µ –≤ AFK. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Å–Ω—è—Ç–∏—è —Ä–µ–∂–∏–º–∞.")
                return

            else:
                logging.debug(f"[DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –¥–æ—Å—Ç–∏–≥ 6 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –∏–ª–∏ —É–∂–µ –≤ AFK. –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {warnings}")

            bot.answer_callback_query(call.id, "‚úÖ –°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–µ–Ω.")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ AFK –¥–ª—è {user_id}: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞.")

def check_all_users_for_afk():
    with db_module.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT ID, WARNINGS, AFK_LOCKED FROM users')
        users = cursor.fetchall()
        for user_id, warnings, afk_locked in users:
            if warnings >= 6 and afk_locked == 0:
                cursor.execute('UPDATE users SET AFK_LOCKED = 1 WHERE ID = ?', (user_id,))
                conn.commit()
                logging.info(f"[INFO] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–µ—Ä–µ–≤–µ–¥—ë–Ω –≤ AFK –Ω–∞–≤—Å–µ–≥–¥–∞ –∏–∑-–∑–∞ {warnings} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")
                bot.send_message(user_id, f"‚ö†Ô∏è –£ –≤–∞—Å {warnings} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π! ‚ùå\n–ò–∑-–∑–∞ —ç—Ç–æ–≥–æ –≤–∞–º –≤—ã–¥–∞–Ω —Ä–µ–∂–∏–º AFK –Ω–∞–≤—Å–µ–≥–¥–∞ (–¥–æ —Å–Ω—è—Ç–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º).", parse_mode='HTML')

@bot.callback_query_handler(func=lambda call: call.data.startswith("send_check_"))
def send_check_callback(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!")
        return

    try:
        parts = call.data.split("_")
        user_id = int(parts[2])
        amount = float(parts[3])

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è username
        try:
            user_info = bot.get_chat_member(user_id, user_id).user
            username = f"@{user_info.username}" if user_info.username else "–ù–µ—Ç username"
            username_link = f"<a href=\"tg://user?id={user_id}\">{username}</a>" if user_info.username else "–ù–µ—Ç username"
        except Exception as e:
            print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å username –¥–ª—è user_id {user_id}: {e}")
            username_link = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        with db.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT BALANCE FROM users WHERE ID = ?', (user_id,))
            user = cursor.fetchone()
            if not user or user[0] < amount:
                bot.answer_callback_query(call.id, f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}!")
                bot.edit_message_text(
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫ –Ω–∞ {amount}$ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.",
                    call.message.chat.id,
                    call.message.message_id,
                    parse_mode='HTML'
                )
                return

        # –°–æ–∑–¥–∞—ë–º —á–µ–∫ —á–µ—Ä–µ–∑ CryptoBot API
        crypto_api = crypto_pay.CryptoPay()
        cheque_result = crypto_api.create_check(
            amount=amount,
            asset="USDT",
            description=f"–í—ã–ø–ª–∞—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}"
        )

        if cheque_result.get("ok", False):
            cheque = cheque_result.get("result", {})
            cheque_link = cheque.get("bot_check_url", "")

            if cheque_link:
                # –£–º–µ–Ω—å—à–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                with db.get_db() as conn:
                    cursor = conn.cursor()
                    cursor.execute('UPDATE users SET BALANCE = BALANCE - ? WHERE ID = ?', (amount, user_id))
                    cursor.execute('SELECT BALANCE FROM users WHERE ID = ?', (user_id,))
                    new_balance = cursor.fetchone()[0]
                    conn.commit()
                    print(f"[DEBUG] –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–º–µ–Ω—å—à–µ–Ω –Ω–∞ {amount}$, –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}")

                # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∫–∞–∑–Ω—ã
                db_module.update_treasury_balance(-amount)

                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                markup_user = types.InlineKeyboardMarkup()
                markup_user.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile"))
                safe_send_message(
                    user_id,
                    f"‚úÖ –í–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ–∫ –Ω–∞ {amount}$!\n"
                    f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —á–µ–∫: {cheque_link}\n"
                    f"üí∞ –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}$",
                    parse_mode='HTML',
                    reply_markup=markup_user
                )

                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                markup_admin = types.InlineKeyboardMarkup()
                markup_admin.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –∑–∞—è–≤–∫–∏", callback_data="pending_withdrawals"))
                bot.edit_message_text(
                    f"‚úÖ –ß–µ–∫ –Ω–∞ {amount}$ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} ({username_link}).\n"
                    f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {new_balance}$",
                    call.message.chat.id,
                    call.message.message_id,
                    parse_mode='HTML',
                    reply_markup=markup_admin
                )

                # –õ–æ–≥–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
                db_module.log_treasury_operation("–í—ã–≤–æ–¥ (—á–µ–∫)", -amount, db_module.get_treasury_balance())
            else:
                bot.edit_message_text(
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á–µ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.",
                    call.message.chat.id,
                    call.message.message_id,
                    parse_mode='HTML'
                )
        else:
            bot.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–µ–∫–∞: {cheque_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}",
                call.message.chat.id,
                call.message.message_id,
                parse_mode='HTML'
            )

        bot.answer_callback_query(call.id, f"–ß–µ–∫ –Ω–∞ {amount}$ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.")
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –≤ send_check_callback: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–µ–∫–∞!")
        bot.edit_message_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–µ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.",
            call.message.chat.id,
            call.message.message_id,
            parse_mode='HTML'
        )

@bot.callback_query_handler(func=lambda call: call.data.startswith("manual_check_"))
def manual_check_request(call):
    if call.from_user.id in config.ADMINS_ID:
        _, _, user_id, amount = call.data.split("_")
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
        msg = bot.edit_message_text(
            f"üì§ –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —á–µ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ —Å—É–º–º—É {amount}$:",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup
        )
        bot.register_next_step_handler(msg, process_check_link, user_id, amount)

def process_check_link_success(call, user_id, amount, check_link):
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('DELETE FROM withdraws WHERE ID = ? AND AMOUNT = ?', (int(user_id), float(amount)))
        conn.commit()
    
    markup_admin = types.InlineKeyboardMarkup()
    markup_admin.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
    markup_admin.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    bot.edit_message_text(
        f"‚úÖ –ß–µ–∫ –Ω–∞ —Å—É–º–º—É {amount}$ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup_admin
    )
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üí≥ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —á–µ–∫", url=check_link))
    markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    try:
        bot.send_message(int(user_id),
                       f"‚úÖ –í–∞—à–∞ –≤—ã–ø–ª–∞—Ç–∞ {amount}$ –≥–æ—Ç–æ–≤–∞!\nüí≥ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —á–µ–∫–∞",
                       reply_markup=markup)
    except Exception as e:
        print(f"Error sending message to user {user_id}: {e}")

def process_check_link(message, user_id, amount):
    if message.from_user.id in config.ADMINS_ID:
        check_link = message.text.strip()
        
        if not check_link.startswith("https://") or "t.me/" not in check_link:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"manual_check_{user_id}_{amount}"))
            markup.add(types.InlineKeyboardButton("üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
            bot.send_message(message.chat.id, 
                           "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ —á–µ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–ª–∏ –ø–æ–ª–Ω—É—é —Å—Å—ã–ª–∫—É.",
                           reply_markup=markup)
            return
        
        with db.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('DELETE FROM withdraws WHERE ID = ? AND AMOUNT = ?', (int(user_id), float(amount)))
            conn.commit()
        
        markup_admin = types.InlineKeyboardMarkup()
        markup_admin.add(types.InlineKeyboardButton("üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
        markup_admin.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        bot.send_message(message.chat.id,
                       f"‚úÖ –ß–µ–∫ –Ω–∞ —Å—É–º–º—É {amount}$ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}",
                       reply_markup=markup_admin)
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üí≥ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —á–µ–∫", url=check_link))
        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        try:
            bot.send_message(int(user_id),
                           f"‚úÖ –í–∞—à–∞ –≤—ã–ø–ª–∞—Ç–∞ {amount}$ –≥–æ—Ç–æ–≤–∞!\nüí≥ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —á–µ–∫–∞",
                           reply_markup=markup)
        except Exception as e:
            print(f"Error sending message to user {user_id}: {e}")


@bot.callback_query_handler(func=lambda call: call.data.startswith("reject_withdraw_"))
def reject_withdraw(call):
    if call.from_user.id in config.ADMINS_ID:
        _, _, user_id, amount = call.data.split("_")
        amount = float(amount)
        
        with db.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('UPDATE users SET BALANCE = BALANCE + ? WHERE ID = ?', (amount, int(user_id)))
            cursor.execute('DELETE FROM withdraws WHERE ID = ? AND AMOUNT = ?', (int(user_id), amount))
            conn.commit()
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üí≥ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="withdraw"))
        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        try:
            bot.send_message(int(user_id),
                           f"‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ {amount}$ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞\nüí∞ –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å",
                           reply_markup=markup)
        except:
            pass
        
        markup_admin = types.InlineKeyboardMarkup()
        markup_admin.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
        markup_admin.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        bot.edit_message_text("‚úÖ –í—ã–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞, —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã",
                            call.message.chat.id,
                            call.message.message_id,
                            reply_markup=markup_admin)


#===========================================================================
#=======================–ö–ê–ó–ù–ê====================–ö–ê–ó–ù–ê======================
#===========================================================================

 

@bot.callback_query_handler(func=lambda call: call.data == "treasury")
def show_treasury(call):
    if call.from_user.id not in config.dostup:
        bot.answer_callback_query(call.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True)
        return
    
    auto_input_status = db_module.get_auto_input_status()
    
    try:
        crypto_api = crypto_pay.CryptoPay()
        balance_result = crypto_api.get_balance()
        
        if not balance_result.get("ok", False):
            raise Exception(f"–û—à–∏–±–∫–∞ API CryptoBot: {balance_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        
        crypto_balance = 0
        for currency in balance_result.get("result", []):
            if currency.get("currency_code") == "USDT":
                crypto_balance = float(currency.get("available", "0"))
                break
        
        print(f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å CryptoBot: {crypto_balance} USDT")
        
        treasury_text = f"üí∞ <b>–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –∫–∞–∑–Ω–∞!</b>\n\n–í –Ω–µ–π –ª–µ–∂–∏—Ç: <code>{crypto_balance}</code> USDT"
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ CryptoBot: {e}")
        treasury_text = f"üí∞ <b>–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –∫–∞–∑–Ω–∞!</b>\n\n–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: <code>{str(e)}</code>"
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üì§ –í—ã–≤–µ—Å—Ç–∏", callback_data="treasury_withdraw"))
    markup.add(types.InlineKeyboardButton("üì• –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="treasury_deposit"))
    auto_input_text = "üî¥ –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ-–≤–≤–æ–¥" if not auto_input_status else "üü¢ –í—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ-–≤–≤–æ–¥"
    markup.add(types.InlineKeyboardButton(auto_input_text, callback_data="treasury_toggle_auto"))
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
    markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    
    bot.edit_message_text(
        treasury_text,
        call.message.chat.id,
        call.message.message_id,
        parse_mode='HTML',
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data == "treasury_withdraw")
def treasury_withdraw_request(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True)
        return
    
    admin_id = call.from_user.id
    
    try:
        crypto_api = crypto_pay.CryptoPay()
        balance_result = crypto_api.get_balance()
        
        if not balance_result.get("ok", False):
            raise Exception(f"–û—à–∏–±–∫–∞ API CryptoBot: {balance_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        
        crypto_balance = 0
        for currency in balance_result.get("result", []):
            if currency.get("currency_code") == "USDT":
                crypto_balance = float(currency.get("available", "0"))
                break
        
        print(f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å CryptoBot: {crypto_balance} USDT")
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–∑–Ω–µ", callback_data="treasury"))
        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        
        msg = bot.edit_message_text(
            f"üì§ <b>–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –∏–∑ –∫–∞–∑–Ω—ã</b>\n\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <code>{crypto_balance}</code> USDT\n\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:",
            call.message.chat.id,
            call.message.message_id,
            parse_mode='HTML',
            reply_markup=markup
        )
        
        bot.register_next_step_handler(msg, process_treasury_withdraw)
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ CryptoBot: {e}")
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–∑–Ω–µ", callback_data="treasury"))
        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        
        bot.edit_message_text(
            f"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:</b> {str(e)}",
            call.message.chat.id,
            call.message.message_id,
            parse_mode='HTML',
            reply_markup=markup
        )

def process_treasury_withdraw(message):
    if message.from_user.id not in config.ADMINS_ID:
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", parse_mode='HTML')
        return
    
    admin_id = message.from_user.id
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–∑–Ω–µ", callback_data="treasury"))
    markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    
    try:
        amount = float(message.text)
        
        if amount <= 0:
            bot.send_message(
                message.chat.id,
                "‚ùå <b>–û—à–∏–±–∫–∞!</b> –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–±–æ–ª—å—à–µ –Ω—É–ª—è).",
                parse_mode='HTML',
                reply_markup=markup
            )
            return
        
        with treasury_lock:
            crypto_api = crypto_pay.CryptoPay()
            balance_result = crypto_api.get_balance()
            
            if not balance_result.get("ok", False):
                raise Exception(f"–û—à–∏–±–∫–∞ API CryptoBot: {balance_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            
            crypto_balance = 0
            for currency in balance_result.get("result", []):
                if currency.get("currency_code") == "USDT":
                    crypto_balance = float(currency.get("available", "0"))
                    break
            
            print(f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å CryptoBot: {crypto_balance} USDT")
            
            if amount > crypto_balance:
                bot.send_message(
                    message.chat.id,
                    f"‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ CryptoBot!</b>\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <code>{crypto_balance}</code> USDT",
                    parse_mode='HTML',
                    reply_markup=markup
                )
                return
            
            amount_to_send = calculate_amount_to_send(amount)
            
            check_result = crypto_api.create_check(
                amount=amount_to_send,
                asset="USDT",
                description=f"–í—ã–≤–æ–¥ –∏–∑ –∫–∞–∑–Ω—ã –æ—Ç {admin_id}"
            )
            
            if check_result.get("ok", False):
                check = check_result.get("result", {})
                check_link = check.get("bot_check_url", "")
                
                if check_link:
                    new_balance = db_module.update_treasury_balance(-amount)
                    db_module.log_treasury_operation("–ê–≤—Ç–æ–≤—ã–≤–æ–¥ —á–µ—Ä–µ–∑ —á–µ–∫", amount, new_balance)
                    
                    markup = types.InlineKeyboardMarkup()
                    markup.add(types.InlineKeyboardButton("üí∏ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —á–µ–∫", url=check_link))
                    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–∑–Ω–µ", callback_data="treasury"))
                    markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
                    
                    bot.send_message(
                        message.chat.id,
                        f"‚úÖ <b>–°—Ä–µ–¥—Å—Ç–≤–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–≤–µ–¥–µ–Ω—ã —Å –ø–æ–º–æ—â—å—é —á–µ–∫–∞!</b>\n\n"
                        f"–°—É–º–º–∞: <code>{amount}</code> USDT\n"
                        f"–û—Å—Ç–∞—Ç–æ–∫ –≤ –∫–∞–∑–Ω–µ: <code>{new_balance}</code> USDT\n\n"
                        f"–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ —á–µ–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ:",
                        parse_mode='HTML',
                        reply_markup=markup
                    )
                    return
            else:
                error_details = check_result.get("error_details", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–µ–∫–∞: {error_details}")
    
    except ValueError:
        bot.send_message(
            message.chat.id,
            "‚ùå <b>–û—à–∏–±–∫–∞!</b> –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.",
            parse_mode='HTML',
            reply_markup=markup
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —á–µ—Ä–µ–∑ CryptoBot: {e}")
        bot.send_message(
            message.chat.id,
            f"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–≤—ã–≤–æ–¥–µ —Å—Ä–µ–¥—Å—Ç–≤:</b> {str(e)}",
            parse_mode='HTML',
            reply_markup=markup
        )

@bot.callback_query_handler(func=lambda call: call.data == "treasury_deposit")
def treasury_deposit_request(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True)
        return
    
    admin_id = call.from_user.id
    
    try:
        crypto_api = crypto_pay.CryptoPay()
        balance_result = crypto_api.get_balance()
        
        if not balance_result.get("ok", False):
            raise Exception(f"–û—à–∏–±–∫–∞ API CryptoBot: {balance_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        
        crypto_balance = 0
        for currency in balance_result.get("result", []):
            if currency.get("currency_code") == "USDT":
                crypto_balance = float(currency.get("available", "0"))
                break
        
        print(f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å CryptoBot: {crypto_balance} USDT")
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–∑–Ω–µ", callback_data="treasury"))
        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        
        msg = bot.edit_message_text(
            f"üì• <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞–∑–Ω—ã</b>\n\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <code>{crypto_balance}</code> USDT\n\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:",
            call.message.chat.id,
            call.message.message_id,
            parse_mode='HTML',
            reply_markup=markup
        )
        
        bot.register_next_step_handler(msg, process_treasury_deposit)
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ CryptoBot: {e}")
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–∑–Ω–µ", callback_data="treasury"))
        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        
        bot.edit_message_text(
            f"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:</b> {str(e)}",
            call.message.chat.id,
            call.message.message_id,
            parse_mode='HTML',
            reply_markup=markup
        )

def process_treasury_deposit(message):
    if message.from_user.id not in config.ADMINS_ID:
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", parse_mode='HTML')
        return
    
    admin_id = message.from_user.id
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–∑–Ω–µ", callback_data="treasury"))
    markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    
    try:
        amount = float(message.text)
        
        if amount <= 0:
            bot.send_message(
                message.chat.id,
                "‚ùå <b>–û—à–∏–±–∫–∞!</b> –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–±–æ–ª—å—à–µ –Ω—É–ª—è).",
                parse_mode='HTML',
                reply_markup=markup
            )
            return
        
        markup_crypto = types.InlineKeyboardMarkup()
        markup_crypto.add(types.InlineKeyboardButton("üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å —á–µ—Ä–µ–∑ CryptoBot", callback_data=f"treasury_deposit_crypto_{amount}"))
        markup_crypto.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–∑–Ω–µ", callback_data="treasury"))
        markup_crypto.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        
        bot.send_message(
            message.chat.id,
            f"üí∞ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞–∑–Ω—ã –Ω–∞ {amount}$</b>\n\n"
            f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ CryptoBot:",
            parse_mode='HTML',
            reply_markup=markup_crypto
        )
    
    except ValueError:
        bot.send_message(
            message.chat.id,
            "‚ùå <b>–û—à–∏–±–∫–∞!</b> –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.",
            parse_mode='HTML',
            reply_markup=markup
        )

@bot.callback_query_handler(func=lambda call: call.data.startswith("treasury_deposit_crypto_"))
def treasury_deposit_crypto(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True)
        return
    
    admin_id = call.from_user.id
    amount = float(call.data.split("_")[-1])
    
    try:
        crypto_api = crypto_pay.CryptoPay()
        amount_with_fee = calculate_amount_to_send(amount)
        
        invoice_result = crypto_api.create_invoice(
            amount=amount_with_fee,
            asset="USDT",
            description=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞–∑–Ω—ã –æ—Ç {admin_id}",
            hidden_message="–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞–∑–Ω—ã!",
            paid_btn_name="callback",
            paid_btn_url=f"https://t.me/{bot.get_me().username}",
            expires_in=300
        )
        
        if invoice_result.get("ok", False):
            invoice = invoice_result.get("result", {})
            invoice_link = invoice.get("pay_url", "")
            invoice_id = invoice.get("invoice_id")
            
            if invoice_link and invoice_id:
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("üí∏ –û–ø–ª–∞—Ç–∏—Ç—å –∏–Ω–≤–æ–π—Å", url=invoice_link))
                markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–∑–Ω–µ", callback_data="treasury"))
                markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
                
                message = bot.edit_message_text(
                    f"üí∞ <b>–ò–Ω–≤–æ–π—Å –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞–∑–Ω—ã —Å–æ–∑–¥–∞–Ω</b>\n\n"
                    f"–°—É–º–º–∞: <code>{amount}</code> USDT\n\n"
                    f"1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–û–ø–ª–∞—Ç–∏—Ç—å –∏–Ω–≤–æ–π—Å'\n"
                    f"2. –û–ø–ª–∞—Ç–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∏–Ω–≤–æ–π—Å\n\n"
                    f"‚ö†Ô∏è <i>–ò–Ω–≤–æ–π—Å –¥–µ–π—Å—Ç–≤—É–µ—Ç 5 –º–∏–Ω—É—Ç</i>\n\n"
                    f"‚è≥ <b>–û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã...</b>",
                    call.message.chat.id,
                    call.message.message_id,
                    parse_mode='HTML',
                    reply_markup=markup
                )
                
                check_payment_thread = threading.Thread(
                    target=check_invoice_payment,
                    args=(invoice_id, amount, admin_id, call.message.chat.id, call.message.message_id)
                )
                check_payment_thread.daemon = True
                check_payment_thread.start()
                return
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–∑–Ω–µ", callback_data="treasury"))
        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        
        error_message = invoice_result.get("error", {}).get("message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
        bot.edit_message_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞</b>\n\n"
            f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω–≤–æ–π—Å —á–µ—Ä–µ–∑ CryptoBot.\n"
            f"–û—à–∏–±–∫–∞: {error_message}",
            call.message.chat.id,
            call.message.message_id,
            parse_mode='HTML',
            reply_markup=markup
        )
    
    except Exception as e:
        print(f"Error creating invoice for treasury deposit: {e}")
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–∑–Ω–µ", callback_data="treasury"))
        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        
        bot.edit_message_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å CryptoBot</b>\n\n"
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
            call.message.chat.id,
            call.message.message_id,
            parse_mode='HTML',
            reply_markup=markup
        )

def check_invoice_payment(invoice_id, amount, admin_id, chat_id, message_id):
    crypto_api = crypto_pay.CryptoPay()
    start_time = datetime.now()
    timeout = timedelta(minutes=5)
    check_interval = 5
    check_counter = 0
    
    try:
        while datetime.now() - start_time < timeout:
            print(f"Checking invoice {invoice_id} (attempt {check_counter + 1})...")
            invoices_result = crypto_api.get_invoices(invoice_ids=[invoice_id])
            print(f"Invoice API response: {invoices_result}")
            
            if invoices_result.get("ok", False):
                invoices = invoices_result.get("result", {}).get("items", [])
                
                if not invoices:
                    print(f"No invoices found for ID {invoice_id}")
                    time.sleep(check_interval)
                    check_counter += 1
                    continue
                
                status = invoices[0].get("status", "")
                print(f"Invoice {invoice_id} status: {status}")
                
                if status in ["paid", "completed"]:
                    print(f"Invoice {invoice_id} paid successfully!")
                    try:
                        with treasury_lock:
                            new_balance = db_module.update_treasury_balance(amount)
                            print(f"Updated treasury balance: {new_balance}")
                            db_module.log_treasury_operation("–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Crypto Pay", amount, new_balance)
                            print(f"Logged treasury operation: amount={amount}, new_balance={new_balance}")
                        
                        balance_result = crypto_api.get_balance()
                        crypto_balance = 0
                        if balance_result.get("ok", False):
                            for currency in balance_result.get("result", []):
                                if currency.get("currency_code") == "USDT":
                                    crypto_balance = float(currency.get("available", "0"))
                                    break
                        print(f"–ë–∞–ª–∞–Ω—Å CryptoBot –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã: {crypto_balance} USDT")
                        
                        markup = types.InlineKeyboardMarkup()
                        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–∑–Ω–µ", callback_data="treasury"))
                        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
                        
                        bot.edit_message_text(
                            f"‚úÖ <b>–ö–∞–∑–Ω–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∞!</b>\n\n"
                            f"–°—É–º–º–∞: <code>{amount}</code> USDT\n"
                            f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –∫–∞–∑–Ω—ã: <code>{new_balance}</code> USDT\n"
                            f"–ë–∞–ª–∞–Ω—Å CryptoBot: <code>{crypto_balance}</code> USDT",
                            chat_id,
                            message_id,
                            parse_mode='HTML',
                            reply_markup=markup
                        )
                        print(f"Payment confirmation message updated for invoice {invoice_id}")
                        return
                    
                    except Exception as db_error:
                        print(f"Error updating treasury balance or logging operation: {db_error}")
                        markup = types.InlineKeyboardMarkup()
                        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–∑–Ω–µ", callback_data="treasury"))
                        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
                        
                        bot.edit_message_text(
                            f"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞–∑–Ω—ã:</b> {str(db_error)}\n"
                            f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ —Å—É–º–º—É <code>{amount}</code> USDT –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, –Ω–æ –∫–∞–∑–Ω–∞ –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.",
                            chat_id,
                            message_id,
                            parse_mode='HTML',
                            reply_markup=markup
                        )
                        return
                
                elif status == "expired":
                    print(f"Invoice {invoice_id} expired.")
                    markup = types.InlineKeyboardMarkup()
                    markup.add(types.InlineKeyboardButton("üîÑ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∏–Ω–≤–æ–π—Å", callback_data=f"treasury_deposit_crypto_{amount}"))
                    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–∑–Ω–µ", callback_data="treasury"))
                    markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
                    
                    bot.edit_message_text(
                        f"‚è± <b>–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∏—Å—Ç–µ–∫–ª–æ</b>\n\n"
                        f"–ò–Ω–≤–æ–π—Å –Ω–∞ —Å—É–º–º—É {amount} USDT –Ω–µ –±—ã–ª –æ–ø–ª–∞—á–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç.\n"
                        f"–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∏–Ω–≤–æ–π—Å.",
                        chat_id,
                        message_id,
                        parse_mode='HTML',
                        reply_markup=markup
                    )
                    return
                
                check_counter += 1
                if check_counter % 5 == 0:
                    elapsed = datetime.now() - start_time
                    remaining_seconds = int(timeout.total_seconds() - elapsed.total_seconds())
                    minutes = remaining_seconds // 60
                    seconds = remaining_seconds % 60
                    
                    markup = types.InlineKeyboardMarkup()
                    markup.add(types.InlineKeyboardButton("üí∏ –û–ø–ª–∞—Ç–∏—Ç—å –∏–Ω–≤–æ–π—Å", url=invoices[0].get("pay_url", "")))
                    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–∑–Ω–µ", callback_data="treasury"))
                    markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
                    
                    bot.edit_message_text(
                        f"üí∞ <b>–ò–Ω–≤–æ–π—Å –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞–∑–Ω—ã —Å–æ–∑–¥–∞–Ω</b>\n\n"
                        f"–°—É–º–º–∞: <code>{amount}</code> USDT\n\n"
                        f"1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–û–ø–ª–∞—Ç–∏—Ç—å –∏–Ω–≤–æ–π—Å'\n"
                        f"2. –û–ø–ª–∞—Ç–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∏–Ω–≤–æ–π—Å\n\n"
                        f"‚è± <b>–û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è:</b> {minutes}:{seconds:02d}\n"
                        f"‚è≥ <b>–û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã...</b>",
                        chat_id,
                        message_id,
                        parse_mode='HTML',
                        reply_markup=markup
                    )
                    print(f"Waiting message updated: {minutes}:{seconds:02d} remaining")
            
            else:
                print(f"API request failed: {invoices_result}")
            
            time.sleep(check_interval)
        
        print(f"Invoice {invoice_id} not paid after timeout.")
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîÑ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∏–Ω–≤–æ–π—Å", callback_data=f"treasury_deposit_crypto_{amount}"))
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–∑–Ω–µ", callback_data="treasury"))
        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        
        bot.edit_message_text(
            f"‚è± <b>–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∏—Å—Ç–µ–∫–ª–æ</b>\n\n"
            f"–ò–Ω–≤–æ–π—Å –Ω–∞ —Å—É–º–º—É {amount} USDT –Ω–µ –±—ã–ª –æ–ø–ª–∞—á–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç.\n"
            f"–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∏–Ω–≤–æ–π—Å.",
            chat_id,
            message_id,
            parse_mode='HTML',
            reply_markup=markup
        )
    
    except Exception as e:
        print(f"Error in check_invoice_payment thread: {e}")
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–∑–Ω–µ", callback_data="treasury"))
        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        
        bot.edit_message_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–ª–∞—Ç—ã</b>\n\n"
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            chat_id,
            message_id,
            parse_mode='HTML',
            reply_markup=markup
        )

@bot.callback_query_handler(func=lambda call: call.data == "treasury_toggle_auto")
def treasury_toggle_auto_input(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True)
        return
    
    admin_id = call.from_user.id
    
    new_status = db_module.toggle_auto_input()
    
    try:
        crypto_api = crypto_pay.CryptoPay()
        balance_result = crypto_api.get_balance()
        
        if not balance_result.get("ok", False):
            raise Exception(f"–û—à–∏–±–∫–∞ API CryptoBot: {balance_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        
        crypto_balance = 0
        for currency in balance_result.get("result", []):
            if currency.get("currency_code") == "USDT":
                crypto_balance = float(currency.get("available", "0"))
                break
        
        print(f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å CryptoBot: {crypto_balance} USDT")
        
        status_text = "–≤–∫–ª—é—á–µ–Ω" if new_status else "–≤—ã–∫–ª—é—á–µ–Ω"
        operation = f"–ê–≤—Ç–æ-–≤–≤–æ–¥ {status_text}"
        db_module.log_treasury_operation(operation, 0, crypto_balance)
        
        status_emoji = "üü¢" if new_status else "üî¥"
        auto_message = f"{status_emoji} <b>–ê–≤—Ç–æ-–≤–≤–æ–¥ {status_text}!</b>\n"
        if new_status:
            auto_message += "–°—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å—Ç—É–ø–∞—Ç—å –≤ –∫–∞–∑–Ω—É."
        else:
            auto_message += "–°—Ä–µ–¥—Å—Ç–≤–∞ –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å—Ç—É–ø–∞—Ç—å –≤ –∫–∞–∑–Ω—É."
        
        treasury_text = f"üí∞ <b>–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –∫–∞–∑–Ω–∞!</b>\n\n–í –Ω–µ–π –ª–µ–∂–∏—Ç: <code>{crypto_balance}</code> USDT\n\n{auto_message}"
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üì§ –í—ã–≤–µ—Å—Ç–∏", callback_data="treasury_withdraw"))
        markup.add(types.InlineKeyboardButton("üì• –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="treasury_deposit"))
        
        auto_input_text = "üî¥ –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ-–≤–≤–æ–¥" if not new_status else "üü¢ –í—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ-–≤–≤–æ–¥"
        markup.add(types.InlineKeyboardButton(auto_input_text, callback_data="treasury_toggle_auto"))
        
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        
        bot.edit_message_text(
            treasury_text,
            call.message.chat.id,
            call.message.message_id,
            parse_mode='HTML',
            reply_markup=markup
        )
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ CryptoBot: {e}")
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–∑–Ω–µ", callback_data="treasury"))
        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        
        bot.edit_message_text(
            f"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:</b> {str(e)}",
            call.message.chat.id,
            call.message.message_id,
            parse_mode='HTML',
            reply_markup=markup
        )

@bot.callback_query_handler(func=lambda call: call.data.startswith("treasury_withdraw_all_"))
def treasury_withdraw_all(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True)
        return
    
    admin_id = call.from_user.id
    amount = float(call.data.split("_")[-1])
    
    if amount <= 0:
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –ë–∞–ª–∞–Ω—Å –∫–∞–∑–Ω—ã –ø—É—Å—Ç. –ù–µ—á–µ–≥–æ –≤—ã–≤–æ–¥–∏—Ç—å.", show_alert=True)
        return
    
    with treasury_lock:
        operation_success = False
        
        try:
            crypto_api = crypto_pay.CryptoPay()
            balance_result = crypto_api.get_balance()
            
            if not balance_result.get("ok", False):
                raise Exception(f"–û—à–∏–±–∫–∞ API CryptoBot: {balance_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            
            crypto_balance = 0
            for currency in balance_result.get("result", []):
                if currency.get("currency_code") == "USDT":
                    crypto_balance = float(currency.get("available", "0"))
                    break
            
            print(f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å CryptoBot: {crypto_balance} USDT")
            
            if crypto_balance < amount:
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–∑–Ω–µ", callback_data="treasury"))
                markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
                
                bot.edit_message_text(
                    f"‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ CryptoBot!</b>\n"
                    f"–ë–∞–ª–∞–Ω—Å: <code>{crypto_balance}</code> USDT, —Ç—Ä–µ–±—É–µ—Ç—Å—è: <code>{amount}</code> USDT.",
                    call.message.chat.id,
                    call.message.message_id,
                    parse_mode='HTML',
                    reply_markup=markup
                )
                return
            
            amount_to_send = calculate_amount_to_send(amount)
            
            check_result = crypto_api.create_check(
                amount=amount_to_send,
                asset="USDT",
                description=f"–í—ã–≤–æ–¥ –≤—Å–µ–π –∫–∞–∑–Ω—ã –æ—Ç {admin_id}"
            )
            
            if check_result.get("ok", False):
                check = check_result.get("result", {})
                check_link = check.get("bot_check_url", "")
                
                if check_link:
                    new_balance = db_module.update_treasury_balance(-amount)
                    db_module.log_treasury_operation("–í—ã–≤–æ–¥ –≤—Å–µ–π –∫–∞–∑–Ω—ã —á–µ—Ä–µ–∑ —á–µ–∫", amount, new_balance)
                    
                    markup = types.InlineKeyboardMarkup()
                    markup.add(types.InlineKeyboardButton("üí∏ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —á–µ–∫", url=check_link))
                    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–∑–Ω–µ", callback_data="treasury"))
                    markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
                    
                    bot.edit_message_text(
                        f"‚úÖ <b>–í—Å–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–≤–µ–¥–µ–Ω—ã —Å –ø–æ–º–æ—â—å—é —á–µ–∫–∞!</b>\n\n"
                        f"–°—É–º–º–∞: <code>{amount}</code> USDT\n"
                        f"–û—Å—Ç–∞—Ç–æ–∫ –≤ –∫–∞–∑–Ω–µ: <code>{new_balance}</code> USDT\n\n"
                        f"–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ —á–µ–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ:",
                        call.message.chat.id,
                        call.message.message_id,
                        parse_mode='HTML',
                        reply_markup=markup
                    )
                    operation_success = True
                    return
                else:
                    error_details = check_result.get("error_details", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                    raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–µ–∫–∞: {error_details}")
        
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —á–µ—Ä–µ–∑ CryptoBot: {e}")
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–∑–Ω–µ", callback_data="treasury"))
            markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
            
            bot.edit_message_text(
                f"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å CryptoBot:</b> {str(e)}",
                call.message.chat.id,
                call.message.message_id,
                parse_mode='HTML',
                reply_markup=markup
            )
        
        if not operation_success:
            new_balance = db_module.update_treasury_balance(-amount)
            db_module.log_treasury_operation("–í—ã–≤–æ–¥ –≤—Å–µ–π –∫–∞–∑–Ω—ã", amount, new_balance)
            
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–∑–Ω–µ", callback_data="treasury"))
            markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
            
            bot.edit_message_text(
                f"‚úÖ <b>–í—Å–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–≤–µ–¥–µ–Ω—ã!</b>\n\n"
                f"–°—É–º–º–∞: <code>{amount}</code> USDT\n"
                f"–û—Å—Ç–∞—Ç–æ–∫ –≤ –∫–∞–∑–Ω–µ: <code>{new_balance}</code> USDT",
                call.message.chat.id,
                call.message.message_id,
                parse_mode='HTML',
                reply_markup=markup
            )

def calculate_amount_to_send(target_amount):
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—É–º–º—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å —É—á—ë—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏ CryptoBot (3%).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, —á—Ç–æ–±—ã –ø–æ—Å–ª–µ –∫–æ–º–∏—Å—Å–∏–∏ –ø–æ–ª—É—á–∏—Ç—å target_amount.
    """
    commission_rate = 0.03  # –ö–æ–º–∏—Å—Å–∏—è 3%
    amount_with_fee = target_amount / (1 - commission_rate) 
    rounded_amount = round(amount_with_fee, 2)  
    
    received_amount = rounded_amount * (1 - commission_rate)
    if received_amount < target_amount:
        rounded_amount += 0.01  
    
    return round(rounded_amount, 2)


#=================================================================================
#===============================–ù–ê–°–¢–†–û–ô–ö–ò=========================================
#=================================================================================



@bot.callback_query_handler(func=lambda call: call.data == "settings")
def show_settings(call):
    if call.from_user.id in config.ADMINS_ID:
        with db.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT PRICE, HOLD_TIME, PRICE_ADM FROM settings')
            result = cursor.fetchone()
            price, hold_time, price_adm = result if result else (2.0, 30, 4.5)
        
        settings_text = (
            "<b>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø–ª–∞—Ç—ã</b>\n\n"
            f"–¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: <code>{price}$</code> –∑–∞ –Ω–æ–º–µ—Ä\n"
            f"–í—Ä–µ–º—è —Ö–æ–ª–¥–∞: <code>{hold_time}</code> –º–∏–Ω—É—Ç\n\n"
            f"–¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞: <code>{price_adm}$</code>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"
        )
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É", callback_data="change_amount"))
        markup.add(types.InlineKeyboardButton("üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É –¥–ª—è –∞–¥–º–∏–Ω–æ–≤", callback_data="change_amount_adm"))
        markup.add(types.InlineKeyboardButton("‚è± –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è —Ö–æ–ª–¥–∞", callback_data="change_hold_time"))
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        
        bot.edit_message_text(settings_text,
                            call.message.chat.id,
                            call.message.message_id,
                            parse_mode='HTML',
                            reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "change_amount_adm")
def change_amount_adm_request(call):
    if call.from_user.id in config.ADMINS_ID:
        msg = bot.edit_message_text("üí∞ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ (–≤ –¥–æ–ª–ª–∞—Ä–∞—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä: 5):",
                                  call.message.chat.id,
                                  call.message.message_id)
        bot.register_next_step_handler(msg, process_change_amount_adm)

def process_change_amount_adm(message):
    if message.from_user.id in config.ADMINS_ID:
        try:
            new_amount = float(message.text)
            if new_amount <= 0:
                raise ValueError
            with db.get_db() as conn:
                cursor = conn.cursor()
                cursor.execute('UPDATE settings SET PRICE_ADM = ?', (new_amount,))
                conn.commit()
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings"))
            markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
            bot.send_message(message.chat.id, f"‚úÖ –°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_amount}$", reply_markup=markup)
        except ValueError:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings"))
            markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
            bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ!", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "change_amount")
def change_amount_request(call):
    if call.from_user.id in config.ADMINS_ID:
        msg = bot.edit_message_text("üí∞ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã (–≤ –¥–æ–ª–ª–∞—Ä–∞—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä: 2):",
                                  call.message.chat.id,
                                  call.message.message_id)
        bot.register_next_step_handler(msg, process_change_amount)


def process_change_amount(message):
    if message.from_user.id in config.ADMINS_ID:
        try:
            new_amount = float(message.text)
            if new_amount <= 0:
                raise ValueError
            with db.get_db() as conn:
                cursor = conn.cursor()
                cursor.execute('UPDATE settings SET PRICE = ?', (new_amount,))
                conn.commit()
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings"))
            markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
            bot.send_message(message.chat.id, f"‚úÖ –°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_amount}$", reply_markup=markup)
        except ValueError:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings"))
            markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
            bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ!", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "change_hold_time")
def change_hold_time_request(call):
    if call.from_user.id in config.ADMINS_ID:
        msg = bot.edit_message_text("‚è± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è —Ö–æ–ª–¥–∞ (–≤ –º–∏–Ω—É—Ç–∞—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä: 5):",
                                  call.message.chat.id,
                                  call.message.message_id)
        bot.register_next_step_handler(msg, process_change_hold_time)

def process_change_hold_time(message):
    if message.from_user.id in config.ADMINS_ID:
        try:
            new_time = int(message.text)
            if new_time <= 0:
                raise ValueError
            with db.get_db() as conn:
                cursor = conn.cursor()
                cursor.execute('UPDATE settings SET HOLD_TIME = ?', (new_time,))
                conn.commit()
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings"))
            markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
            bot.send_message(message.chat.id, f"‚úÖ –í—Ä–µ–º—è —Ö–æ–ª–¥–∞ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {new_time} –º–∏–Ω—É—Ç", reply_markup=markup)
        except ValueError:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings"))
            markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
            bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith("view_group_stats_"))
def view_group_stats(call):
    user_id = call.from_user.id
    if user_id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!")
        return

    try:
        _, _, group_id, page = call.data.split("_")
        group_id = int(group_id)
        page = int(page)
        if page < 1:
            page = 1
    except (IndexError, ValueError):
        bot.answer_callback_query(call.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö!")
        return

    with db.get_db() as conn:
        cursor = conn.cursor()
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤) –≥—Ä—É–ø–ø—ã
        cursor.execute('SELECT COUNT(*) FROM personal WHERE GROUP_ID = ? AND TYPE = "moder"', (group_id,))
        member_count = cursor.fetchone()[0]

        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä–∞ —Å —Å—Ç–∞—Ç—É—Å–æ–º "–æ—Ç—Å—Ç–æ—è–ª" –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã
        cursor.execute('''
            SELECT n.NUMBER, n.TAKE_DATE, n.SHUTDOWN_DATE
            FROM numbers n
            LEFT JOIN personal p ON p.ID = n.ID_OWNER
            WHERE n.STATUS = '–æ—Ç—Å—Ç–æ—è–ª'
            AND (p.GROUP_ID = ? OR p.GROUP_ID IS NULL)
            ORDER BY n.SHUTDOWN_DATE DESC
        ''', (group_id,))
        numbers = cursor.fetchall()

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    items_per_page = 20
    total_pages = max(1, (len(numbers) + items_per_page - 1) // items_per_page)
    page = max(1, min(page, total_pages))
    start_idx = (page - 1) * items_per_page
    end_idx = start_idx + items_per_page
    page_numbers = numbers[start_idx:end_idx]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    text = (
        f"<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä—É–ø–ø—ã {group_id}:</b>\n\n"
        f"üì± –£—Å–ø–µ—à–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤: {len(numbers)}\n"
        f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        f"<b>üì± –°–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}):</b>\n\n"
    )

    if not page_numbers:
        text += "üì≠ –ù–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ."
    else:
        for number, take_date, shutdown_date in page_numbers:
            text += f"–ù–æ–º–µ—Ä: {number}\n"
            text += f"üü¢ –í—Å—Ç–∞–ª: {take_date}\n"
            text += f"üü¢ –û—Ç—Å—Ç–æ—è–ª: {shutdown_date}\n"
            text += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤
    TELEGRAM_MESSAGE_LIMIT = 4096
    if len(text) > TELEGRAM_MESSAGE_LIMIT:
        text = text[:TELEGRAM_MESSAGE_LIMIT - 100] + "\n... (–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞–≥–∏–Ω–∞—Ü–∏—é)"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ç–∫—É
    markup = types.InlineKeyboardMarkup()

    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    if total_pages > 1:
        row = []
        if page > 1:
            row.append(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"view_group_stats_{group_id}_{page-1}"))
        row.append(types.InlineKeyboardButton(f"{page}/{total_pages}", callback_data="noop"))
        if page < total_pages:
            row.append(types.InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"view_group_stats_{group_id}_{page+1}"))
        if row:
            markup.row(*row)

    markup.add(types.InlineKeyboardButton("üë• –í—Å–µ –≥—Ä—É–ø–ø—ã", callback_data="admin_view_groups"))
    markup.add(types.InlineKeyboardButton("üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
    markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))

    bot.edit_message_text(
        text,
        call.message.chat.id,
        call.message.message_id,
        parse_mode='HTML',
        reply_markup=markup
    )









#=======================================================================================
#=======================================================================================
#===================================–ê–î–ú–ò–ù–ö–ê=====================================
#=======================================================================================
#=======================================================================================
#=======================================================================================


@bot.callback_query_handler(func=lambda call: call.data == "admin_panel")
def admin_panel(call):
    user_id = call.from_user.id
    broadcast_state.pop(user_id, None)
    with treasury_lock:
        if call.from_user.id in active_treasury_admins:
            del active_treasury_admins[call.from_user.id]
            
    
    if call.from_user.id in config.ADMINS_ID:           
        with db.get_db() as conn:
                cursor = conn.cursor()
                # –ü–æ–¥—Å—á—ë—Ç —Å–ª–µ—Ç–µ–≤—à–∏—Ö –Ω–æ–º–µ—Ä–æ–≤
                cursor.execute('SELECT COUNT(*) FROM numbers WHERE STATUS = "—Å–ª–µ—Ç–µ–ª"')
                numbers_count = cursor.fetchone()[0]
                
                # –ü–æ–¥—Å—á—ë—Ç –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤
                cursor.execute('SELECT COUNT(*) FROM numbers WHERE STATUS IN ("–∞–∫—Ç–∏–≤–µ–Ω", "—Å–ª–µ—Ç–µ–ª", "–æ—Ç—Å—Ç–æ—è–ª")')
                total_numbers = cursor.fetchone()[0]

                admin_text = (
                    "<b>‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
                    f"üì± –°–ª–µ—Ç–µ–≤—à–∏—Ö –Ω–æ–º–µ—Ä–æ–≤: <code>{numbers_count}</code>\n"
                    f"üìä –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤: <code>{total_numbers}</code>"
                )

        markup = types.InlineKeyboardMarkup()

        markup.add(types.InlineKeyboardButton("üë• –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã", callback_data="moderators"))
        markup.add(types.InlineKeyboardButton("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="all_users_1"))

        markup.add(types.InlineKeyboardButton("üìù –ó–∞—è–≤–∫–∏", callback_data="pending_requests"))
        markup.add(types.InlineKeyboardButton("üë• –ì—Ä—É–ø–ø—ã", callback_data="groups"))
        markup.add(types.InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="broadcast"))

        markup.add(types.InlineKeyboardButton("üì± –í—Å–µ –Ω–æ–º–µ—Ä–∞", callback_data="all_numbers"))
        markup.add(types.InlineKeyboardButton("üì± –ù–æ–º–µ—Ä–∞", callback_data="user_numbers_all"))
        markup.add(types.InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ –Ω–æ–º–µ—Ä", callback_data="search_number"))

        markup.add(types.InlineKeyboardButton("üí∞ –ö–∞–∑–Ω–∞", callback_data="treasury"))
        markup.add(types.InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings"))
        markup.add(types.InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é)", callback_data="Gv"))

        markup.add(types.InlineKeyboardButton("üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", callback_data="db_menu"))

        markup.add(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="Gv"))
        markup.add(types.InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_main"))
        try:
            bot.delete_message(call.message.chat.id, call.message.message_id)
        except:
            pass
        bot.send_message(call.message.chat.id, admin_text, parse_mode='HTML', reply_markup=markup)



#===============================================================
#==========================–ú–û–î–ï–†–ê–¢–û–†–´===========================
#===============================================================

@bot.callback_query_handler(func=lambda call: call.data == "moderators")
def moderators(call):
    bot.clear_step_handler_by_chat_id(call.message.chat.id)
    if call.from_user.id in config.ADMINS_ID:
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="add_moder"),
            types.InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å", callback_data="remove_moder"))
        markup.add(
        types.InlineKeyboardButton("‚ûñ–£–¥–∞–ª–∏—Ç—å –ø–æ –∫–Ω–æ–ø–∫–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞", callback_data="delete_moderator"),
        types.InlineKeyboardButton("üë• –í—Å–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã", callback_data="all_moderators_1"))
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        try:
            bot.delete_message(call.message.chat.id, call.message.message_id)
        except:
            pass
        bot.send_message(call.message.chat.id, "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "delete_moderator")
def delete_moderator_request(call):
    if call.from_user.id in config.ADMINS_ID:
        with db.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT ID FROM personal WHERE TYPE = 'moder'")
            moderators = cursor.fetchall()
        
        if not moderators:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="moderators"))
            markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
            try:
                bot.delete_message(call.message.chat.id, call.message.message_id)
            except:
                pass
            bot.send_message(call.message.chat.id, "‚ùå –ù–µ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", reply_markup=markup)
            return

        text = "üë• –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
        markup = types.InlineKeyboardMarkup()
        for moder in moderators:
            text += f"ID: {moder[0]}\n"
            markup.add(types.InlineKeyboardButton(f"–£–¥–∞–ª–∏—Ç—å {moder[0]}", callback_data=f"confirm_delete_moder_{moder[0]}"))
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        try:
            bot.delete_message(call.message.chat.id, call.message.message_id)
        except:
            pass
        bot.send_message(call.message.chat.id, text, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("confirm_delete_moder_"))
def confirm_delete_moderator(call):
    if call.from_user.id in config.ADMINS_ID:
        moder_id = int(call.data.split("_")[3])
        with db.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute("DELETE FROM personal WHERE ID = ? AND TYPE = 'moder'", (moder_id,))
            affected_rows = cursor.rowcount
            conn.commit()
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="moderators"))
        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        try:
            bot.delete_message(call.message.chat.id, call.message.message_id)
        except:
            pass
        if affected_rows > 0:
            try:
                msg = bot.send_message(moder_id, "‚ö†Ô∏è –í–∞—à–∏ –ø—Ä–∞–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –±—ã–ª–∏ –æ—Ç–æ–∑–≤–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
                # –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
                threading.Timer(30.0, lambda: bot.delete_message(moder_id, msg.message_id)).start()
            except:
                pass
            bot.send_message(call.message.chat.id, f"‚úÖ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä —Å ID {moder_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω", reply_markup=markup)
        else:
            bot.send_message(call.message.chat.id, f"‚ùå –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä —Å ID {moder_id} –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "add_moder")
def add_moder_request(call):
    if call.from_user.id in config.ADMINS_ID:
        try:
            bot.delete_message(call.message.chat.id, call.message.message_id)
        except Exception as e:
            print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="moderators"))    
        msg = bot.send_message(
            call.message.chat.id, 
            "üë§ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º:", 
            reply_markup=markup
        )
        # –ü–µ—Ä–µ–¥–∞—ë–º initial_message_id (msg.message_id) –≤ process_add_moder
        bot.register_next_step_handler(msg, process_add_moder, msg.message_id)

@bot.callback_query_handler(func=lambda call: call.data == "remove_moder")
def remove_moder_request(call):
    if call.from_user.id in config.ADMINS_ID:
        try:
            bot.delete_message(call.message.chat.id, call.message.message_id)
        except:
            pass
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="moderators"))   
        msg = bot.send_message(call.message.chat.id, "üë§ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤:", reply_markup = markup)
        bot.register_next_step_handler(msg, process_remove_moder)

def process_remove_moder(message):
    try:
        moder_id = int(message.text)
        with db.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('DELETE FROM personal WHERE ID = ? AND TYPE = ?', (moder_id, 'moder'))
            conn.commit()
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
            markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
            try:
                bot.delete_message(message.chat.id, message.message_id)
            except:
                pass
            if cursor.rowcount > 0:
                try:
                    msg = bot.send_message(moder_id, "‚ö†Ô∏è –£ –≤–∞—Å –±—ã–ª–∏ –æ—Ç–æ–∑–≤–∞–Ω—ã –ø—Ä–∞–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.")
                    threading.Timer(30.0, lambda: bot.delete_message(moder_id, msg.message_id)).start()
                except:
                    pass
                bot.send_message(message.chat.id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {moder_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤!", reply_markup=markup)
            else:
                bot.send_message(message.chat.id, "‚ö†Ô∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º!", reply_markup=markup)
    except ValueError:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        try:
            bot.delete_message(message.chat.id, message.message_id)
        except:
            pass
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith("all_moderators_"))
def all_moderators_callback(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤!")
        return
    try:
        page = int(call.data.split("_")[2])
        if page < 1:
            page = 1
    except (IndexError, ValueError):
        page = 1
    
    with get_db() as conn:
        cursor = conn.cursor()
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –∏—Ö –≥—Ä—É–ø–ø—ã (–±–µ–∑ USERNAME)
        cursor.execute('''
            SELECT p.ID, g.NAME
            FROM personal p
            LEFT JOIN groups g ON p.GROUP_ID = g.ID
            WHERE p.TYPE = 'moder'
            ORDER BY p.ID
        ''')
        moderators = cursor.fetchall()
    
    if not moderators:
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="moderators"))
        bot.edit_message_text(
            "üì≠ –ù–µ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤.",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup
        )
        bot.answer_callback_query(call.id)
        return
    
    items_per_page = 10
    total_pages = (len(moderators) + items_per_page - 1) // items_per_page
    page = max(1, min(page, total_pages))
    start_idx = (page - 1) * items_per_page
    end_idx = start_idx + items_per_page
    page_moderators = moderators[start_idx:end_idx]
    
    text = f"<b>üë• –°–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}):</b>\n\n"
    with get_db() as conn:
        cursor = conn.cursor()
        for idx, (moder_id, group_name) in enumerate(page_moderators, start=start_idx + 1):
            cursor.execute('''
                SELECT COUNT(*) 
                FROM numbers 
                WHERE CONFIRMED_BY_MODERATOR_ID = ? AND STATUS = '–æ—Ç—Å—Ç–æ—è–ª'
            ''', (moder_id,))
            accepted_numbers = cursor.fetchone()[0]
            try:
                user = bot.get_chat(moder_id)
                username = user.username if user.username else "–ù–µ—Ç username"
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ username –¥–ª—è user_id {moder_id}: {e}")
                username = "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è"
            
            group_display = group_name if group_name else "–ë–µ–∑ –≥—Ä—É–ø–ø—ã"
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º UserID –∫–∞–∫ —Å—Å—ã–ª–∫—É
            text += f"{idx}. üÜîUserID: <a href=\"tg://user?id={moder_id}\">{moder_id}</a>\n"
            text += f"Username: @{username}\n"
            text += f"üè† –ì—Ä—É–ø–ø–∞: {group_display}\n"
            text += f"üì± –ü—Ä–∏–Ω—è—Ç–æ –Ω–æ–º–µ—Ä–æ–≤: {accepted_numbers}\n"
            text += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
    
    TELEGRAM_MESSAGE_LIMIT = 4096
    if len(text) > TELEGRAM_MESSAGE_LIMIT:
        text = text[:TELEGRAM_MESSAGE_LIMIT - 100] + "\n... (–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞–≥–∏–Ω–∞—Ü–∏—é)"
    
    markup = InlineKeyboardMarkup()
    if total_pages > 1:
        row = []
        if page > 1:
            row.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"all_moderators_{page-1}"))
        row.append(InlineKeyboardButton(f"{page}/{total_pages}", callback_data="noop"))
        if page < total_pages:
            row.append(InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"all_moderators_{page+1}"))
        markup.row(*row)
    
    markup.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
    
    try:
        bot.edit_message_text(
            text,
            call.message.chat.id,
            call.message.message_id,
            parse_mode='HTML',
            reply_markup=markup
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è all_moderators: {e}")
        bot.send_message(call.message.chat.id, text, parse_mode='HTML', reply_markup=markup)
    
    bot.answer_callback_query(call.id)

def process_add_moder(message, initial_message_id):
    try:
        new_moder_id = int(message.text)
        with db.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT * FROM personal WHERE ID = ? AND TYPE = ?', (new_moder_id, 'moder'))
            if cursor.fetchone() is not None:
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
                try:
                    bot.delete_message(message.chat.id, message.message_id)
                    bot.delete_message(message.chat.id, initial_message_id)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                bot.send_message(message.chat.id, "‚ö†Ô∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º!", reply_markup=markup)
                return

            cursor.execute('SELECT COUNT(*) FROM groups')
            if cursor.fetchone()[0] == 0:
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É", callback_data="add_group"))
                markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
                try:
                    bot.delete_message(message.chat.id, message.message_id)
                    bot.delete_message(message.chat.id, initial_message_id)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                bot.send_message(message.chat.id, "‚ùå –ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø! –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –≥—Ä—É–ø–ø—É.", reply_markup=markup)
                return

        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
        try:
            bot.delete_message(message.chat.id, message.message_id)
            bot.delete_message(message.chat.id, initial_message_id)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        msg = bot.send_message(
            message.chat.id,
            f"üë§ ID –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞: {new_moder_id}\nüìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:",
            reply_markup=markup
        )
        bot.register_next_step_handler(msg, process_assign_group, new_moder_id, msg.message_id)  # –ü–µ—Ä–µ–¥–∞—ë–º message_id

    except ValueError:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
        try:
            bot.delete_message(message.chat.id, message.message_id)
            bot.delete_message(message.chat.id, initial_message_id)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)", reply_markup=markup)

def process_assign_group(message, new_moder_id, group_message_id):
    group_name = message.text.strip()
    
    if not group_name:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
        try:
            bot.delete_message(message.chat.id, message.message_id)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è (–≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã): {e}")
        bot.send_message(message.chat.id, "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!", reply_markup=markup)
        return

    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT ID FROM groups WHERE NAME = ?', (group_name,))
        group = cursor.fetchone()

        if not group:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üë• –ì—Ä—É–ø–ø—ã", callback_data="groups"))
            markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
            try:
                bot.delete_message(message.chat.id, message.message_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è (–≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã): {e}")
            bot.send_message(message.chat.id, f"‚ùå –ì—Ä—É–ø–ø–∞ '{group_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –°–æ–∑–¥–∞–π—Ç–µ –µ—ë –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é.", 
                            reply_markup=markup)
            return

        group_id = group[0]

        try:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≥—Ä—É–ø–ø—ã –∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º
            try:
                bot.delete_message(message.chat.id, message.message_id)
                bot.delete_message(message.chat.id, group_message_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è (–∑–∞–ø—Ä–æ—Å –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã): {e}")
                # –ï—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                bot.edit_message_text(
                    f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_moder_id} —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º –≤ –≥—Ä—É–ø–ø—É '{group_name}'!",
                    message.chat.id,
                    group_message_id,
                    reply_markup=None
                )
            
            # –ù–∞–∑–Ω–∞—á–∞–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
            cursor.execute('INSERT INTO personal (ID, TYPE, GROUP_ID) VALUES (?, ?, ?)', 
                          (new_moder_id, 'moder', group_id))
            conn.commit()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É –∏ –ø–ª–∞–Ω–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
            moder_msg = bot.send_message(new_moder_id, f"üéâ –í–∞–º –≤—ã–¥–∞–Ω—ã –ø—Ä–∞–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –≤ –≥—Ä—É–ø–ø–µ '{group_name}'! –ù–∞–ø–∏—à–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É.")
            threading.Timer(30.0, lambda: bot.delete_message(new_moder_id, moder_msg.message_id)).start()

            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
            bot.send_message(message.chat.id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_moder_id} —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º –≤ –≥—Ä—É–ø–ø—É '{group_name}'!", 
                            reply_markup=markup)

        except telebot.apihelper.ApiTelegramException:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
            bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_moder_id} –Ω–µ –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º!", 
                            reply_markup=markup)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ process_assign_group: {e}")
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
            bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞!", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "delete_moderator")
def delete_moderator_request(call):
    if call.from_user.id in config.ADMINS_ID:
        with db.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT ID FROM personal WHERE TYPE = 'moder'")
            moderators = cursor.fetchall()
        
        if not moderators:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="moderators"))
            markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
            try:
                bot.delete_message(call.message.chat.id, call.message.message_id)
            except:
                pass
            bot.send_message(call.message.chat.id, "‚ùå –ù–µ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", reply_markup=markup)
            return

        text = "üë• –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
        markup = types.InlineKeyboardMarkup()
        for moder in moderators:
            text += f"ID: {moder[0]}\n"
            markup.add(types.InlineKeyboardButton(f"–£–¥–∞–ª–∏—Ç—å {moder[0]}", callback_data=f"confirm_delete_moder_{moder[0]}"))
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        try:
            bot.delete_message(call.message.chat.id, call.message.message_id)
        except:
            pass
        bot.send_message(call.message.chat.id, text, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("confirm_delete_moder_"))
def confirm_delete_moderator(call):
    if call.from_user.id in config.ADMINS_ID:
        moder_id = int(call.data.split("_")[3])
        with db.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute("DELETE FROM personal WHERE ID = ? AND TYPE = 'moder'", (moder_id,))
            affected_rows = cursor.rowcount
            conn.commit()
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="moderators"))
        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        try:
            bot.delete_message(call.message.chat.id, call.message.message_id)
        except:
            pass
        if affected_rows > 0:
            try:
                msg = bot.send_message(moder_id, "‚ö†Ô∏è –í–∞—à–∏ –ø—Ä–∞–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –±—ã–ª–∏ –æ—Ç–æ–∑–≤–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
                # –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
                threading.Timer(30.0, lambda: bot.delete_message(moder_id, msg.message_id)).start()
            except:
                pass
            bot.send_message(call.message.chat.id, f"‚úÖ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä —Å ID {moder_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω", reply_markup=markup)
        else:
            bot.send_message(call.message.chat.id, f"‚ùå –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä —Å ID {moder_id} –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=markup)

#=======================================================================#=======================================================================
#===============================================–í–°–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò ======================================================
#=======================================================================#=======================================================================

@bot.callback_query_handler(func=lambda call: call.data.startswith("all_users_"))
def show_all_users(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!")
        return
    
    try:
        page = int(call.data.split("_")[2])
    except (IndexError, ValueError):
        page = 1  # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã requests
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT ID FROM requests')
        all_users = cursor.fetchall()
    
    if not all_users:
        text = "üì≠ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ."
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
    else:
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        users_per_page = 8
        total_pages = (len(all_users) + users_per_page - 1) // users_per_page
        page = max(1, min(page, total_pages))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–æ–ø—É—Å—Ç–∏–º—ã–º –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º
        
        start_idx = (page - 1) * users_per_page
        end_idx = start_idx + users_per_page
        page_users = all_users[start_idx:end_idx]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        text = f"<b>–£–ø—Ä–∞–≤–ª—è–π—Ç–µ –ª—é–¥—å–º–∏:</b>\n({page} —Å—Ç—Ä–∞–Ω–∏—Ü–∞)\n\n"
        markup = types.InlineKeyboardMarkup()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for user_data in page_users:
            user_id = user_data[0]
            try:
                user = bot.get_chat_member(user_id, user_id).user
                username = f"@{user.username}" if user.username else "–ù–µ—Ç username"
            except:
                username = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            
            markup.add(types.InlineKeyboardButton(f"{user_id} {username}", callback_data=f"user_details_{user_id}"))
        
        # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        if total_pages > 1:
            row = []
            if page > 1:
                row.append(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"all_users_{page-1}"))
            row.append(types.InlineKeyboardButton(f"{page}", callback_data=f"all_users_{page}"))
            if page < total_pages:
                row.append(types.InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"all_users_{page+1}"))
            markup.row(*row)
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–π—Ç–∏ –ø–æ username –∏–ª–∏ userid"
        markup.add(types.InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ –ø–æ username –∏–ª–∏ userid", callback_data="find_user"))
        
        # –ö–Ω–æ–ø–∫–∞ "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"
        markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
    
    try:
        bot.delete_message(call.message.chat.id, call.message.message_id)
    except:
        pass
    bot.send_message(call.message.chat.id, text, parse_mode='HTML', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "find_user")
def find_user(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!")
        return
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –∞–¥–º–∏–Ω–∞ username –∏–ª–∏ userid
    text = "üîç –í–≤–µ–¥–∏—Ç–µ @username –∏–ª–∏ userid –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞:"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="all_users_1"))
    
    try:
        bot.delete_message(call.message.chat.id, call.message.message_id)
    except:
        pass
    msg = bot.send_message(call.message.chat.id, text, parse_mode='HTML', reply_markup=markup)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    bot.register_next_step_handler(msg, process_user_search, call.message.chat.id)

def process_user_search(message, original_chat_id):
    if message.chat.id != original_chat_id or message.from_user.id not in config.ADMINS_ID:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞: –¥–µ–π—Å—Ç–≤–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!")
        return
    
    search_query = message.text.strip()
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–≤–µ–¥—ë–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    try:
        bot.delete_message(message.chat.id, message.message_id)
    except:
        pass
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user_id = None
    username = None
    
    if search_query.startswith('@'):
        username = search_query[1:].lower()  # –£–±–∏—Ä–∞–µ–º @ –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    else:
        try:
            user_id = int(search_query)  # –ü—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ (userid)
        except ValueError:
            bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ @username –∏–ª–∏ userid (—á–∏—Å–ª–æ).")
            return
    
    # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
    found_user_id = None
    username_display = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    with db.get_db() as conn:
        cursor = conn.cursor()
        if user_id:
            cursor.execute('SELECT ID, USERNAME FROM users WHERE ID = ?', (user_id,))
            user = cursor.fetchone()
            if user:
                found_user_id = user[0]
                username_display = f"@{user[1]}" if user[1] else "–ù–µ—Ç username"
        else:
            cursor.execute('SELECT ID, USERNAME FROM users')
            users = cursor.fetchall()
            for uid, uname in users:
                if uname and uname.lower() == username:
                    found_user_id = uid
                    username_display = f"@{uname}"
                    break
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    if found_user_id:
        text = (
            f"<b>–ù–∞–π–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b>\n\n"
            f"üÜî ID: <code>{found_user_id}</code>\n"
            f"üë§ Username: {username_display}\n"
        )
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(f"üëÅÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ ({found_user_id})", callback_data=f"user_details_info_{found_user_id}"))
        markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="all_users_1"))
        markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
    else:
        text = "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!"
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="all_users_1"))
        markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.send_message(message.chat.id, text, parse_mode='HTML', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("user_details_"))
def user_details(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏!")
        return
    
    # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data
    parts = call.data.split("_")
    if len(parts) < 3 or not parts[2].isdigit():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç—Ä–µ—Ç–∏–π —ç–ª–µ–º–µ–Ω—Ç ‚Äî —á–∏—Å–ª–æ
        bot.answer_callback_query(call.id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        print(f"[DEBUG] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π call.data: {call.data}")
        return
    
    user_id = int(parts[2])  # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∫–∞–∫ —á–∏—Å–ª–æ
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    with db.get_db() as conn:
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ç–∞–±–ª–∏—Ü–µ requests
        cursor.execute('SELECT BLOCKED, CAN_SUBMIT_NUMBERS FROM requests WHERE ID = ?', (user_id,))
        user_data = cursor.fetchone()
        if not user_data:
            text = f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω!"
            markup = InlineKeyboardMarkup()
            markup.add(InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="all_users_1"))
            markup.add(InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
            bot.edit_message_text(text, call.message.chat.id, call.message.message_id, parse_mode='HTML', reply_markup=markup)
            return
        
        is_blocked = user_data[0]
        can_submit_numbers = user_data[1]
        
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users
        cursor.execute('SELECT BALANCE FROM users WHERE ID = ?', (user_id,))
        balance_data = cursor.fetchone()
        balance = balance_data[0] if balance_data and balance_data[0] is not None else 0.0
        print(f"[DEBUG] –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {balance:.2f}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –Ω–æ–º–µ—Ä–∞–º
        cursor.execute('SELECT COUNT(*) FROM numbers WHERE ID_OWNER = ?', (user_id,))
        total_numbers = cursor.fetchone()[0]
        
        cursor.execute('SELECT COUNT(*) FROM numbers WHERE ID_OWNER = ? AND STATUS IN ("–æ—Ç—Å—Ç–æ—è–ª 1/2", "–æ—Ç—Å—Ç–æ—è–ª 2/2", "–æ—Ç—Å—Ç–æ—è–ª 2/2+ —Ö–æ–ª–¥")', (user_id,))
        successful_numbers = cursor.fetchone()[0]
        
        cursor.execute('SELECT COUNT(*) FROM numbers WHERE ID_OWNER = ? AND STATUS IN ("—Å–ª–µ—Ç–µ–ª", "—Å–ª—ë—Ç 1/2 —Ö–æ–ª–¥", "—Å–ª—ë—Ç 2/2", "—Å–ª—ë—Ç 2/2+")', (user_id,))
        shutdown_numbers = cursor.fetchone()[0]
        
        cursor.execute('SELECT COUNT(*) FROM numbers WHERE ID_OWNER = ? AND STATUS = "–Ω–µ –≤–∞–ª–∏–¥"', (user_id,))
        invalid_numbers = cursor.fetchone()[0]
        
        cursor.execute('SELECT COUNT(*) FROM numbers WHERE ID_OWNER = ? AND STATUS = "–∞–∫—Ç–∏–≤–µ–Ω"', (user_id,))
        active_numbers = cursor.fetchone()[0]
        
        # –ü–æ–¥—Å—á—ë—Ç –Ω–æ–º–µ—Ä–æ–≤ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —Å—Ç–∞—Ç—É—Å–∞–º "–æ—Ç—Å—Ç–æ—è–ª"
        cursor.execute('SELECT COUNT(*) FROM numbers WHERE ID_OWNER = ? AND STATUS = "–æ—Ç—Å—Ç–æ—è–ª 1/2"', (user_id,))
        half_hold_numbers = cursor.fetchone()[0]
        
        cursor.execute('SELECT COUNT(*) FROM numbers WHERE ID_OWNER = ? AND STATUS = "–æ—Ç—Å—Ç–æ—è–ª 2/2"', (user_id,))
        full_hold_numbers = cursor.fetchone()[0]
        
        cursor.execute('SELECT COUNT(*) FROM numbers WHERE ID_OWNER = ? AND STATUS = "–æ—Ç—Å—Ç–æ—è–ª 2/2+ —Ö–æ–ª–¥"', (user_id,))
        extra_hold_numbers = cursor.fetchone()[0]
    
    # –ü–æ–ª—É—á–∞–µ–º username —á–µ—Ä–µ–∑ Telegram API
    try:
        user = bot.get_chat_member(user_id, user_id).user
        username = f"@{user.username}" if user.username else "–ù–µ—Ç username"
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å username –¥–ª—è user_id {user_id}: {e}")
        username = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    text = (
        f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} {username}</b>\n\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance:.2f} $\n"
        f"üì± –°–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ –∑–∞–ª–∏–ª: {total_numbers}\n"
        f"‚úÖ –°–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ —É—Å–ø–µ—à–Ω—ã—Ö: {successful_numbers}\n"
        f"‚è≥ –°–∫–æ–ª—å–∫–æ —Å–ª–µ—Ç–µ–ª–æ: {shutdown_numbers}\n"
        f"‚ùå –°–∫–æ–ª—å–∫–æ –Ω–µ –≤–∞–ª–∏–¥–Ω—ã—Ö: {invalid_numbers}\n"
        f"üîÑ –ö–æ—Ç–æ—Ä—ã–µ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞—é—Ç: {active_numbers}\n"
        f"üìä –û—Ç—Å—Ç–æ—è–ª–æ 1/2: {half_hold_numbers}\n"
        f"üìä –û—Ç—Å—Ç–æ—è–ª–æ 2/2: {full_hold_numbers}\n"
        f"üìä –û—Ç—Å—Ç–æ—è–ª–æ 2/2+: {extra_hold_numbers}\n"
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
    markup = InlineKeyboardMarkup()
    
    # –ö–Ω–æ–ø–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    if is_blocked:
        markup.add(InlineKeyboardButton("‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤ –±–æ—Ç–µ", callback_data=f"unblock_user_{user_id}"))
    else:
        markup.add(InlineKeyboardButton("‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤ –±–æ—Ç–µ", callback_data=f"block_user_{user_id}"))
    
    # –ö–Ω–æ–ø–∫–∞ "–í—ã–≥–Ω–∞—Ç—å –∏–∑ –±–æ—Ç–∞"
    markup.add(InlineKeyboardButton("üö™ –í—ã–≥–Ω–∞—Ç—å –∏–∑ –±–æ—Ç–∞", callback_data=f"kick_user_{user_id}"))
    
    # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—Ä–µ—Ç–∞/—Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Å–¥–∞—á–∏ –Ω–æ–º–µ—Ä–æ–≤
    if can_submit_numbers:
        markup.add(InlineKeyboardButton("üö´ –ó–∞–ø—Ä–µ—Ç–∏—Ç—å —Å–¥–∞–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤", callback_data=f"disable_numbers_{user_id}"))
    else:
        markup.add(InlineKeyboardButton("‚úÖ –†–∞–∑—Ä–µ—à–∏—Ç—å —Å–¥–∞–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤", callback_data=f"enable_numbers_{user_id}"))
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    markup.add(InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="all_users_1"))
    markup.add(InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
    
    try:
        bot.delete_message(call.message.chat.id, call.message.message_id)
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    bot.send_message(call.message.chat.id, text, parse_mode='HTML', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("block_user_"))
def block_user(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!")
        return
    
    user_id = int(call.data.split("_")[2])  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ user_id –æ–ø—Ä–µ–¥–µ–ª—ë–Ω
    
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('UPDATE requests SET BLOCKED = 1 WHERE ID = ?', (user_id,))
        conn.commit()
    
    try:
        bot.send_message(user_id, "üö´ –í–∞—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –≤ –±–æ—Ç–µ!")
    except:
        pass
    
    bot.answer_callback_query(call.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!")
    user_details(call)

@bot.callback_query_handler(func=lambda call: call.data.startswith("unblock_user_"))
def unblock_user(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!")
        return
    user_id = int(call.data.split("_")[2])
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('UPDATE requests SET BLOCKED = 0 WHERE ID = ?', (user_id,))
        conn.commit()
    try:
        bot.send_message(user_id, "‚úÖ –í–∞—Å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –≤ –±–æ—Ç–µ! –ù–∞–ø–∏—à–∏—Ç–µ /start")
    except:
        pass
    bot.answer_callback_query(call.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!")
    user_details(call)


@bot.callback_query_handler(func=lambda call: call.data.startswith("kick_user_"))
def kick_user(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!")
        return
    user_id = int(call.data.split("_")[2])
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_kick_{user_id}"),
        types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="all_users_1")
    )
    bot.edit_message_text(
        f"‚ö†Ô∏è –í—ã–≥–Ω–∞—Ç—å –∏ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}?",
        call.message.chat.id,
        call.message.message_id,
        parse_mode='HTML',
        reply_markup=markup
    )
#–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–∏–∫–∞ –∏–∑ –±–æ—Ç–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith("confirm_kick_"))
def confirm_kick_user(call):
    user_id = int(call.data.split("_")[2])
    try:
        with db.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('DELETE FROM users WHERE ID = ?', (user_id,))
            cursor.execute('DELETE FROM requests WHERE ID = ?', (user_id,))
            cursor.execute('DELETE FROM numbers WHERE ID_OWNER = ?', (user_id,))
            cursor.execute('DELETE FROM withdraws WHERE ID = ?', (user_id,))
            cursor.execute('DELETE FROM checks WHERE USER_ID = ?', (user_id,))
            cursor.execute('DELETE FROM personal WHERE ID = ?', (user_id,))
            conn.commit()
            print(f"{user_id} –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª—ë–Ω.")
        try:
            bot.send_message(
                user_id,
                "üö™ –í–∞—Å –≤—ã–≥–Ω–∞–ª–∏ –∏–∑ –±–æ—Ç–∞! –í–∞–º –Ω—É–∂–Ω–æ —Å–Ω–æ–≤–∞ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ. –ù–∞–ø–∏—à–∏—Ç–µ /start"
            )
        except:
            pass
        bot.answer_callback_query(call.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–≥–Ω–∞–Ω –∏–∑ –±–æ—Ç–∞!")
        call.data = "all_users_1"
        show_all_users(call)
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏!")

@bot.callback_query_handler(func=lambda call: call.data.startswith("disable_numbers_"))
def disable_numbers(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!")
        return
    user_id = int(call.data.split("_")[2])
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('UPDATE requests SET CAN_SUBMIT_NUMBERS = 0 WHERE ID = ?', (user_id,))
        conn.commit()
    try:
        bot.send_message(user_id, "üö´ –í–∞–º –∑–∞–ø—Ä–µ—Ç–∏–ª–∏ —Å–¥–∞–≤–∞—Ç—å –Ω–æ–º–µ—Ä–∞!")
    except:
        pass  
    bot.answer_callback_query(call.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –∑–∞–ø—Ä–µ—â–µ–Ω–æ —Å–¥–∞–≤–∞—Ç—å –Ω–æ–º–µ—Ä–∞!")
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_details(call)

@bot.callback_query_handler(func=lambda call: call.data.startswith("enable_numbers_"))
def enable_numbers(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!")
        return
    user_id = int(call.data.split("_")[2])
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('UPDATE requests SET CAN_SUBMIT_NUMBERS = 1 WHERE ID = ?', (user_id,))
        conn.commit()
    try:
        bot.send_message(user_id, "‚úÖ –í–∞–º —Ä–∞–∑—Ä–µ—à–∏–ª–∏ —Å–¥–∞–≤–∞—Ç—å –Ω–æ–º–µ—Ä–∞!")
    except:
        pass
    bot.answer_callback_query(call.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} —Ä–∞–∑—Ä–µ—à–µ–Ω–æ —Å–¥–∞–≤–∞—Ç—å –Ω–æ–º–µ—Ä–∞!")
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_details(call)

#========================================================================================================================
#==================================================== –ö–û–î –î–õ–Ø –ü–†–ò–ù–Ø–¢–ò–Ø –ó–ê–Ø–í–û–ö –í –ë–û–¢–ê===================================
#========================================================================================================================

@bot.callback_query_handler(func=lambda call: call.data == "pending_requests")
def pending_requests(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞—è–≤–∫–∞–º!")
        return

    bot.answer_callback_query(call.id)

    with db_module.get_db() as conn:
        cursor = conn.cursor()
        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—ë–º placeholders –¥–ª—è config.ADMINS_ID
        admin_ids = config.ADMINS_ID
        if not admin_ids:
            query = 'SELECT ID, LAST_REQUEST FROM requests WHERE STATUS = ? AND ID NOT IN (SELECT ID FROM personal WHERE TYPE = ?)'
            params = ('pending', 'moderator')
        else:
            admin_placeholders = ','.join('?' for _ in admin_ids)
            query = f'SELECT ID, LAST_REQUEST FROM requests WHERE STATUS = ? AND ID NOT IN (SELECT ID FROM requests WHERE ID IN ({admin_placeholders}) OR ID IN (SELECT ID FROM personal WHERE TYPE = ?))'
            params = ('pending', *admin_ids, 'moderator')
        cursor.execute(query, params)
        pending_users = cursor.fetchall()

    admin_text = "üîî <b>–ó–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è</b>\n\n"
    markup = types.InlineKeyboardMarkup()
    if pending_users:
        for user_id, reg_date in pending_users:
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º bot.get_chat_member –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user = bot.get_chat_member(user_id, user_id).user
                username = f"@{user.username}" if user.username else "–ù–µ—Ç username"
                # –î–µ–ª–∞–µ–º username –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º
                username_link = f"<a href=\"tg://user?id={user_id}\">{username}</a>" if user.username else "–ù–µ—Ç username"
            except Exception as e:
                print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å username –¥–ª—è user_id {user_id}: {e}")
                username_link = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

            admin_text += (
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: https://t.me/@id{user_id} (–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {reg_date})\n"
                f"üë§ Username: {username_link}\n"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
            )
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–û–¥–æ–±—Ä–∏—Ç—å" –∏ "–û—Ç–∫–ª–æ–Ω–∏—Ç—å"
            approve_button = types.InlineKeyboardButton(f"‚úÖ –û–¥–æ–±—Ä–∏—Ç—å {user_id}", callback_data=f"approve_user_{user_id}")
            reject_button = types.InlineKeyboardButton(f"‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å {user_id}", callback_data=f"reject_user_{user_id}")
            markup.row(approve_button, reject_button)
    else:
        admin_text += "üì≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ.\n"

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    markup.add(types.InlineKeyboardButton("üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
    markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))

    try:
        bot.edit_message_text(
            admin_text,
            call.message.chat.id,
            call.message.message_id,
            parse_mode='HTML',
            reply_markup=markup
        )
    except telebot.apihelper.ApiTelegramException as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        bot.send_message(call.message.chat.id, admin_text, parse_mode='HTML', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("pending_requests"))
def show_pending_requests(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–æ–∫!")
        return
    
    page = 1
    if "_" in call.data:
        try:
            page = int(call.data.split("_")[1])
            if page < 1:
                page = 1
        except (IndexError, ValueError):
            page = 1

    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT ID, LAST_REQUEST FROM requests WHERE STATUS = "pending"')
        requests = cursor.fetchall()
    
    if not requests:
        text = "üì≠ –ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ."
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        bot.edit_message_text(
            text,
            call.message.chat.id,
            call.message.message_id,
            parse_mode='HTML',
            reply_markup=markup,
            disable_notification=True  # –û—Ç–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        )
        return
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    items_per_page = 20
    total_pages = (len(requests) + items_per_page - 1) // items_per_page
    page = max(1, min(page, total_pages))
    start_idx = (page - 1) * items_per_page
    end_idx = start_idx + items_per_page
    page_requests = requests[start_idx:end_idx]
    
    text = f"<b>üìù –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}):</b>\n\n"
    markup = types.InlineKeyboardMarkup()
    
    for user_id, last_request in page_requests:
        try:
            user = bot.get_chat_member(user_id, user_id).user
            username = f"@{user.username}" if user.username else "–ù–µ—Ç username"
        except:
            username = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        text += (
            f"üÜî ID: <code>{user_id}</code>\n"
            f"üë§ Username: {username}\n"
            f"üìÖ –î–∞—Ç–∞ –∑–∞—è–≤–∫–∏: {last_request}\n"
            f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        )
        
        markup.row(
            types.InlineKeyboardButton(f"‚úÖ –û–¥–æ–±—Ä–∏—Ç—å {user_id}", callback_data=f"approve_user_{user_id}"),
            types.InlineKeyboardButton(f"‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å {user_id}", callback_data=f"reject_user_{user_id}")
        )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤
    TELEGRAM_MESSAGE_LIMIT = 4096
    if len(text) > TELEGRAM_MESSAGE_LIMIT:
        text = text[:TELEGRAM_MESSAGE_LIMIT - 100] + "\n... (–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞–≥–∏–Ω–∞—Ü–∏—é)"
    
    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    if total_pages > 1:
        row = []
        if page > 1:
            row.append(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"pending_requests_{page-1}"))
        row.append(types.InlineKeyboardButton(f"{page}/{total_pages}", callback_data="noop"))
        if page < total_pages:
            row.append(types.InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"pending_requests_{page+1}"))
        if row:
            markup.row(*row)
    
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
    markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    
    try:
        bot.edit_message_text(
            text,
            call.message.chat.id,
            call.message.message_id,
            parse_mode='HTML',
            reply_markup=markup,
            disable_notification=True  # –û—Ç–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        )
    except:
        bot.send_message(
            call.message.chat.id,
            text,
            parse_mode='HTML',
            reply_markup=markup,
            disable_notification=True  # –û—Ç–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        )

@bot.callback_query_handler(func=lambda call: call.data == "pending_requests")
def pending_requests(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞—è–≤–∫–∞–º!")
        return

    bot.answer_callback_query(call.id)

    with db_module.get_db() as conn:
        cursor = conn.cursor()
        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—ë–º placeholders –¥–ª—è config.ADMINS_ID
        admin_ids = config.ADMINS_ID
        if not admin_ids:
            query = 'SELECT ID, LAST_REQUEST FROM requests WHERE STATUS = ? AND ID NOT IN (SELECT ID FROM personal WHERE TYPE = ?)'
            params = ('pending', 'moderator')
        else:
            admin_placeholders = ','.join('?' for _ in admin_ids)
            query = f'SELECT ID, LAST_REQUEST FROM requests WHERE STATUS = ? AND ID NOT IN (SELECT ID FROM requests WHERE ID IN ({admin_placeholders}) OR ID IN (SELECT ID FROM personal WHERE TYPE = ?))'
            params = ('pending', *admin_ids, 'moderator')
        cursor.execute(query, params)
        pending_users = cursor.fetchall()

    admin_text = "üîî <b>–ó–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è</b>\n\n"
    markup = types.InlineKeyboardMarkup()
    if pending_users:
        for user_id, reg_date in pending_users:
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º bot.get_chat_member –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user = bot.get_chat_member(user_id, user_id).user
                username = f"@{user.username}" if user.username else "–ù–µ—Ç username"
                # –î–µ–ª–∞–µ–º username –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º
                username_link = f"<a href=\"tg://user?id={user_id}\">{username}</a>" if user.username else "–ù–µ—Ç username"
            except Exception as e:
                print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å username –¥–ª—è user_id {user_id}: {e}")
                username_link = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

            admin_text += (
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: https://t.me/@id{user_id} (–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {reg_date})\n"
                f"üë§ Username: {username_link}\n"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
            )
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–û–¥–æ–±—Ä–∏—Ç—å" –∏ "–û—Ç–∫–ª–æ–Ω–∏—Ç—å"
            approve_button = types.InlineKeyboardButton(f"‚úÖ –û–¥–æ–±—Ä–∏—Ç—å {user_id}", callback_data=f"approve_user_{user_id}")
            reject_button = types.InlineKeyboardButton(f"‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å {user_id}", callback_data=f"reject_user_{user_id}")
            markup.row(approve_button, reject_button)
    else:
        admin_text += "üì≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ.\n"

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    markup.add(types.InlineKeyboardButton("üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
    markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))

    try:
        bot.edit_message_text(
            admin_text,
            call.message.chat.id,
            call.message.message_id,
            parse_mode='HTML',
            reply_markup=markup
        )
    except telebot.apihelper.ApiTelegramException as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        bot.send_message(call.message.chat.id, admin_text, parse_mode='HTML', reply_markup=markup)


#=======================================================================================
#=======================================================================================
#===================================–ì–†–£–ü–ü–´==============================================
#=======================================================================================
#=======================================================================================
#=======================================================================================

@bot.callback_query_handler(func=lambda call: call.data == "groups")
def groups_menu(call):
    bot.clear_step_handler_by_chat_id(call.message.chat.id)
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–∞–º–∏!")
        return
    
    text = "<b>üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏</b>"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É", callback_data="add_group"))
    markup.add(types.InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É", callback_data="remove_group"))
    markup.add(types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="group_statistics"))
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
    markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    
    try:
        bot.delete_message(call.message.chat.id, call.message.message_id)
    except:
        pass
    bot.send_message(call.message.chat.id, text, parse_mode='HTML', reply_markup=markup)

#–î–û–ë–ê–í–õ–ï–ù–ò–ï –ò–î –ì–†–£–ü–ü–´ –î–õ–Ø –ü–†–ò–ù–Ø–¢–ò–ï –ù–û–ú–ï–†–û–í
@bot.callback_query_handler(func=lambda call: call.data == "add_group")
def add_group(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!")
        return
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="groups"))
    
    msg = bot.edit_message_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ ID –≥—Ä—É–ø–ø—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, -1002453887941):",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup
    )
    
    bot.register_next_step_handler(msg, process_group_id_add)

def process_group_id_add(message):
    try:
        group_id = int(message.text.strip())
        with db.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT ID FROM groups WHERE ID = ?', (group_id,))
            if cursor.fetchone():
                bot.reply_to(message, "‚ùå –≠—Ç–∞ –≥—Ä—É–ø–ø–∞ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –Ω–æ–º–µ—Ä–æ–≤!")
                return
            cursor.execute('INSERT INTO groups (ID, NAME) VALUES (?, ?)', (group_id, f"{group_id}"))
            conn.commit()
        bot.reply_to(message, f"‚úÖ –ì—Ä—É–ø–ø–∞ —Å ID {group_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –Ω–æ–º–µ—Ä–æ–≤!")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
    except ValueError:
        bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã: {e}")

@bot.callback_query_handler(func=lambda call: call.data == "remove_group")
def remove_group(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!")
        return
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT ID, NAME FROM groups')
        groups = cursor.fetchall()
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="groups"))
    if not groups:
        bot.edit_message_text(
            "üì≠ –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
            call.message.chat.id,
            call.message.message_id,
            parse_mode='HTML',
            reply_markup=markup
        )
        return
    markup = types.InlineKeyboardMarkup()
    for group_id, group_name in groups:
        markup.add(types.InlineKeyboardButton(f"‚ûñ {group_name} (ID: {group_id})", callback_data=f"confirm_remove_{group_id}"))
    markup.add(types.InlineKeyboardButton("üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
    bot.edit_message_text(
        "<b>‚ûñ –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:</b>",
        call.message.chat.id,
        call.message.message_id,
        parse_mode='HTML',
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith("confirm_remove_"))
def confirm_remove_group(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!")
        return
    group_id = int(call.data.split("_")[2])
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT NAME FROM groups WHERE ID = ?', (group_id,))
        group = cursor.fetchone()
        if not group:
            bot.answer_callback_query(call.id, "‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return
        group_name = group[0]
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ", callback_data=f"remove_confirmed_{group_id}"))
        markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="remove_group"))
        bot.edit_message_text(
            f"<b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã:</b>\nüè† {group_name} (ID: {group_id})",
            call.message.chat.id,
            call.message.message_id,
            parse_mode='HTML',
            reply_markup=markup
        )

@bot.callback_query_handler(func=lambda call: call.data.startswith("remove_confirmed_"))
def remove_confirmed_group(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!")
        return
    group_id = int(call.data.split("_")[2])
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('DELETE FROM groups WHERE ID = ?', (group_id,))
        conn.commit()
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
    bot.edit_message_text(
        f"‚úÖ –ì—Ä—É–ø–ø–∞ —Å ID {group_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!",
        call.message.chat.id,
        call.message.message_id,
        parse_mode='HTML',
        reply_markup=markup
    )
    bot.answer_callback_query(call.id, "–ì—Ä—É–ø–ø–∞ —É–¥–∞–ª–µ–Ω–∞!")

#–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ì–†–£–ü–ü

@bot.callback_query_handler(func=lambda call: call.data.startswith("group_statistics"))
def group_statistics(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!")
        return

    page = 1
    if "_" in call.data:
        try:
            page = int(call.data.split("_")[1])
            if page < 1:
                page = 1
        except (IndexError, ValueError):
            page = 1

    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT ID, NAME FROM groups ORDER BY NAME')
        groups = cursor.fetchall()

    if not groups:
        text = "üì≠ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø."
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        bot.edit_message_text(text, call.message.chat.id, call.message.message_id, parse_mode='HTML', reply_markup=markup)
        return

    items_per_page = 5
    total_pages = (len(groups) + items_per_page - 1) // items_per_page
    page = max(1, min(page, total_pages))
    start_idx = (page - 1) * items_per_page
    end_idx = start_idx + items_per_page
    page_groups = groups[start_idx:end_idx]

    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT HOLD_TIME, PRICE_ADM FROM settings')
        result = cursor.fetchone()
        hold_time_result, price_adm_result = result if result else (5, 4.5)
        HOLD_TIME_MINUTES = int(hold_time_result) if hold_time_result else 5
        PRICE_ADM = float(price_adm_result) if price_adm_result else 4.5

    text = f"<b>üìä –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}):</b>\n\n"
    for group_id, group_name in page_groups:
        cursor.execute('SELECT COUNT(*) FROM personal WHERE GROUP_ID = ? AND TYPE = ?', (group_id, 'moderator'))
        moderator_count = cursor.fetchone()[0]
        
        cursor.execute('''
            SELECT COUNT(*) 
            FROM numbers n
            WHERE n.GROUP_CHAT_ID = ? AND n.STATUS IN ('–æ—Ç—Å—Ç–æ—è–ª 1/2', '–æ—Ç—Å—Ç–æ—è–ª 2/2', '–æ—Ç—Å—Ç–æ—è–ª 2/2+ —Ö–æ–ª–¥')
        ''', (group_id,))
        total_numbers = cursor.fetchone()[0]
        
        cursor.execute('''
            SELECT n.TAKE_DATE, n.SHUTDOWN_DATE, n.STATUS
            FROM numbers n
            WHERE n.GROUP_CHAT_ID = ? AND n.STATUS IN ('–æ—Ç—Å—Ç–æ—è–ª 1/2', '–æ—Ç—Å—Ç–æ—è–ª 2/2', '–æ—Ç—Å—Ç–æ—è–ª 2/2+ —Ö–æ–ª–¥')
            AND n.TAKE_DATE NOT IN ('0', '1') AND n.SHUTDOWN_DATE NOT IN ('0', '1')
        ''', (group_id,))
        numbers_data = cursor.fetchall()
        total_minutes = 0.0
        total_earnings = 0.0
        MAX_HOLDS = 2

        for take_date, shutdown_date, status in numbers_data:
            try:
                take_time = datetime.strptime(take_date, "%Y-%m-%d %H:%M:%S")
                shutdown_time = datetime.strptime(shutdown_date, "%Y-%m-%d %H:%M:%S")
                minutes = (shutdown_time - take_time).total_seconds() / 60
                minutes = max(0, minutes)  # –ò—Å–∫–ª—é—á–∞–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
                if status == '–æ—Ç—Å—Ç–æ—è–ª 1/2' and minutes < HOLD_TIME_MINUTES:
                    minutes = HOLD_TIME_MINUTES  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è 1 —Ö–æ–ª–¥–∞
                total_minutes += minutes
                holds_count = max(1, int(minutes / HOLD_TIME_MINUTES)) if status == '–æ—Ç—Å—Ç–æ—è–ª 1/2' else int(minutes / HOLD_TIME_MINUTES)
                earnings = min(min(holds_count, MAX_HOLDS) * PRICE_ADM, 12.0) if holds_count > 0 else 0.0
                total_earnings += earnings
            except ValueError as e:
                print(f"[DEBUG] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id}: {e}")
                continue

        text += f"üè† <b>{group_name}</b>\n"
        text += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        text += f"üë• –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: <code>{moderator_count}</code>\n"
        text += f"üì± –£—Å–ø–µ—à–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤: <code>{total_numbers}</code>\n"
        text += f"‚è≥ –û—Ç—Å—Ç–æ—è–ª–æ –º–∏–Ω—É—Ç: <code>{total_minutes:.1f}</code>\n"
        text += f"üí∞ –î–æ–ª–∂–Ω—ã –∑–∞–ø–ª–∞—Ç–∏—Ç—å: <code>${total_earnings:.2f}</code>\n\n"

    TELEGRAM_MESSAGE_LIMIT = 4096
    if len(text) > TELEGRAM_MESSAGE_LIMIT:
        text = text[:TELEGRAM_MESSAGE_LIMIT - 100] + "\n... (–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ –∏–∑-–∑–∞ –ª–∏–º–∏—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞–≥–∏–Ω–∞—Ü–∏—é)"

    markup = types.InlineKeyboardMarkup()
    for group_id, group_name in page_groups:
        markup.add(types.InlineKeyboardButton(f"üìä {group_name[:20]}", callback_data=f"group_stats_{group_id}_1"))

    if total_pages > 1:
        row = []
        if page > 1:
            row.append(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"group_statistics_{page-1}"))
        row.append(types.InlineKeyboardButton(f"{page}/{total_pages}", callback_data="noop"))
        if page < total_pages:
            row.append(types.InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"group_statistics_{page+1}"))
        markup.row(*row)

    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
    markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))

    try:
        bot.edit_message_text(text, call.message.chat.id, call.message.message_id, parse_mode='HTML', reply_markup=markup)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è group_statistics: {e}")
        bot.send_message(call.message.chat.id, text, parse_mode='HTML', reply_markup=markup)

        
@bot.callback_query_handler(func=lambda call: call.data.startswith("group_stats_"))
def show_group_stats(call):
    bot.answer_callback_query(call.id)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –≥—Ä—É–ø–ø—ã –∏ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback_data
    parts = call.data.split("_")
    group_id = int(parts[2])
    page = int(parts[3]) if len(parts) > 3 else 1
    ITEMS_PER_PAGE = 10

    with db.get_db() as conn:
        cursor = conn.cursor()
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
        cursor.execute('SELECT NAME FROM groups WHERE ID = ?', (group_id,))
        group_name = cursor.fetchone()
        if not group_name:
            bot.edit_message_text("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", call.message.chat.id, call.message.message_id, parse_mode='HTML')
            return
        group_name = group_name[0]

        # –ü–æ–¥—Å—á—ë—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –≤ –≥—Ä—É–ø–ø–µ
        cursor.execute('SELECT COUNT(*) FROM personal WHERE GROUP_ID = ? AND TYPE = ?', (group_id, 'moderator'))
        total_moderators = cursor.fetchone()[0]

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–æ–º–µ—Ä–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã —Å –Ω—É–∂–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏
        cursor.execute('''
            SELECT NUMBER, TAKE_DATE, SHUTDOWN_DATE, STATUS
            FROM numbers
            WHERE GROUP_CHAT_ID = ? AND STATUS IN ('–æ—Ç—Å—Ç–æ—è–ª 1/2', '–æ—Ç—Å—Ç–æ—è–ª 2/2', '–æ—Ç—Å—Ç–æ—è–ª 2/2+ —Ö–æ–ª–¥')
            AND TAKE_DATE NOT IN ('0', '1') AND SHUTDOWN_DATE NOT IN ('0', '1')
            ORDER BY SHUTDOWN_DATE DESC
        ''', (group_id,))
        all_numbers = cursor.fetchall()
        total_numbers = len(all_numbers)

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
        total_pages = (total_numbers + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE if total_numbers > 0 else 1
        page = max(1, min(page, total_pages))
        start_idx = (page - 1) * ITEMS_PER_PAGE
        end_idx = start_idx + ITEMS_PER_PAGE
        page_numbers = all_numbers[start_idx:end_idx]

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞
        cursor.execute('SELECT HOLD_TIME, PRICE_ADM FROM settings')
        hold_time_result, price_adm_result = cursor.fetchone() or (5, 4.5)
        HOLD_TIME_MINUTES = int(hold_time_result) if hold_time_result else 5
        PRICE_ADM = float(price_adm_result) if price_adm_result else 4.5

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        stats_text = (
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä—É–ø–ø—ã: {group_name}</b>\n\n"
            f"üë• –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: <code>{total_moderators}</code>\n"
            f"üì± –£—Å–ø–µ—à–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤: <code>{total_numbers}</code>\n\n"
            f"üìã –°–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}):\n\n"
        )
        if not page_numbers:
            stats_text += "üì± –í –≥—Ä—É–ø–ø–µ –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç—Å—Ç–æ—è–≤—à–∏—Ö –Ω–æ–º–µ—Ä–æ–≤.\n"
        else:
            for number, take_date, shutdown_date, status in page_numbers:
                try:
                    take_time = datetime.strptime(take_date, "%Y-%m-%d %H:%M:%S")
                    shutdown_time = datetime.strptime(shutdown_date, "%Y-%m-%d %H:%M:%S")
                    minutes = (shutdown_time - take_time).total_seconds() / 60  # –†–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö
                    # –ï—Å–ª–∏ –º–∏–Ω—É—Ç –º–µ–Ω—å—à–µ 0 (–æ—à–∏–±–∫–∞ –¥–∞—Ç), –∏—Å–ø–æ–ª—å–∑—É–µ–º 0
                    minutes = max(0, minutes)
                    # –î–ª—è —Å—Ç–∞—Ç—É—Å–∞ '–æ—Ç—Å—Ç–æ—è–ª 1/2' –≤—Ä–µ–º—è —Å—á–∏—Ç–∞–µ—Ç—Å—è —Å –º–æ–º–µ–Ω—Ç–∞ —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞
                    if status == '–æ—Ç—Å—Ç–æ—è–ª 1/2' and minutes < HOLD_TIME_MINUTES:
                        minutes = HOLD_TIME_MINUTES  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è 1 —Ö–æ–ª–¥–∞
                    time_str = f"{int(minutes)}"  # –†–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –±–µ–∑ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è –¥–æ 30
                    holds_count = max(1, int(minutes / HOLD_TIME_MINUTES)) if status == '–æ—Ç—Å—Ç–æ—è–ª 1/2' else int(minutes / HOLD_TIME_MINUTES)
                    hold_str = f"{holds_count}"
                except ValueError as e:
                    print(f"[DEBUG] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è –Ω–æ–º–µ—Ä–∞ {number}: {e}")
                    time_str = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                    hold_str = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                
                stats_text += f"üì± –ù–æ–º–µ—Ä: <code>{number}</code>\n"
                stats_text += f"–ü—Ä–æ—Å—Ç–æ—è–ª: {time_str} –º–∏–Ω—É—Ç\n"
                stats_text += f"–•–æ–ª–¥: {hold_str}\n\n"

        TELEGRAM_MESSAGE_LIMIT = 4096
        if len(stats_text) > TELEGRAM_MESSAGE_LIMIT:
            stats_text = stats_text[:TELEGRAM_MESSAGE_LIMIT - 100] + "\n... (–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ –∏–∑-–∑–∞ –ª–∏–º–∏—Ç–∞)"

        # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        markup = types.InlineKeyboardMarkup()
        nav_buttons = []
        if page > 1:
            nav_buttons.append(types.InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥", callback_data=f"group_stats_{group_id}_{page-1}"))
        if page < total_pages:
            nav_buttons.append(types.InlineKeyboardButton("–°–ª–µ–¥ ‚û°Ô∏è", callback_data=f"group_stats_{group_id}_{page+1}"))
        if nav_buttons:
            markup.add(*nav_buttons)
        markup.add(types.InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É –≥—Ä—É–ø–ø", callback_data="group_statistics_1"))
        markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.edit_message_text(
            stats_text,
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup,
            parse_mode='HTML'
        )

#================================================
#=======================–†–ê–°–°–´–õ–ö–ê=================
#================================================

broadcast_state = {}

@bot.callback_query_handler(func=lambda call: call.data == "broadcast")
def request_broadcast_message(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏!")
        return
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ: —Ä–∞—Å—Å—ã–ª–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞
    broadcast_state[call.from_user.id] = {"active": True}
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    markup.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
    msg = bot.edit_message_text(
        "üì¢ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup
    )
    bot.register_next_step_handler(msg, process_broadcast_message)

def process_broadcast_message(message):
    user_id = message.from_user.id
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∞
    if user_id not in broadcast_state or not broadcast_state[user_id].get("active", False):
        # –ï—Å–ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        return
    if user_id not in config.ADMINS_ID:
        bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏!")
        return
    broadcast_text = message.text
    try:
        with get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT u.ID
                FROM users u
                LEFT JOIN personal p ON u.ID = p.ID
                WHERE p.TYPE IS NULL OR p.TYPE NOT IN ('moder', 'ADMIN')
            ''')
            users = cursor.fetchall()
        
        success = 0
        failed = 0
        for user in users:
            try:
                bot.send_message(user[0], broadcast_text)
                success += 1
                time.sleep(0.05)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ª–∏–º–∏—Ç–æ–≤ Telegram
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user[0]}: {e}")
                failed += 1
        
        stats_text = (
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}\n"
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {failed}\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}"
        )
        
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("üì¢ –ù–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞", callback_data="broadcast"))
        markup.add(InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
        markup.add(InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        bot.send_message(message.chat.id, stats_text, reply_markup=markup, parse_mode='HTML')
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏.")
    finally:
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        broadcast_state.pop(user_id, None)

#================================================================================================
#================================================================================================
#===================================== –í–°–ï –ù–û–ú–ï–†–ê ===============================================
#================================================================================================
#================================================================================================

@bot.callback_query_handler(func=lambda call: call.data.startswith("all_numbers"))
def show_all_numbers(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –Ω–æ–º–µ—Ä–æ–≤!")
        return
    
    bot.answer_callback_query(call.id)
    page = int(call.data.split("_")[2]) if len(call.data.split("_")) > 2 else 1
    numbers_per_page = 5

    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT COUNT(*) FROM numbers')
        total_numbers = cursor.fetchone()[0]
        
        total_pages = max(1, (total_numbers + numbers_per_page - 1) // numbers_per_page)
        page = min(max(1, page), total_pages)
        
        offset = (page - 1) * numbers_per_page
        cursor.execute('''
            SELECT n.NUMBER, n.STATUS, n.TAKE_DATE, n.SHUTDOWN_DATE, n.ID_OWNER, 
                   n.CONFIRMED_BY_MODERATOR_ID, n.GROUP_CHAT_ID, n.TG_NUMBER, u.USERNAME, n.HOLDS_COUNT
            FROM numbers n
            LEFT JOIN users u ON n.ID_OWNER = u.ID
            ORDER BY n.TAKE_DATE DESC
            LIMIT ? OFFSET ?
        ''', (numbers_per_page, offset))
        numbers = cursor.fetchall()
    
    # –ü–æ–ª—É—á–∞–µ–º PRICE_ADM –∏ HOLD_TIME_MINUTES –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT HOLD_TIME, PRICE_ADM FROM settings')
        result = cursor.fetchone()
        hold_time_result, price_adm_result = result if result else (5, 4.5)
    HOLD_TIME_MINUTES = int(hold_time_result) if hold_time_result else 5
    PRICE_ADM = float(price_adm_result) if price_adm_result else 4.5

    numbers_text = f"üìã <b>–í—Å–µ –Ω–æ–º–µ—Ä–∞ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages})</b>\n\n"
    if not numbers:
        numbers_text += "üì≠ –ù–æ–º–µ—Ä–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."
    else:
        from datetime import datetime
        current_time = datetime.now()
        
        for number, status, take_date, shutdown_date, owner_id, confirmed_by_moderator_id, group_chat_id, tg_number, username, holds_count in numbers:
            group_name = db.get_group_name(group_chat_id) if group_chat_id else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
            take_date_str = take_date if take_date not in ("0", "1") else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            shutdown_date_str = shutdown_date if shutdown_date != "0" else str(current_time)
            
            # –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç—Å—Ç–æ—è —Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º –¥–æ 30 –º–∏–Ω—É—Ç
            if take_date_str != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" and shutdown_date_str != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ":
                take_time = datetime.strptime(take_date_str, "%Y-%m-%d %H:%M:%S")
                shutdown_time = datetime.strptime(shutdown_date_str, "%Y-%m-%d %H:%M:%S")
                minutes = (shutdown_time - take_time).total_seconds() / 60
                rounded_minutes = (minutes // 30) * 30
            else:
                rounded_minutes = 0.0
            
            # –†–∞—Å—á–µ—Ç –≤—ã–ø–ª–∞—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ PRICE_ADM
            total_earnings = 0.0
            MAX_HOLDS = 2
            if status.startswith("–æ—Ç—Å—Ç–æ—è–ª"):
                holds_count = int(holds_count) if holds_count.isdigit() else 0
                effective_holds = min(holds_count, MAX_HOLDS)
                if status == '–æ—Ç—Å—Ç–æ—è–ª 1/2' and rounded_minutes >= HOLD_TIME_MINUTES:
                    total_earnings = min(PRICE_ADM, 6.0)  # –ú–∞–∫—Å–∏–º—É–º 6$ –∑–∞ 1 —Ö–æ–ª–¥
                elif status in ['–æ—Ç—Å—Ç–æ—è–ª 2/2', '–æ—Ç—Å—Ç–æ—è–ª 2/2+ —Ö–æ–ª–¥']:
                    total_earnings = min(effective_holds * PRICE_ADM, 12.0)  # –ú–∞–∫—Å–∏–º—É–º 12$ –∑–∞ 2 —Ö–æ–ª–¥–∞
            
            moderator_info = f"–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: @{confirmed_by_moderator_id}" if confirmed_by_moderator_id else "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: –ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
            username_display = f"@{username}" if username and username != "–ù–µ —É–∫–∞–∑–∞–Ω" else "–ë–µ–∑ username"
            
            numbers_text += (
                f"üì± –ù–æ–º–µ—Ä: <code>{number}</code>\n"
                f"üë§ –í–ª–∞–¥–µ–ª–µ—Ü: <a href=\"tg://user?id={owner_id}\">{owner_id}</a> ({username_display})\n"
                f"üìä –°—Ç–∞—Ç—É—Å: {status}\n"
                f"üü¢ –í–∑—è—Ç–æ: {take_date_str}\n"
                f"üî¥ –û—Ç—Å—Ç–æ—è–ª: {shutdown_date_str if shutdown_date != '0' else '–ï—â—ë –∞–∫—Ç–∏–≤–µ–Ω'}\n"
                f"‚è≥ –û—Ç—Å—Ç–æ—è–ª–æ –º–∏–Ω—É—Ç: <code>{rounded_minutes:.1f}</code>\n"
                f"üè∑ –ì—Ä—É–ø–ø–∞: {group_name}\n"
                f"üì± –í–¶: {tg_number or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"{moderator_info}\n"
                f"üí∞ –í—ã–ø–ª–∞—Ç–∞: ${total_earnings:.2f}\n\n"
            )
    
    TELEGRAM_MESSAGE_LIMIT = 4096
    if len(numbers_text) > TELEGRAM_MESSAGE_LIMIT:
        numbers_text = numbers_text[:TELEGRAM_MESSAGE_LIMIT - 100] + "\n... (–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ –∏–∑-–∑–∞ –ª–∏–º–∏—Ç–∞)"

    markup = types.InlineKeyboardMarkup()
    if total_pages > 1:
        nav_buttons = []
        if page > 1:
            nav_buttons.append(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"all_numbers_{page-1}"))
        if page < total_pages:
            nav_buttons.append(types.InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"all_numbers_{page+1}"))
        markup.add(*nav_buttons)
    
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
    markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    
    try:
        bot.edit_message_text(
            numbers_text,
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup,
            parse_mode='HTML'
        )
    except telebot.apihelper.ApiTelegramException as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        bot.send_message(
            call.message.chat.id,
            numbers_text,
            reply_markup=markup,
            parse_mode='HTML'
        )

def show_numbers_page(call, page):
    user_id = call.from_user.id
    if user_id not in numbers_data_cache:
        bot.answer_callback_query(call.id, "‚ùå –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—Ä–æ—Å–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∑–∞–Ω–æ–≤–æ!")
        return
    
    numbers = numbers_data_cache[user_id]
    items_per_page = 5
    total_items = len(numbers)
    total_pages = (total_items + items_per_page - 1) // items_per_page
    
    if page < 0 or page >= total_pages:
        bot.answer_callback_query(call.id, "‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!")
        return
    
    start_idx = page * items_per_page
    end_idx = min(start_idx + items_per_page, total_items)
    page_numbers = numbers[start_idx:end_idx]
    
    text = f"<b>üì± –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–æ–º–µ—Ä–æ–≤ (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}):</b>\n\n"
    if not page_numbers:
        text += "üì≠ –ù–æ–º–µ—Ä–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."
    else:
        for number, take_date, shutdown_date, owner_id, group_name, username, holds_count in page_numbers:
            group_info = f"üë• –ì—Ä—É–ø–ø–∞: {group_name}" if group_name else "üë• –ì—Ä—É–ø–ø–∞: –ù–µ —É–∫–∞–∑–∞–Ω–∞"
            user_info = f"üÜî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {owner_id}" if owner_id else "üÜî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –ù–µ —É–∫–∞–∑–∞–Ω"
            username_display = f"@{username}" if username and username != "–ù–µ —É–∫–∞–∑–∞–Ω" else "–ë–µ–∑ username"
            hold_info = "–æ—Ç—Å—Ç–æ—è–ª"
            total_payout = min(holds_count, 2) * 2.0
            if holds_count == 1:
                hold_info = "–æ—Ç—Å—Ç–æ—è–ª 1/2"
            elif holds_count == 2:
                hold_info = "–æ—Ç—Å—Ç–æ—è–ª 2/2"
            elif holds_count > 2:
                hold_info = "–æ—Ç—Å—Ç–æ—è–ª 2/2+ —Ö–æ–ª–¥"
            text += (
                f"üìû <code>{number}</code>\n"
                f"{user_info} ({username_display})\n"
                f"{group_info}\n"
                f"üìÖ –í–∑—è—Ç: {take_date}\n"
                f"üì¥ –û—Ç–∫–ª—é—á—ë–Ω: {shutdown_date or '–ï—â—ë –∞–∫—Ç–∏–≤–µ–Ω'}\n"
                f"üìä –°—Ç–∞—Ç—É—Å: {hold_info}\n"
                f"üí∞ –í—ã–ø–ª–∞—Ç–∞: ${total_payout:.2f}\n\n"
            )
    
    markup = types.InlineKeyboardMarkup()
    nav_buttons = []
    if page > 0:
        nav_buttons.append(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"numbers_page_{page-1}"))
    if page < total_pages - 1:
        nav_buttons.append(types.InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"numbers_page_{page+1}"))
    if nav_buttons:
        markup.row(*nav_buttons)
    
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
    markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    
    try:
        bot.delete_message(call.message.chat.id, call.message.message_id)
        print(f"–£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {call.message.message_id} –≤ —á–∞—Ç–µ {call.message.chat.id}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    bot.send_message(
        call.message.chat.id,
        text,
        parse_mode='HTML',
        reply_markup=markup
    )
    print(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

@bot.callback_query_handler(func=lambda call: call.data.startswith("numbers_page_"))
def numbers_page_callback(call):
    page = int(call.data.split("_")[2])
    show_numbers_page(call, page)


#================================================================================================
#================================================================================================
#========================================== –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –õ–Æ–î–Ø–• ==================================
#================================================================================================
#===============================================================================================


@bot.callback_query_handler(func=lambda call: call.data.startswith("user_numbers_all"))
def show_user_numbers(call):
    bot.answer_callback_query(call.id)
    user_id = call.from_user.id
    db.update_last_activity(user_id)

    try:
        # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        parts = call.data.split("_")
        page = 1  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if len(parts) > 2 and parts[2].isdigit():
            page = int(parts[2])

        with db.get_db() as conn:
            cursor = conn.cursor()
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–æ–º–µ—Ä–∞–º–∏ –∏ –∏—Ö –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏
            cursor.execute('''
                SELECT DISTINCT n.ID_OWNER, u.USERNAME, u.ID, u.WARNINGS
                FROM numbers n
                JOIN users u ON n.ID_OWNER = u.ID
                ORDER BY u.REG_DATE DESC
            ''')
            users = cursor.fetchall()

            if not users:
                markup = InlineKeyboardMarkup()
                markup.add(InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
                bot.edit_message_text(
                    "üì≠ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–æ–º–µ—Ä–∞–º–∏.",
                    call.message.chat.id,
                    call.message.message_id,
                    reply_markup=markup,
                    parse_mode='HTML'
                )
                return

            users_per_page = 5
            total_pages = max(1, (len(users) + users_per_page - 1) // users_per_page)
            page = max(1, min(page, total_pages))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
            offset = (page - 1) * users_per_page
            paginated_users = users[offset:offset + users_per_page]

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            users_text = f"üìã <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages})</b>\n\n"
            for owner_id, username, user_id, warnings in paginated_users:
                cursor.execute('''
                    SELECT COUNT(*), SUM(CASE WHEN n.STATUS = "–æ—Ç—Å—Ç–æ—è–ª" THEN 1 ELSE 0 END)
                    FROM numbers n
                    WHERE n.ID_OWNER = ?
                ''', (owner_id,))
                total_numbers, confirmed_numbers = cursor.fetchone() or (0, 0)
                price = db.get_user_price(owner_id) or 2.0
                earnings = confirmed_numbers * price if confirmed_numbers else 0.0

                users_text += (
                    f"üë§ <a href='tg://user?id={user_id}'>{username or '–ù–µ —É–∫–∞–∑–∞–Ω'}</a> (ID: {user_id})\n"
                    f"üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${earnings:.2f}\n"
                    f"üìä –û—Ç—Å—Ç–æ—è–ª–æ –Ω–æ–º–µ—Ä–æ–≤: {confirmed_numbers or 0} (–≤—Å–µ–≥–æ: {total_numbers})\n"
                    f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {warnings or 0}\n\n"
                )

            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è
            TELEGRAM_MESSAGE_LIMIT = 4096
            if len(users_text) > TELEGRAM_MESSAGE_LIMIT:
                users_text = users_text[:TELEGRAM_MESSAGE_LIMIT - 100] + "\n... (–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ –∏–∑-–∑–∞ –ª–∏–º–∏—Ç–∞)"

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ç–∫—É
            markup = InlineKeyboardMarkup()
            if total_pages > 1:
                nav_buttons = []
                if page > 1:
                    nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"user_numbers_all_{page-1}"))
                if page < total_pages:
                    nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"user_numbers_all_{page+1}"))
                if nav_buttons:
                    markup.add(*nav_buttons)

            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            for owner_id, username, _, _ in paginated_users:
                username_display = username or f"ID: {owner_id}"
                markup.add(InlineKeyboardButton(username_display, callback_data=f"admin_user_details_{owner_id}_{page}"))

            markup.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))

            try:
                bot.edit_message_text(
                    users_text,
                    call.message.chat.id,
                    call.message.message_id,
                    reply_markup=markup,
                    parse_mode='HTML'
                )
            except telebot.apihelper.ApiTelegramException as e:
                print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
                safe_send_message(
                    call.message.chat.id,
                    users_text,
                    parse_mode='HTML',
                    reply_markup=markup
                )

    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –≤ show_user_numbers: {e}")
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
        bot.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup,
            parse_mode='HTML'
        )

@bot.callback_query_handler(func=lambda call: call.data.startswith("admin_user_details_"))
def admin_show_user_details(call):
    bot.answer_callback_query(call.id)
    user_id = call.from_user.id
    db.update_last_activity(user_id)

    try:
        # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è owner_id –∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        parts = call.data.split("_")
        owner_id = int(parts[3])
        page = 1  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if len(parts) > 4 and parts[4].isdigit():
            page = int(parts[4])

        with db.get_db() as conn:
            cursor = conn.cursor()
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –≤–∫–ª—é—á–∞—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
            cursor.execute('SELECT USERNAME, WARNINGS FROM users WHERE ID = ?', (owner_id,))
            user = cursor.fetchone()
            if not user:
                markup = InlineKeyboardMarkup()
                markup.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"user_numbers_all_{page}"))
                bot.edit_message_text(
                    f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {owner_id} –Ω–µ –Ω–∞–π–¥–µ–Ω!",
                    call.message.chat.id,
                    call.message.message_id,
                    reply_markup=markup,
                    parse_mode='HTML'
                )
                return
            username, warnings = user or ("–ù–µ —É–∫–∞–∑–∞–Ω", 0)

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–æ–º–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute('''
                SELECT NUMBER, HOLDS_COUNT, TAKE_DATE, SHUTDOWN_DATE
                FROM numbers
                WHERE ID_OWNER = ?
                ORDER BY TAKE_DATE DESC
            ''', (owner_id,))
            numbers = cursor.fetchall()

            if not numbers:
                markup = InlineKeyboardMarkup()
                markup.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"user_numbers_all_{page}"))
                bot.edit_message_text(
                    f"üì≠ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} (ID: {owner_id}) –Ω–µ—Ç –Ω–æ–º–µ—Ä–æ–≤.",
                    call.message.chat.id,
                    call.message.message_id,
                    reply_markup=markup,
                    parse_mode='HTML'
                )
                return

            numbers_per_page = 5
            total_pages = max(1, (len(numbers) + numbers_per_page - 1) // numbers_per_page)
            page = max(1, min(page, total_pages))
            offset = (page - 1) * numbers_per_page
            paginated_numbers = numbers[offset:offset + numbers_per_page]

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            user_text = (
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href='tg://user?id={owner_id}'>@{username}</a> (ID: {owner_id})\n"
                f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {warnings or 0}\n\n"
                f"üìã –ù–æ–º–µ—Ä–∞ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}):\n"
            )

            current_time = datetime(2025, 7, 2, 17, 16)  # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: 2 –∏—é–ª—è 2025, 17:16 +04
            for number, holds_count, take_date, shutdown_date in paginated_numbers:
                # –ï—Å–ª–∏ HOLDS_COUNT = 0, –≤—Ä–µ–º—è –æ—Ç—Å—Ç–æ—è —Ä–∞–≤–Ω–æ 0
                if holds_count == 0:
                    user_text += (
                        f"üì± –ù–æ–º–µ—Ä: <code>{number}</code>\n"
                        f"üî¢ –ö–∞–∫–æ–π —Ö–æ–ª–¥: {holds_count or 0}\n"
                        f"‚è≥ –°–∫–æ–ª—å–∫–æ –æ—Ç—Å—Ç–æ—è–ª: 0 —á–∞—Å–æ–≤ 0 –º–∏–Ω—É—Ç\n"
                        f"---\n"
                    )
                    continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞—Ç—ã
                try:
                    take_date = datetime.strptime(take_date, '%Y-%m-%d %H:%M:%S') if take_date and take_date != '0' else current_time
                except ValueError:
                    print(f"[ERROR] –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç TAKE_DATE –¥–ª—è –Ω–æ–º–µ—Ä–∞ {number}: {take_date}")
                    take_date = current_time
                
                try:
                    end_date = datetime.strptime(shutdown_date, '%Y-%m-%d %H:%M:%S') if shutdown_date and shutdown_date != '0' else current_time
                except ValueError:
                    print(f"[ERROR] –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç SHUTDOWN_DATE –¥–ª—è –Ω–æ–º–µ—Ä–∞ {number}: {shutdown_date}")
                    end_date = current_time

                # –í—Ä–µ–º—è –æ—Ç—Å—Ç–æ—è: –æ—Ç TAKE_DATE (–Ω–∞—á–∞–ª–æ –ø–µ—Ä–≤–æ–≥–æ —Ö–æ–ª–¥–∞) –¥–æ SHUTDOWN_DATE –∏–ª–∏ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
                time_diff = end_date - take_date
                total_seconds = int(time_diff.total_seconds())
                hours = total_seconds // 3600
                minutes = (total_seconds % 3600) // 60
                user_text += (
                    f"üì± –ù–æ–º–µ—Ä: <code>{number}</code>\n"
                    f"üî¢ –ö–∞–∫–æ–π —Ö–æ–ª–¥: {holds_count or 0}\n"
                    f"‚è≥ –°–∫–æ–ª—å–∫–æ –æ—Ç—Å—Ç–æ—è–ª: {hours} —á–∞—Å–æ–≤ {minutes} –º–∏–Ω—É—Ç\n"
                    f"---\n"
                )

            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è
            TELEGRAM_MESSAGE_LIMIT = 4096
            if len(user_text) > TELEGRAM_MESSAGE_LIMIT:
                user_text = user_text[:TELEGRAM_MESSAGE_LIMIT - 100] + "\n... (–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ –∏–∑-–∑–∞ –ª–∏–º–∏—Ç–∞)"

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ç–∫—É
            markup = InlineKeyboardMarkup()
            if total_pages > 1:
                nav_buttons = []
                if page > 1:
                    nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_user_details_{owner_id}_{page-1}"))
                if page < total_pages:
                    nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"admin_user_details_{owner_id}_{page+1}"))
                if nav_buttons:
                    markup.add(*nav_buttons)

            markup.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"user_numbers_all_{page}"))

            try:
                bot.edit_message_text(
                    user_text,
                    call.message.chat.id,
                    call.message.message_id,
                    reply_markup=markup,
                    parse_mode='HTML'
                )
            except telebot.apihelper.ApiTelegramException as e:
                print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
                safe_send_message(
                    call.message.chat.id,
                    user_text,
                    parse_mode='HTML',
                    reply_markup=markup
                )

    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –≤ admin_show_user_details: {e}")
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"user_numbers_all_{page}"))
        bot.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup,
            parse_mode='HTML'
        )

@bot.callback_query_handler(func=lambda call: call.data.startswith("user_details_"))
def show_user_details(call):
    try:
        bot.answer_callback_query(call.id)
        user_id = call.from_user.id
        db.update_last_activity(user_id)

        # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data
        parts = call.data.split("_")
        if len(parts) < 2 or not parts[1].isdigit():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç ‚Äî —á–∏—Å–ª–æ
            bot.answer_callback_query(call.id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            print(f"[DEBUG] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π call.data: {call.data}")
            return

        target_user_id = int(parts[1])  # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∫–∞–∫ –≤—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç

        if user_id not in config.ADMINS_ID:
            bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π!")
            return

        with db.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT USERNAME, ID, BALANCE, REG_DATE, IS_AFK, WARNINGS FROM users WHERE ID = ?', (target_user_id,))
            user = cursor.fetchone()
            if not user:
                bot.answer_callback_query(call.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return

            username, user_id, balance, reg_date, is_afk, warnings = user
            cursor.execute('''
                SELECT COUNT(*), SUM(CASE WHEN STATUS = "–æ—Ç—Å—Ç–æ—è–ª" THEN 1 ELSE 0 END)
                FROM numbers
                WHERE ID_OWNER = ?
            ''', (target_user_id,))
            total_numbers, confirmed_numbers = cursor.fetchone() or (0, 0)
            price = db.get_user_price(target_user_id) or 2.0
            earnings = confirmed_numbers * price if confirmed_numbers else 0.0

            details_text = (
                f"üë§ <b>–î–µ—Ç–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n"
                f"üÜî ID: <code>{user_id}</code>\n"
                f"üë§ Username: {username or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"üí∞ –ë–∞–ª–∞–Ω—Å: ${balance:.2f}\n"
                f"üí∏ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${earnings:.2f}\n"
                f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {reg_date}\n"
                f"üìä –û—Ç—Å—Ç–æ—è–ª–æ –Ω–æ–º–µ—Ä–æ–≤: {confirmed_numbers or 0} (–≤—Å–µ–≥–æ: {total_numbers})\n"
                f"üé≠ –°—Ç–∞—Ç—É—Å: {'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' if not is_afk else 'üî¥ –í –ê–§–ö'}\n"
                f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {warnings or 0}\n"
            )

            markup = InlineKeyboardMarkup()
            markup.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"user_numbers_all_1"))
            markup.add(InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))

            try:
                bot.edit_message_text(details_text, call.message.chat.id, call.message.message_id, reply_markup=markup, parse_mode='HTML')
            except telebot.apihelper.ApiTelegramException as e:
                print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
                bot.send_message(call.message.chat.id, details_text, reply_markup=markup, parse_mode='HTML')

    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –≤ show_user_details: {e}")
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
        bot.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", call.message.chat.id, call.message.message_id, reply_markup=markup)
#=====
# –ü–û–ò–°–ö –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –ù–û–ú–ï–†–ï

@bot.callback_query_handler(func=lambda call: call.data == "search_number")
def search_number_callback(call):
    user_id = call.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if user_id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
    markup.add(types.InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    msg = bot.edit_message_text(
        "üì± –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79991234567 (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ reply –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ):",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup,
        parse_mode='HTML'
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞
    bot.register_next_step_handler(msg, process_search_number, call.message.chat.id, msg.message_id)


def process_search_number(message, original_chat_id, original_message_id):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if user_id not in config.ADMINS_ID:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–æ–º (reply)
    if not message.reply_to_message:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîç –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="search_number"))
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile"))
        bot.send_message(
            message.chat.id,
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ reply –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞!",
            reply_markup=markup,
            parse_mode='HTML'
        )
        return
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–≤–µ–¥—ë–Ω–Ω—ã–π –Ω–æ–º–µ—Ä
    number_input = message.text.strip()
    normalized_number = is_russian_number(number_input)
    if not normalized_number:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîç –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="search_number"))
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile"))
        bot.send_message(
            message.chat.id,
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–æ—Å—Å–∏–π—Å–∫–∏–π –Ω–æ–º–µ—Ä, –Ω–∞–ø—Ä–∏–º–µ—Ä: +79991234567",
            reply_markup=markup,
            parse_mode='HTML'
        )
        return
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–≤–µ–¥—ë–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º
    try:
        bot.delete_message(message.chat.id, message.message_id)
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–º–µ—Ä–æ–º {normalized_number}: {e}")
    
    # –ü–æ–ª—É—á–∞–µ–º HOLD_TIME –∏ PRICE_ADM –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT HOLD_TIME, PRICE_ADM FROM settings')
        result = cursor.fetchone()
        hold_time_result, price_adm_result = result if result else (30, 4.5)
    HOLD_TIME_MINUTES = int(hold_time_result) if hold_time_result else 30
    PRICE_ADM = float(price_adm_result) if price_adm_result else 4.5
    
    # –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–º–µ—Ä–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('''
            SELECT NUMBER, ID_OWNER, STATUS, TAKE_DATE, SHUTDOWN_DATE, CONFIRMED_BY_MODERATOR_ID, TG_NUMBER, SUBMIT_DATE, GROUP_CHAT_ID, HOLDS_COUNT
            FROM numbers
            WHERE NUMBER = ?
        ''', (normalized_number,))
        number_data = cursor.fetchone()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–æ–º–µ—Ä–µ
    if number_data:
        number, owner_id, status, take_date, shutdown_date, confirmed_by_moderator_id, tg_number, submit_date, group_chat_id, holds_count = number_data
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –≥—Ä—É–ø–ø—ã
        group_name = db.get_group_name(group_chat_id) if group_chat_id else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ –¥–∞—Ç—ã
        take_date_str = take_date if take_date not in ("0", "1") else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        shutdown_date_str = shutdown_date if shutdown_date != "0" else "–ù–µ –∑–∞–≤–µ—Ä—à—ë–Ω"
        
        # –†–∞—Å—á—ë—Ç –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã
        from datetime import datetime
        total_earnings = 0.0
        minutes_worked_str = "0:00"
        if take_date_str != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" and shutdown_date_str != "–ù–µ –∑–∞–≤–µ—Ä—à—ë–Ω":
            take_time = datetime.strptime(take_date_str, "%Y-%m-%d %H:%M:%S")
            shutdown_time = datetime.strptime(shutdown_date_str, "%Y-%m-%d %H:%M:%S")
            minutes = (shutdown_time - take_time).total_seconds() / 60
            rounded_minutes = (minutes // 30) * 30  # –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ö–æ–ª–¥–∞
            hours = int(minutes // 60)  # –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ —á–∞—Å–∞ –≤–Ω–∏–∑
            minutes_worked_str = f"{hours}:00"
            # –†–∞—Å—á—ë—Ç –≤—ã–ø–ª–∞—Ç—ã
            MAX_HOLDS = 2
            holds_count = int(holds_count) if holds_count else 0
            effective_holds = min(holds_count, MAX_HOLDS)
            if status == '—Å–ª—ë—Ç 1/2 —Ö–æ–ª–¥' and rounded_minutes >= HOLD_TIME_MINUTES:
                total_earnings = min(PRICE_ADM, 6.0)
            elif status in ['–æ—Ç—Å—Ç–æ—è–ª 2/2', '—Å–ª—ë—Ç 2/2 —Ö–æ–ª–¥', '–æ—Ç—Å—Ç–æ—è–ª 2/2+ —Ö–æ–ª–¥']:
                total_earnings = min(effective_holds * PRICE_ADM, 12.0)
        
        # –ü–æ–ª—É—á–∞–µ–º username –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        moderator_info = "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: –ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
        if confirmed_by_moderator_id:
            try:
                moderator_info_data = bot.get_chat_member(message.chat.id, confirmed_by_moderator_id).user
                moderator_username = f"@{moderator_info_data.username}" if moderator_info_data.username else f"ID {confirmed_by_moderator_id}"
                moderator_info = f"–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: {moderator_username}"
            except Exception as e:
                print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å username –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ {confirmed_by_moderator_id}: {e}")
                moderator_info = f"–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: ID {confirmed_by_moderator_id}"
        
        # –ü–æ–ª—É—á–∞–µ–º username –≤–ª–∞–¥–µ–ª—å—Ü–∞
        owner_info = f"üë§ –í–ª–∞–¥–µ–ª–µ—Ü: ID {owner_id}"
        try:
            owner_data = bot.get_chat_member(message.chat.id, owner_id).user
            owner_username = f"@{owner_data.username}" if owner_data.username else f"ID {owner_id}"
            owner_info = f"üë§ –í–ª–∞–¥–µ–ª–µ—Ü: {owner_username}"
        except Exception as e:
            print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å username –≤–ª–∞–¥–µ–ª—å—Ü–∞ {owner_id}: {e}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        text = (
            f"üì± –ù–æ–º–µ—Ä: <code>{number}</code>\n"
            f"{owner_info}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {status}\n"
            f"üü¢ –í–∑—è—Ç–æ: {take_date_str.split(' ')[1][:5]}\n"
            f"‚è± –°–∫–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç–æ—è–ª: {minutes_worked_str}\n"
            f"{moderator_info}\n"
            f"üè∑ –ì—Ä—É–ø–ø–∞: {group_name}\n"
            f"üì± –í–¶: {tg_number or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        )
    else:
        text = f"‚ùå –ù–æ–º–µ—Ä <code>{normalized_number}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –¥—Ä—É–≥–æ–≥–æ –Ω–æ–º–µ—Ä–∞", callback_data="search_number"))
    markup.add(types.InlineKeyboardButton("üîô –í –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
    
    try:
        bot.edit_message_text(
            text,
            original_chat_id,
            original_message_id,
            parse_mode='HTML',
            reply_markup=markup
        )
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        bot.send_message(
            original_chat_id,
            text,
            parse_mode='HTML',
            reply_markup=markup
        )


def check_time():
    while True:
        current_time = datetime.now().strftime("%H:%M")
        if current_time == config.CLEAR_TIME:
            clear_database()
            time.sleep(61)
        time.sleep(30)




#–ü–û–ò–°–ö –ù–û–ú–ï–†–ê –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ù–Å–ú

def run_bot():
    time_checker = threading.Thread(target=check_time)
    time_checker.daemon = True
    time_checker.start()
    bot.polling(none_stop=True, skip_pending=True)
class AdminStates(StatesGroup):
    waiting_for_number = State()


#============================

@bot.callback_query_handler(func=lambda call: call.data == "change_hold_time")
def change_hold_time_request(call):
    if call.from_user.id in config.ADMINS_ID:
        msg = bot.edit_message_text("‚è± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è —Ö–æ–ª–¥–∞ (–≤ –º–∏–Ω—É—Ç–∞—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä: 5):",
                                  call.message.chat.id,
                                  call.message.message_id)
        bot.register_next_step_handler(msg, process_change_hold_time)

def process_change_hold_time(message):
    if message.from_user.id in config.ADMINS_ID:
        try:
            new_time = int(message.text)
            if new_time <= 0:
                raise ValueError
            with db.get_db() as conn:
                cursor = conn.cursor()
                cursor.execute('UPDATE settings SET HOLD_TIME = ?', (new_time,))
                conn.commit()
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings"))
            markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
            bot.send_message(message.chat.id, f"‚úÖ –í—Ä–µ–º—è —Ö–æ–ª–¥–∞ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {new_time} –º–∏–Ω—É—Ç", reply_markup=markup)
        except ValueError:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings"))
            markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
            bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!", reply_markup=markup)



# –û–ë–´–ß–ù–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ù–û–ú–ï–†–ê:
@bot.callback_query_handler(func=lambda call: call.data.startswith("my_numbers"))
def show_my_numbers(call):
    bot.answer_callback_query(call.id)
    user_id = call.from_user.id
    db.update_last_activity(user_id)
    page = int(call.data.split("_")[2]) if len(call.data.split("_")) > 2 else 1
    numbers_per_page = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–º–µ—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT COUNT(*) FROM numbers WHERE ID_OWNER = ?', (user_id,))
        total_numbers = cursor.fetchone()[0]
        
        total_pages = max(1, (total_numbers + numbers_per_page - 1) // numbers_per_page)
        page = min(max(1, page), total_pages)
        
        offset = (page - 1) * numbers_per_page
        cursor.execute('SELECT NUMBER, STATUS, TAKE_DATE, SHUTDOWN_DATE, HOLDS_COUNT FROM numbers WHERE ID_OWNER = ? ORDER BY TAKE_DATE DESC LIMIT ? OFFSET ?', 
                      (user_id, numbers_per_page, offset))
        numbers = cursor.fetchall()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    user_price = db_module.get_user_price(user_id)
    
    numbers_text = f"üì± <b>–ú–æ–∏ –Ω–æ–º–µ—Ä–∞ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages})</b>\n\n"
    if not numbers:
        numbers_text += "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–æ–º–µ—Ä–æ–≤."
    else:
        from datetime import datetime
        current_time = datetime.now()
        
        for number, status, take_date, shutdown_date, holds_count in numbers:
            take_date_str = take_date if take_date not in ("0", "1") else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            shutdown_date_str = shutdown_date if shutdown_date != "0" else str(current_time)  # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è, –µ—Å–ª–∏ –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω
            
            # –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç—Å—Ç–æ—è
            take_time = datetime.strptime(take_date_str, "%Y-%m-%d %H:%M:%S") if take_date_str != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" else current_time
            shutdown_time = datetime.strptime(shutdown_date_str, "%Y-%m-%d %H:%M:%S") if shutdown_date != "0" else current_time
            time_held = shutdown_time - take_time
            time_held_str = f"{time_held.total_seconds() // 3600}h {(time_held.total_seconds() % 3600) // 60}m" if shutdown_date != "0" else f"{(current_time - take_time).total_seconds() // 3600}h {(current_time - take_time).total_seconds() % 3600 // 60}m"
            
            # –†–∞—Å—á–µ—Ç –≤—ã–ø–ª–∞—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ö–æ–ª–¥–æ–≤ (–º–∞–∫—Å–∏–º—É–º –∑–∞ 2 —Ö–æ–ª–¥–∞)
            payout = 0
            if status.startswith("–æ—Ç—Å—Ç–æ—è–ª"):
                holds_count = int(holds_count) if holds_count.isdigit() else 0
                payout = min(holds_count, 2) * user_price  # –ú–∞–∫—Å–∏–º—É–º 2 —Ö–æ–ª–¥–∞
            
            numbers_text += (
                f"üì± –ù–æ–º–µ—Ä: <code>{number}</code>\n"
                f"üìä –°—Ç–∞—Ç—É—Å: {status}\n"
                f"üü¢ –í–∑—è—Ç–æ: {take_date_str}\n"
                f"‚è± –°–∫–æ–ª—å–∫–æ –æ—Ç—Å—Ç–æ—è–ª: {time_held_str}\n"
                f"üí∞ –í—ã–ø–ª–∞—Ç–∞: ${payout:.2f}\n\n"
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞
            if payout > 0 and shutdown_date != "0":
                cursor.execute('UPDATE users SET BALANCE = BALANCE + ? WHERE ID = ?', (payout, user_id))
                conn.commit()
    
    markup = types.InlineKeyboardMarkup()
    if total_pages > 1:
        nav_buttons = []
        if page > 1:
            nav_buttons.append(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"my_numbers_{page-1}"))
        if page < total_pages:
            nav_buttons.append(types.InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"my_numbers_{page+1}"))
        markup.add(*nav_buttons)
    
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="profile"))
    markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    
    bot.edit_message_text(numbers_text,
                          call.message.chat.id,
                          call.message.message_id,
                          reply_markup=markup,
                          parse_mode='HTML')

def safe_send_message(chat_id, text, parse_mode=None, reply_markup=None):
    try:
        bot.send_message(chat_id, text, parse_mode=parse_mode, reply_markup=reply_markup)
    except ApiTelegramException as e:
        if e.result_json.get('error_code') == 429:
            time.sleep(1)
            safe_send_message(chat_id, text, parse_mode, reply_markup)
        else:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {chat_id}: {e}")
# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤ –±—É–¥—É—â–µ–º)
numbers_data_cache = {}



@bot.callback_query_handler(func=lambda call: call.data == "change_amount")
def change_amount_request(call):
    if call.from_user.id in config.ADMINS_ID:
        msg = bot.edit_message_text("üí∞ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã (–≤ –¥–æ–ª–ª–∞—Ä–∞—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä: 2):",
                                  call.message.chat.id,
                                  call.message.message_id)
        bot.register_next_step_handler(msg, process_change_amount)


def process_change_amount(message):
    if message.from_user.id in config.ADMINS_ID:
        try:
            new_amount = float(message.text)
            if new_amount <= 0:
                raise ValueError
            with db.get_db() as conn:
                cursor = conn.cursor()
                cursor.execute('UPDATE settings SET PRICE = ?', (new_amount,))
                conn.commit()
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings"))
            markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
            bot.send_message(message.chat.id, f"‚úÖ –°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_amount}$", reply_markup=markup)
        except ValueError:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings"))
            markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
            bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ!", reply_markup=markup)








# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–æ–¥–∞–º–∏
code_messages = {}  # {number: {"chat_id": int, "message_id": int, "timestamp": datetime, "tg_number": int, "owner_id": int}}













































@bot.callback_query_handler(func=lambda call: call.data == "submit_number")
def submit_number(call):
    user_id = call.from_user.id 
    db.update_last_activity(user_id)
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT PRICE, HOLD_TIME FROM settings')
        result = cursor.fetchone()
        price, hold_time = result if result else (2.0, 5)
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT CAN_SUBMIT_NUMBERS FROM requests WHERE ID = ?', (user_id,))
        user = cursor.fetchone()
        if user and user[0] == 0:
            bot.answer_callback_query(call.id, "üö´ –í–∞–º –∑–∞–ø—Ä–µ—â–µ–Ω–æ —Å–¥–∞–≤–∞—Ç—å –Ω–æ–º–µ—Ä–∞!")
            return
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    try:
        bot.delete_message(call.message.chat.id, call.message.message_id)
    except:
        pass
    msg = bot.send_message(
        call.message.chat.id,
        f"üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–ø–æ –æ–¥–Ω–æ–º—É –≤ —Å—Ç—Ä–æ–∫–µ):\n–ü—Ä–∏–º–µ—Ä:\n+79991234567\n79001234567\n9021234567\nüíµ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {price}$ –∑–∞ –Ω–æ–º–µ—Ä\n‚è± –•–æ–ª–¥: {hold_time} –º–∏–Ω—É—Ç",
        reply_markup=markup,
        parse_mode='HTML'
    )
    bot.register_next_step_handler(msg, process_numbers)

def process_numbers(message):
    if not message or not message.text:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üì± –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="submit_number"))
        markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main"))
        bot.send_message(
            message.chat.id,
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–∫—Å—Ç–æ–º!",
            reply_markup=markup,
            disable_notification=True
        )
        return

    numbers = message.text.strip().split('\n')
    if not numbers or all(not num.strip() for num in numbers):
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üì± –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="submit_number"))
        markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main"))
        bot.send_message(
            message.chat.id,
            "‚ùå –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞!",
            reply_markup=markup,
            disable_notification=True
        )
        return

    valid_numbers = []
    invalid_numbers = []
    used_numbers = []
    
    for number in numbers:
        number = number.strip()
        if not number:
            continue
        corrected_number = is_russian_number(number)
        if corrected_number:
            valid_numbers.append(corrected_number)
        else:
            invalid_numbers.append(number)

    if not valid_numbers:
        response_text = "‚ùå –í—Å–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–æ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79991234567, 79001234567 –∏–ª–∏ 9021234567."
        if invalid_numbers:
            response_text += "\n\n‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:\n" + "\n".join(invalid_numbers)
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üì± –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="submit_number"))
        markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main"))
        bot.send_message(
            message.chat.id,
            response_text,
            reply_markup=markup,
            parse_mode='HTML',
            disable_notification=True
        )
        return

    try:
        with db.get_db() as conn:
            cursor = conn.cursor()
            success_count = 0
            already_exists = 0
            used_count = 0
            successfully_added = []

            for number in valid_numbers:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –Ω–æ–º–µ—Ä —Ä–∞–Ω–µ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω
                    cursor.execute('SELECT NUMBER FROM numbers WHERE NUMBER = ? AND CONFIRMED_BY_MODERATOR_ID IS NOT NULL AND CONFIRMED_BY_MODERATOR_ID != 0', (number,))
                    used_number = cursor.fetchone()
                    if used_number:
                        used_numbers.append(number)
                        used_count += 1
                        continue

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å "–û—à–∏–±–∫–∞"
                    cursor.execute('SELECT STATUS FROM numbers WHERE NUMBER = ?', (number,))
                    status_result = cursor.fetchone()
                    if status_result and status_result[0] == "–û—à–∏–±–∫–∞":
                        used_numbers.append(number)
                        used_count += 1
                        continue

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–æ–º–µ—Ä –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å—è—Ö
                    cursor.execute('SELECT NUMBER, SHUTDOWN_DATE FROM numbers WHERE NUMBER = ?', (number,))
                    existing_number = cursor.fetchone()

                    if existing_number:
                        if existing_number[1] == "0":
                            already_exists += 1
                            continue
                        else:
                            cursor.execute('DELETE FROM numbers WHERE NUMBER = ?', (number,))

                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –≤ —Ç–∞–±–ª–∏—Ü—É numbers
                    cursor.execute(
                        'INSERT INTO numbers (NUMBER, ID_OWNER, TAKE_DATE, SHUTDOWN_DATE, STATUS) VALUES (?, ?, ?, ?, ?)',
                        (number, message.from_user.id, '0', '0', '–æ–∂–∏–¥–∞–µ—Ç')
                    )
                    success_count += 1
                    successfully_added.append(number)
                except sqlite3.IntegrityError:
                    already_exists += 1
                    continue
            conn.commit()

        response_text = "<b>üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–º–µ—Ä–æ–≤:</b>\n\n"
        if success_count > 0:
            response_text += f"‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {success_count} –Ω–æ–º–µ—Ä–æ–≤\n"
            response_text += "üì± –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞:\n" + "\n".join(successfully_added) + "\n"
        if already_exists > 0:
            response_text += f"‚ö†Ô∏è –£–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç: {already_exists} –Ω–æ–º–µ—Ä–æ–≤\n"
        if used_count > 0:
            response_text += f"üö´ –†–∞–Ω–µ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã –∏–ª–∏ –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ '–û—à–∏–±–∫–∞': {used_count} –Ω–æ–º–µ—Ä–æ–≤\n"
            response_text += "üì± –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–µ/–æ—à–∏–±–æ—á–Ω—ã–µ –Ω–æ–º–µ—Ä–∞:\n" + "\n".join(used_numbers) + "\n"
        if invalid_numbers:
            response_text += f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:\n" + "\n".join(invalid_numbers) + "\n"

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ process_numbers: {e}")
        response_text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üì± –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë", callback_data="submit_number"))
    markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    bot.send_message(
        message.chat.id,
        response_text,
        reply_markup=markup,
        parse_mode='HTML',
        disable_notification=True
    )


@bot.callback_query_handler(func=lambda call: call.data == "db_menu")
def db_menu_callback(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ë–î!")
        return
    
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å –ë–î (–ù–û–ú–ï–†–ê)", callback_data="download_numbers"))
    markup.add(InlineKeyboardButton("üóë –û—á–∏—Å—Ç–∏—Ç—å –ë–î (–ù–û–ú–ï–†–ê+–ë–ê–õ–ê–ù–°+–ü–†–ï–î–´)", callback_data="clear_numbers"))
    markup.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
    
    bot.edit_message_text("üóÉ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö", call.message.chat.id, call.message.message_id, reply_markup=markup)
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data == "download_numbers")
def download_numbers_callback(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ë–î!")
        return
    
    download_numbers(call.message.chat.id)
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data == "clear_numbers")
def clear_numbers_callback(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ë–î!")
        return
    
    clear_database(call.message.chat.id)
    bot.answer_callback_query(call.id, "‚úÖ –ù–æ–º–µ—Ä–∞ –∏ –±–∞–ª–∞–Ω—Å—ã –æ—á–∏—â–µ–Ω—ã!")

#–ß–ò–°–¢–ö–ê –õ–ò–ë–û –í –†–£–ß–ù–£–Æ –õ–ò–ë–û –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò –ë–ê–ó–´ –î–ê–ù–ù–´–• ( –ù–û–ú–ï–†–ê )
def clear_database(chat_id=None):
    """–û—á–∏—â–∞–µ—Ç –≤—Å–µ –Ω–æ–º–µ—Ä–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã numbers, –æ–±–Ω—É–ª—è–µ—Ç –±–∞–ª–∞–Ω—Å –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    try:
        with db.get_db() as conn:
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –Ω–æ–º–µ—Ä–∞, –∏—Å–∫–ª—é—á–∞—è –∞–¥–º–∏–Ω–æ–≤ –∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
            cursor.execute('''
                SELECT DISTINCT ID_OWNER 
                FROM numbers 
                WHERE ID_OWNER NOT IN (SELECT ID FROM personal WHERE TYPE IN ('ADMIN', 'moder'))
            ''')
            users_with_numbers = [row[0] for row in cursor.fetchall()]
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ–±–Ω—É–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
            cursor.execute('SELECT ID FROM users')
            all_users = [row[0] for row in cursor.fetchall()]
            
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–æ–º–µ—Ä–∞
            cursor.execute('DELETE FROM numbers')
            deleted_numbers = cursor.rowcount
            
            # –û–±–Ω—É–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            cursor.execute('UPDATE users SET BALANCE = 0, WARNINGS = 0')
            reset_balances = cursor.rowcount
            conn.commit()
            
            logging.info(f"–£–¥–∞–ª–µ–Ω–æ {deleted_numbers} –Ω–æ–º–µ—Ä–æ–≤, –æ–±–Ω—É–ª–µ–Ω–æ {reset_balances} –±–∞–ª–∞–Ω—Å–æ–≤ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –≤ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}.")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–æ–º–µ—Ä–∞–º–∏
            markup = InlineKeyboardMarkup()
            markup.add(InlineKeyboardButton("üì± –°–¥–∞—Ç—å –Ω–æ–º–µ—Ä", callback_data="submit_number"))
            for user_id in users_with_numbers:
                try:
                    bot.send_message(
                        user_id,
                        "üîÑ –í—Å–µ –Ω–æ–º–µ—Ä–∞ –æ—á–∏—â–µ–Ω—ã, –≤–∞—à –±–∞–ª–∞–Ω—Å –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ–±–Ω—É–ª—ë–Ω—ã.\nüì± –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–∏ –Ω–æ–º–µ—Ä–∞ —Å–Ω–æ–≤–∞.",
                        reply_markup=markup
                    )
                    logging.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                    time.sleep(0.05)
                except Exception as e:
                    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
            admin_message = (
                f"üîÑ –í—Å–µ –Ω–æ–º–µ—Ä–∞, –±–∞–ª–∞–Ω—Å—ã –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã.\n"
                f"üóë –£–¥–∞–ª–µ–Ω–æ {deleted_numbers} –Ω–æ–º–µ—Ä–æ–≤.\n"
                f"üí∏ –û–±–Ω—É–ª–µ–Ω–æ {reset_balances} –±–∞–ª–∞–Ω—Å–æ–≤ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π."
            )
            for admin_id in config.ADMINS_ID:
                try:
                    bot.send_message(admin_id, admin_message)
                    logging.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É {admin_id}")
                    time.sleep(0.05)
                except Exception as e:
                    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
            
            # –ï—Å–ª–∏ –æ—á–∏—Å—Ç–∫–∞ –≤—ã–∑–≤–∞–Ω–∞ –∞–¥–º–∏–Ω–æ–º, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            if chat_id:
                bot.send_message(
                    chat_id,
                    f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ –Ω–æ–º–µ—Ä–æ–≤, –±–∞–ª–∞–Ω—Å—ã –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã.\n"
                    f"üóë –£–¥–∞–ª–µ–Ω–æ {deleted_numbers} –Ω–æ–º–µ—Ä–æ–≤.\n"
                    f"üí∏ –û–±–Ω—É–ª–µ–Ω–æ {reset_balances} –±–∞–ª–∞–Ω—Å–æ–≤ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π."
                )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–∞–±–ª–∏—Ü—ã numbers –∏–ª–∏ –æ–±–Ω—É–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–æ–≤/–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {e}")
        if chat_id:
            bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –Ω–æ–º–µ—Ä–æ–≤, –±–∞–ª–∞–Ω—Å–æ–≤ –∏–ª–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π.")

def download_numbers(chat_id):
    """–°–æ–∑–¥–∞—ë—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã numbers."""
    try:
        with get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT * FROM numbers')
            rows = cursor.fetchall()
            
            if not rows:
                bot.send_message(chat_id, "üì≠ –¢–∞–±–ª–∏—Ü–∞ –Ω–æ–º–µ—Ä–æ–≤ –ø—É—Å—Ç–∞.")
                return
            
            # –°–æ–∑–¥–∞—ë–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç–∏
            output = io.StringIO()
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
            columns = [desc[0] for desc in cursor.description]
            output.write(','.join(columns) + '\n')
            # –î–∞–Ω–Ω—ã–µ
            for row in rows:
                output.write(','.join(str(val) if val is not None else '' for val in row) + '\n')
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            output.seek(0)
            file_content = output.getvalue().encode('utf-8')
            file = io.BytesIO(file_content)
            file.name = 'numbers.txt'
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞
            bot.send_document(chat_id, file, caption="üìÑ –î–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –Ω–æ–º–µ—Ä–æ–≤")
            logging.info(f"–§–∞–π–ª numbers.txt –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É {chat_id}")
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã numbers: {e}")
        bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –Ω–æ–º–µ—Ä–æ–≤.")

def schedule_clear_database():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ç–∞–±–ª–∏—Ü—ã numbers –∏ –æ–±–Ω—É–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è."""
    schedule.every().day.at(config.CLEAR_TIME).do(clear_database)
    logging.info(f"–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –Ω–æ–º–µ—Ä–æ–≤ –∏ –±–∞–ª–∞–Ω—Å–æ–≤ –≤ {config.CLEAR_TIME}")

    def run_scheduler():
        while True:
            schedule.run_pending()
            time.sleep(60)

    scheduler_thread = threading.Thread(target=run_scheduler, daemon=True)
    scheduler_thread.start()
    logging.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—á–∏—Å—Ç–∫–∏ –∑–∞–ø—É—â–µ–Ω.")




#=============================================================================================================





@bot.callback_query_handler(func=lambda call: call.data == "Gv")
def settingssss(data):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤—Ö–æ–¥–Ω–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä callback (call) –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ–º (message)
    is_callback = hasattr(data, 'message')
    user_id = data.from_user.id
    chat_id = data.message.chat.id if is_callback else data.chat.id
    message_id = data.message.message_id if is_callback else data.message_id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if user_id not in config.ADMINS_ID:
        if is_callback:
            bot.answer_callback_query(data.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!")
        else:
            bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!", parse_mode='HTML')
        return
    
    # –û—á–∏—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ–π —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
    bot.clear_step_handler_by_chat_id(chat_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –º–µ–Ω—é
    menu_text = "üìã <b>–ú–µ–Ω—é:</b>"
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ê–§–ö", callback_data="afk_settings"))
    markup.add(types.InlineKeyboardButton("üí∏ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞", callback_data="change_price"))
    markup.add(types.InlineKeyboardButton("üì§ –í—ã—Å–ª–∞—Ç—å –≤—Å–µ–º —á–µ–∫–∏", callback_data="send_all_checks"))
    markup.add(types.InlineKeyboardButton("üìú –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–ª–æ–≤–µ–∫—É —á–µ–∫", callback_data="send_check"))
    markup.add(types.InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –Ω–æ–º–µ—Ä —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="delete_number"))
    markup.add(types.InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –Ω–æ–º–µ—Ä–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="delete_all_numbers"))
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –≤—ã–∑–æ–≤–∞
    try:
        if is_callback:
            bot.edit_message_text(
                menu_text,
                chat_id,
                message_id,
                parse_mode='HTML',
                reply_markup=markup
            )
        else:
            bot.send_message(
                chat_id,
                menu_text,
                parse_mode='HTML',
                reply_markup=markup
            )
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        bot.send_message(
            chat_id,
            menu_text,
            parse_mode='HTML',
            reply_markup=markup
        )

@bot.callback_query_handler(func=lambda call: call.data == "delete_number")
def delete_number_request(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!")
        return
    
    bot.clear_step_handler_by_chat_id(call.message.chat.id)
    msg = bot.edit_message_text(
        "üì± –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ: <ID> <–Ω–æ–º–µ—Ä>, –Ω–∞–ø—Ä–∏–º–µ—Ä: 123456 +79991234567):",
        call.message.chat.id,
        call.message.message_id,
        parse_mode='HTML'
    )
    bot.register_next_step_handler(msg, process_delete_number, call.message.chat.id, msg.message_id)

def process_delete_number(message, original_chat_id, original_message_id):
    if message.from_user.id not in config.ADMINS_ID:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞
    try:
        user_id, number = message.text.strip().split()
        user_id = int(user_id)
        number = is_russian_number(number)
        if not number:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞")
    except ValueError:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîç –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="delete_number"))
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="Gv"))
        bot.send_message(
            message.chat.id,
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 123456 +79991234567)",
            reply_markup=markup,
            parse_mode='HTML'
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –Ω–æ–º–µ—Ä
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT NUMBER FROM numbers WHERE NUMBER = ? AND ID_OWNER = ?', (number, user_id))
        if not cursor.fetchone():
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîç –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="delete_number"))
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="Gv"))
            bot.send_message(
                message.chat.id,
                f"‚ùå –ù–æ–º–µ—Ä <code>{number}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id}!",
                reply_markup=markup,
                parse_mode='HTML'
            )
            return
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–≤–µ–¥—ë–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    try:
        bot.delete_message(message.chat.id, message.message_id)
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_delete_number_{user_id}_{number}"),
        types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="Gv")
    )
    bot.edit_message_text(
        f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –Ω–æ–º–µ—Ä <code>{number}</code> —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id}?",
        original_chat_id,
        original_message_id,
        parse_mode='HTML',
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith("confirm_delete_number_"))
def confirm_delete_number(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!")
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏ number –∏–∑ callback_data
    try:
        _, _, user_id, number = call.data.split("_", 3)
        user_id = int(user_id)
    except ValueError:
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö!")
        return
    
    # –£–¥–∞–ª—è–µ–º –Ω–æ–º–µ—Ä –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('DELETE FROM numbers WHERE NUMBER = ? AND ID_OWNER = ?', (number, user_id))
        conn.commit()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîç –£–¥–∞–ª–∏—Ç—å –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä", callback_data="delete_number"))
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="Gv"))
    bot.edit_message_text(
        f"‚úÖ –ù–æ–º–µ—Ä <code>{number}</code> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id}!",
        call.message.chat.id,
        call.message.message_id,
        parse_mode='HTML',
        reply_markup=markup
    )
    bot.answer_callback_query(call.id, "–ù–æ–º–µ—Ä —É–¥–∞–ª—ë–Ω!")

@bot.callback_query_handler(func=lambda call: call.data == "delete_all_numbers")
def delete_all_numbers_request(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!")
        return
    
    bot.clear_step_handler_by_chat_id(call.message.chat.id)
    msg = bot.edit_message_text(
        "üë§ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –µ–≥–æ –Ω–æ–º–µ—Ä–æ–≤:",
        call.message.chat.id,
        call.message.message_id,
        parse_mode='HTML'
    )
    bot.register_next_step_handler(msg, process_delete_all_numbers, call.message.chat.id, msg.message_id)

def process_delete_all_numbers(message, original_chat_id, original_message_id):
    if message.from_user.id not in config.ADMINS_ID:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞
    try:
        user_id = int(message.text.strip())
    except ValueError:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîç –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="delete_all_numbers"))
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="Gv"))
        bot.send_message(
            message.chat.id,
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 123456)",
            reply_markup=markup,
            parse_mode='HTML'
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–æ–º–µ—Ä–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT COUNT(*) FROM numbers WHERE ID_OWNER = ?', (user_id,))
        count = cursor.fetchone()[0]
        if count == 0:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîç –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="delete_all_numbers"))
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="Gv"))
            bot.send_message(
                message.chat.id,
                f"‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id} –Ω–µ—Ç –Ω–æ–º–µ—Ä–æ–≤!",
                reply_markup=markup,
                parse_mode='HTML'
            )
            return
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–≤–µ–¥—ë–Ω–Ω—ã–º ID
    try:
        bot.delete_message(message.chat.id, message.message_id)
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_delete_all_numbers_{user_id}"),
        types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="Gv")
    )
    bot.edit_message_text(
        f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï –Ω–æ–º–µ—Ä–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id}? (–ù–∞–π–¥–µ–Ω–æ {count} –Ω–æ–º–µ—Ä–æ–≤)",
        original_chat_id,
        original_message_id,
        parse_mode='HTML',
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith("confirm_delete_all_numbers_"))
def confirm_delete_all_numbers(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!")
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏–∑ callback_data
    try:
        _, _, user_id = call.data.split("_", 2)
        user_id = int(user_id)
    except ValueError:
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö!")
        return
    
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–æ–º–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('DELETE FROM numbers WHERE ID_OWNER = ?', (user_id,))
        deleted_count = cursor.rowcount
        conn.commit()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîç –£–¥–∞–ª–∏—Ç—å –Ω–æ–º–µ—Ä–∞ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="delete_all_numbers"))
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="Gv"))
    bot.edit_message_text(
        f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted_count} –Ω–æ–º–µ—Ä–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id}!",
        call.message.chat.id,
        call.message.message_id,
        parse_mode='HTML',
        reply_markup=markup
    )
    bot.answer_callback_query(call.id, "–í—Å–µ –Ω–æ–º–µ—Ä–∞ —É–¥–∞–ª–µ–Ω—ã!")

#–í—ã–¥–∞—Ç—å —á–µ–∫
@bot.callback_query_handler(func=lambda call: call.data == "send_check")
def send_check_start(call):
    user_id = call.from_user.id
    
    if user_id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!")
        return
    
    text = "üìù <b>–£–∫–∞–∂–∏—Ç–µ user ID –∏–ª–∏ @username</b> (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ reply –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ):"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="Gv"))
    
    try:
        msg = bot.edit_message_text(
            text,
            call.message.chat.id,
            call.message.message_id,
            parse_mode='HTML',
            reply_markup=markup
        )
        bot.register_next_step_handler(msg, process_user_id_for_check, call.message.chat.id, call.message.message_id)
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        msg = bot.send_message(
            call.message.chat.id,
            text,
            parse_mode='HTML',
            reply_markup=markup
        )
        bot.register_next_step_handler(msg, process_user_id_for_check, call.message.chat.id, msg.message_id)

def process_user_id_for_check(message, original_chat_id, original_message_id):
    user_id = message.from_user.id
    
    if user_id not in config.ADMINS_ID:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!", parse_mode='HTML')
        return
    
    if not message.reply_to_message:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîç –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="send_check"))
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="Gv"))
        bot.send_message(
            message.chat.id,
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ reply –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ user ID –∏–ª–∏ @username!",
            reply_markup=markup,
            parse_mode='HTML'
        )
        return
    
    input_text = message.text.strip()
    target_user_id = None
    username = None
    
    if input_text.startswith('@'):
        username = input_text[1:]
        print(f"[DEBUG] Processing username: {username}")
        with db_module.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT ID FROM users WHERE LOWER(USERNAME) = ?', (username.lower(),))
            user = cursor.fetchone()
            if user:
                target_user_id = user[0]
                print(f"[DEBUG] Found user ID {target_user_id} for username {username}")
            else:
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("üîç –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="send_check"))
                markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="Gv"))
                bot.send_message(
                    message.chat.id,
                    f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å @username '{username}' –Ω–µ –Ω–∞–π–¥–µ–Ω!",
                    reply_markup=markup,
                    parse_mode='HTML'
                )
                return
    else:
        try:
            target_user_id = int(input_text)
            print(f"[DEBUG] Processing user ID: {target_user_id}")
        except ValueError:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîç –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="send_check"))
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="Gv"))
            bot.send_message(
                message.chat.id,
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –∏–ª–∏ @username.",
                reply_markup=markup,
                parse_mode='HTML'
            )
            return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –ø–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å
    with db_module.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT ID, BALANCE, USERNAME FROM users WHERE ID = ?', (target_user_id,))
        user = cursor.fetchone()
        if not user:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîç –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="send_check"))
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="Gv"))
            bot.send_message(
                message.chat.id,
                f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω!",
                reply_markup=markup,
                parse_mode='HTML'
            )
            return
        target_user_id, balance, username = user
        print(f"{target_user_id}: —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å={balance}, username={username}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–∞–ª–∞–Ω—Å –±–æ–ª—å—à–µ 0
    if balance <= 0:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîç –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="send_check"))
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="Gv"))
        bot.send_message(
            message.chat.id,
            f"‚ùå –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} ({username if username else '–ù–µ—Ç username'}) —Ä–∞–≤–µ–Ω {balance:.2f} $. –ß–µ–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω!",
            reply_markup=markup,
            parse_mode='HTML'
        )
        return
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å user ID
    try:
        bot.delete_message(message.chat.id, message.message_id)
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å user ID: {e}")
    
    # –°–ø–∏—Å—ã–≤–∞–µ–º –≤–µ—Å—å –±–∞–ª–∞–Ω—Å –¥–æ 0.0 —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π
    with db_lock:
        with db_module.get_db() as conn:
            cursor = conn.cursor()
            # –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–µ—Ä–µ–¥ —Å–ø–∏—Å–∞–Ω–∏–µ–º
            cursor.execute('SELECT BALANCE FROM users WHERE ID = ?', (target_user_id,))
            user = cursor.fetchone()
            print(f"[DEBUG] –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}: {user[0] if user else '–Ω–µ –Ω–∞–π–¥–µ–Ω'}")
            if not user or user[0] <= 0:
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("üîç –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="send_check"))
                markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="Gv"))
                bot.send_message(
                    original_chat_id,
                    f"‚ùå –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} —Ä–∞–≤–µ–Ω {user[0]:.2f} $. –ß–µ–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω!",
                    reply_markup=markup,
                    parse_mode='HTML'
                )
                return
            
            amount = round(float(user[0]), 2)  # –û–∫—Ä—É–≥–ª—è–µ–º –±–∞–ª–∞–Ω—Å –¥–æ 2 –∑–Ω–∞–∫–æ–≤
            print(f"[DEBUG] –°–æ–∑–¥–∞–Ω–∏–µ —á–µ–∫–∞ –Ω–∞ —Å—É–º–º—É {amount:.2f} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}")
            
            # –û–±–Ω—É–ª—è–µ–º –±–∞–ª–∞–Ω—Å
            print(f"[DEBUG] –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è UPDATE –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}, —É—Å—Ç–∞–Ω–æ–≤–∫–∞ BALANCE = 0")
            cursor.execute('UPDATE users SET BALANCE = 0 WHERE ID = ?', (target_user_id,))
            if cursor.rowcount == 0:
                print(f"[ERROR] UPDATE –Ω–µ –∑–∞—Ç—Ä–æ–Ω—É–ª —Å—Ç—Ä–æ–∫–∏: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –±–∞–ª–∞–Ω—Å –Ω–µ –∏–∑–º–µ–Ω—ë–Ω")
                bot.send_message(
                    original_chat_id,
                    f"‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω—É–ª–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}.",
                    parse_mode='HTML'
                )
                return
            cursor.execute('SELECT BALANCE FROM users WHERE ID = ?', (target_user_id,))
            new_balance = cursor.fetchone()[0]
            print(f"[DEBUG] –ü–µ—Ä–µ–¥ —Ñ–∏–∫—Å–∞—Ü–∏–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å={new_balance:.2f}")
            conn.commit()
            print(f"[DEBUG] –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞: –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} –æ–±–Ω—É–ª—ë–Ω, –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance:.2f}")
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ—Å–ª–µ —Ñ–∏–∫—Å–∞—Ü–∏–∏
            cursor.execute('SELECT BALANCE FROM users WHERE ID = ?', (target_user_id,))
            verified_balance = cursor.fetchone()[0]
            print(f"[DEBUG] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ —Ñ–∏–∫—Å–∞—Ü–∏–∏: –±–∞–ª–∞–Ω—Å={verified_balance:.2f}")
            if verified_balance != 0.0:
                print(f"[ERROR] –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ—Å–ª–µ —Ñ–∏–∫—Å–∞—Ü–∏–∏: –æ–∂–∏–¥–∞–ª–æ—Å—å 0.0, –ø–æ–ª—É—á–µ–Ω–æ {verified_balance:.2f}")
    
    # –°–æ–∑–¥–∞—ë–º —á–µ–∫ —á–µ—Ä–µ–∑ CryptoBot API
    crypto_api = crypto_pay.CryptoPay()
    cheque_result = crypto_api.create_check(
        amount=str(amount),
        asset="USDT",
        description=f"–í—ã–ø–ª–∞—Ç–∞ –≤—Å–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}",
        pin_to_user_id=target_user_id
    )
    print(f"[DEBUG] –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–∫–∞: {cheque_result}")
    
    if cheque_result.get("ok", False):
        cheque = cheque_result.get("result", {})
        cheque_link = cheque.get("bot_check_url", "")
        
        if cheque_link:
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∫–∞–∑–Ω—ã
            try:
                db_module.update_treasury_balance(-amount)
                print(f"[DEBUG] –ë–∞–ª–∞–Ω—Å –∫–∞–∑–Ω—ã —É–º–µ–Ω—å—à–µ–Ω –Ω–∞ {amount:.2f}")
            except Exception as treasury_error:
                print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –∫–∞–∑–Ω—ã: {treasury_error}")
                bot.send_message(
                    original_chat_id,
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –∫–∞–∑–Ω—ã: {str(treasury_error)}.",
                    parse_mode='HTML'
                )
                return
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            markup_user = types.InlineKeyboardMarkup()
            markup_user.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile"))
            try:
                safe_send_message(
                    target_user_id,
                    f"‚úÖ –í–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ–∫ –Ω–∞ {amount:.2f}$ (–≤–µ—Å—å –≤–∞—à –±–∞–ª–∞–Ω—Å)!\n"
                    f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —á–µ–∫: {cheque_link}\n"
                    f"üí∞ –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance:.2f}$",
                    parse_mode='HTML',
                    reply_markup=markup_user
                )
                print(f"[DEBUG] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}")
            except Exception as notify_error:
                print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {notify_error}")
                bot.send_message(
                    original_chat_id,
                    f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}: {notify_error}",
                    parse_mode='HTML'
                )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            username_display = f"@{username}" if username and username != "–ù–µ —É–∫–∞–∑–∞–Ω" else "–ù–µ—Ç username"
            markup_admin = types.InlineKeyboardMarkup()
            markup_admin.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –∑–∞—è–≤–∫–∏", callback_data="pending_withdrawals"))
            try:
                bot.edit_message_text(
                    f"‚úÖ –ß–µ–∫ –Ω–∞ {amount:.2f}$ (–≤–µ—Å—å –±–∞–ª–∞–Ω—Å) —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id} ({username_display}).\n"
                    f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {new_balance:.2f}$",
                    original_chat_id,
                    original_message_id,
                    parse_mode='HTML',
                    reply_markup=markup_admin
                )
            except Exception as e:
                print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
                bot.send_message(
                    original_chat_id,
                    f"‚úÖ –ß–µ–∫ –Ω–∞ {amount:.2f}$ (–≤–µ—Å—å –±–∞–ª–∞–Ω—Å) —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id} ({username_display}).\n"
                    f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {new_balance:.2f}$",
                    parse_mode='HTML',
                    reply_markup=markup_admin
                )
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
            try:
                db_module.log_treasury_operation("–í—ã–≤–æ–¥ (—á–µ–∫ –Ω–∞ –≤–µ—Å—å –±–∞–ª–∞–Ω—Å)", -amount, db_module.get_treasury_balance())
                print(f"[DEBUG] –û–ø–µ—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∞: –í—ã–≤–æ–¥ (—á–µ–∫) –Ω–∞ {amount:.2f}$")
            except Exception as log_error:
                print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏: {log_error}")
        else:
            print("[ERROR] –°—Å—ã–ª–∫–∞ –Ω–∞ —á–µ–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            bot.send_message(
                original_chat_id,
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á–µ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}: –Ω–µ—Ç —Å—Å—ã–ª–∫–∏.",
                parse_mode='HTML'
            )
    else:
        error_msg = cheque_result.get('error', {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–µ–∫–∞: {error_msg}")
        bot.send_message(
            original_chat_id,
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–µ–∫–∞: {error_msg}",
            parse_mode='HTML'
        )
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
    menu_text = "üìã <b>–ú–µ–Ω—é:</b>"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ê–§–ö", callback_data="afk_settings"))
    markup.add(types.InlineKeyboardButton("üí∏ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞", callback_data="change_price"))
    markup.add(types.InlineKeyboardButton("üì§ –í—ã—Å–ª–∞—Ç—å –≤—Å–µ–º —á–µ–∫–∏", callback_data="send_all_checks"))
    markup.add(types.InlineKeyboardButton("üìú –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–ª–æ–≤–µ–∫—É —á–µ–∫", callback_data="send_check"))
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile"))
    
    try:
        bot.edit_message_text(
            menu_text,
            original_chat_id,
            original_message_id,
            parse_mode='HTML',
            reply_markup=markup
        )
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        bot.send_message(
            original_chat_id,
            menu_text,
            parse_mode='HTML',
            reply_markup=markup
        )

def process_check_amount(message, target_user_id, original_chat_id, original_message_id, current_balance, username_display):
    user_id = message.from_user.id
    
    if user_id not in config.ADMINS_ID:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!", parse_mode='HTML')
        return
    
    if not message.reply_to_message:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîç –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="send_check"))
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="Gv"))
        bot.send_message(
            message.chat.id,
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ reply –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã!",
            reply_markup=markup,
            parse_mode='HTML'
        )
        return
    
    try:
        amount = float(message.text.strip())
        if amount <= 0:
            raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
    except ValueError:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîç –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="send_check"))
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="Gv"))
        bot.send_message(
            message.chat.id,
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã! –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10.5).",
            reply_markup=markup,
            parse_mode='HTML'
        )
        return
    
    # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—É–º–º—É —Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π
    with db_lock:
        with db_module.get_db() as conn:
            cursor = conn.cursor()
            # –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–µ—Ä–µ–¥ —Å–ø–∏—Å–∞–Ω–∏–µ–º
            cursor.execute('SELECT BALANCE FROM users WHERE ID = ?', (target_user_id,))
            user = cursor.fetchone()
            print(f"[DEBUG] –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}: {user[0] if user else '–Ω–µ –Ω–∞–π–¥–µ–Ω'}")
            if not user or user[0] < amount:
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("üîç –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="send_check"))
                markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="Gv"))
                bot.send_message(
                    message.chat.id,
                    f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}! –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user[0] if user else 0} $",
                    reply_markup=markup,
                    parse_mode='HTML'
                )
                return
            
            # –£–º–µ–Ω—å—à–∞–µ–º –±–∞–ª–∞–Ω—Å
            print(f"[DEBUG] –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è UPDATE –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}, —É–º–µ–Ω—å—à–µ–Ω–∏–µ –Ω–∞ {amount}")
            cursor.execute('UPDATE users SET BALANCE = BALANCE - ? WHERE ID = ?', (amount, target_user_id))
            if cursor.rowcount == 0:
                print(f"[ERROR] UPDATE –Ω–µ –∑–∞—Ç—Ä–æ–Ω—É–ª —Å—Ç—Ä–æ–∫–∏: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –±–∞–ª–∞–Ω—Å –Ω–µ –∏–∑–º–µ–Ω—ë–Ω")
                bot.send_message(
                    message.chat.id,
                    f"‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}.",
                    parse_mode='HTML'
                )
                return
            cursor.execute('SELECT BALANCE FROM users WHERE ID = ?', (target_user_id,))
            new_balance = cursor.fetchone()[0]
            print(f"[DEBUG] –ü–µ—Ä–µ–¥ —Ñ–∏–∫—Å–∞—Ü–∏–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å={new_balance}")
            conn.commit()
            print(f"[DEBUG] –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞: –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} —É–º–µ–Ω—å—à–µ–Ω –Ω–∞ {amount}$, –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}")
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ—Å–ª–µ —Ñ–∏–∫—Å–∞—Ü–∏–∏
            cursor.execute('SELECT BALANCE FROM users WHERE ID = ?', (target_user_id,))
            verified_balance = cursor.fetchone()[0]
            print(f"[DEBUG] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ —Ñ–∏–∫—Å–∞—Ü–∏–∏: –±–∞–ª–∞–Ω—Å={verified_balance}")
            if verified_balance != new_balance:
                print(f"[ERROR] –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ—Å–ª–µ —Ñ–∏–∫—Å–∞—Ü–∏–∏: –æ–∂–∏–¥–∞–ª–æ—Å—å {new_balance}, –ø–æ–ª—É—á–µ–Ω–æ {verified_balance}")
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—É–º–º–æ–π
    try:
        bot.delete_message(message.chat.id, message.message_id)
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—É–º–º–æ–π: {e}")
    
    # –°–æ–∑–¥–∞—ë–º —á–µ–∫ —á–µ—Ä–µ–∑ CryptoBot API
    crypto_api = crypto_pay.CryptoPay()
    cheque_result = crypto_api.create_check(
        amount=amount,
        asset="USDT",
        description=f"–í—ã–ø–ª–∞—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}",
        pin_to_user_id=target_user_id
    )
    print(f"[DEBUG] –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–∫–∞: {cheque_result}")
    
    if cheque_result.get("ok", False):
        cheque = cheque_result.get("result", {})
        cheque_link = cheque.get("bot_check_url", "")
        
        if cheque_link:
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∫–∞–∑–Ω—ã
            try:
                db_module.update_treasury_balance(-amount)
                print(f"[DEBUG] –ë–∞–ª–∞–Ω—Å –∫–∞–∑–Ω—ã —É–º–µ–Ω—å—à–µ–Ω –Ω–∞ {amount}")
            except Exception as treasury_error:
                print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –∫–∞–∑–Ω—ã: {treasury_error}")
                bot.send_message(
                    original_chat_id,
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –∫–∞–∑–Ω—ã: {str(treasury_error)}.",
                    parse_mode='HTML'
                )
                return
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            markup_user = types.InlineKeyboardMarkup()
            markup_user.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile"))
            try:
                safe_send_message(
                    target_user_id,
                    f"‚úÖ –í–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ–∫ –Ω–∞ {amount}$!\n"
                    f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —á–µ–∫: {cheque_link}\n"
                    f"üí∞ –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}$",
                    parse_mode='HTML',
                    reply_markup=markup_user
                )
                print(f"[DEBUG] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}")
            except Exception as notify_error:
                print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {notify_error}")
                bot.send_message(
                    original_chat_id,
                    f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}: {notify_error}",
                    parse_mode='HTML'
                )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            markup_admin = types.InlineKeyboardMarkup()
            markup_admin.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –∑–∞—è–≤–∫–∏", callback_data="pending_withdrawals"))
            try:
                bot.edit_message_text(
                    f"‚úÖ –ß–µ–∫ –Ω–∞ {amount}$ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id} ({username_display}).\n"
                    f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {new_balance}$",
                    original_chat_id,
                    original_message_id,
                    parse_mode='HTML',
                    reply_markup=markup_admin
                )
            except Exception as e:
                print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
                bot.send_message(
                    original_chat_id,
                    f"‚úÖ –ß–µ–∫ –Ω–∞ {amount}$ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id} ({username_display}).\n"
                    f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {new_balance}$",
                    parse_mode='HTML',
                    reply_markup=markup_admin
                )
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
            try:
                db_module.log_treasury_operation("–í—ã–≤–æ–¥ (—á–µ–∫)", -amount, db_module.get_treasury_balance())
                print(f"[DEBUG] –û–ø–µ—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∞: –í—ã–≤–æ–¥ (—á–µ–∫) –Ω–∞ {amount}$")
            except Exception as log_error:
                print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏: {log_error}")
        else:
            print("[ERROR] –°—Å—ã–ª–∫–∞ –Ω–∞ —á–µ–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            bot.send_message(
                original_chat_id,
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á–µ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}: –Ω–µ—Ç —Å—Å—ã–ª–∫–∏.",
                parse_mode='HTML'
            )
    else:
        error_msg = cheque_result.get('error', {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–µ–∫–∞: {error_msg}")
        bot.send_message(
            original_chat_id,
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–µ–∫–∞: {error_msg}",
            parse_mode='HTML'
        )
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
    menu_text = "üìã <b>–ú–µ–Ω—é:</b>"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ê–§–ö", callback_data="afk_settings"))
    markup.add(types.InlineKeyboardButton("üí∏ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞", callback_data="change_price"))
    markup.add(types.InlineKeyboardButton("üì§ –í—ã—Å–ª–∞—Ç—å –≤—Å–µ–º —á–µ–∫–∏", callback_data="send_all_checks"))
    markup.add(types.InlineKeyboardButton("üìú –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–ª–æ–≤–µ–∫—É —á–µ–∫", callback_data="send_check"))
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile"))
    
    try:
        bot.edit_message_text(
            menu_text,
            original_chat_id,
            original_message_id,
            parse_mode='HTML',
            reply_markup=markup
        )
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        bot.send_message(
            original_chat_id,
            menu_text,
            parse_mode='HTML',
            reply_markup=markup
        )

#–ò–ó–ú–ï–ù–ò–¢ –¶–ï–ù–£:
# bot.py
@bot.callback_query_handler(func=lambda call: call.data == "change_price")
def change_price_start(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!")
        return
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="Gv"))

    msg = bot.edit_message_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ @username, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é —Ü–µ–Ω—É (–æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ):",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup
    )
    bot.register_next_step_handler(msg, process_user_id_for_price)

def process_user_id_for_price(message):
    if message.from_user.id not in config.ADMINS_ID:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!")
        return
    
    input_text = message.text.strip()
    user_id = None
    username = None
    
    if input_text.startswith('@'):
        username = input_text[1:]  # –£–±–∏—Ä–∞–µ–º @ (–Ω–∞–ø—Ä–∏–º–µ—Ä, Devshop19)
        print(f"[DEBUG] Processing username: {username}")
        with get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT ID FROM users WHERE LOWER(USERNAME) = ?', (username.lower(),))
            user = cursor.fetchone()
            if user:
                user_id = user[0]
                print(f"[DEBUG] Found user ID {user_id} for username {username}")
            else:
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="Gv"))
                bot.send_message(message.chat.id, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å @username '{username}' –Ω–µ –Ω–∞–π–¥–µ–Ω!", reply_markup=markup)
                return
    else:
        try:
            user_id = int(input_text)
            print(f"[DEBUG] Processing user ID: {user_id}")
        except ValueError:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="Gv"))
            bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –∏–ª–∏ @username.", reply_markup=markup)
            return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    with get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT ID FROM users WHERE ID = ?', (user_id,))
        if not cursor.fetchone():
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="Gv"))
            bot.send_message(message.chat.id, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω!", reply_markup=markup)
            return
    
    msg = bot.send_message(
        message.chat.id,
        f"üíµ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É (–≤ $) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (–æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ):"
    )
    bot.register_next_step_handler(msg, process_price, user_id)

def process_price(message, user_id):
    if message.from_user.id not in config.ADMINS_ID:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!")
        return
    
    try:
        price = float(message.text.strip())
        if price <= 0:
            raise ValueError("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!")
        
        db_module.set_custom_price(user_id, price)
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="Gv"))
        bot.send_message(
            message.chat.id,
            f"‚úÖ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {price}$",
            reply_markup=markup
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            bot.send_message(
                user_id,
                f"üíµ –í–∞—à–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞ –Ω–æ–º–µ—Ä –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {price}$!"
            )
        except Exception as e:
            print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            
    except ValueError as e:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", reply_markup=markup)


# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
AFK_STATE = {}

@bot.callback_query_handler(func=lambda call: call.data == "afk_settings")
def afk_settings(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ê–§–ö!")
        return
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="Gv"))
    
    msg = bot.edit_message_text(
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ê–§–ö</b>\n\n–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ @username –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –µ–≥–æ –ê–§–ö-—Å—Ç–∞—Ç—É—Å–æ–º:",
        call.message.chat.id,
        call.message.message_id,
        parse_mode='HTML',
        reply_markup=markup
    )
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    AFK_STATE[call.from_user.id] = {"step": "awaiting_user_id", "message_id": msg.message_id}
    bot.register_next_step_handler(msg, process_afk_user_id)

def process_afk_user_id(message):
    admin_id = message.from_user.id
    if admin_id not in AFK_STATE or AFK_STATE[admin_id]["step"] != "awaiting_user_id":
        print(f"[DEBUG] Invalid state for admin_id {admin_id}: {AFK_STATE.get(admin_id)}")
        return

    if message.from_user.id not in config.ADMINS_ID:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!")
        return

    input_text = message.text.strip()
    print(f"[DEBUG] Input text: '{input_text}'")

    target_user_id = None
    username = None
    if input_text.startswith('@'):
        username = input_text[1:]  # –£–±–∏—Ä–∞–µ–º @ (–Ω–∞–ø—Ä–∏–º–µ—Ä, Devshop19)
        print(f"[DEBUG] Processing username: {username}")
    else:
        try:
            target_user_id = int(input_text)
            print(f"[DEBUG] Processing user ID: {target_user_id}")
        except ValueError:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="afk_settings"))
            bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –∏–ª–∏ @username.", reply_markup=markup)
            bot.register_next_step_handler(message, process_afk_user_id)
            return

    if username:
        with db.get_db() as conn:
            cursor = conn.cursor()
            # –û—Ç–ª–∞–¥–∫–∞: –≤—ã–≤–æ–¥–∏–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            cursor.execute('SELECT ID, USERNAME FROM users')
            all_users = cursor.fetchall()
            print(f"[DEBUG] All users in DB: {all_users}")
            
            # –ü–æ–∏—Å–∫ –±–µ–∑ —É—á—ë—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞
            cursor.execute('SELECT ID FROM users WHERE LOWER(USERNAME) = ?', (username.lower(),))
            user = cursor.fetchone()
            if user:
                target_user_id = user[0]
                print(f"[DEBUG] Found user ID {target_user_id} for username {username}")
            else:
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="afk_settings"))
                bot.send_message(message.chat.id, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å @username '{username}' –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=markup)
                bot.register_next_step_handler(message, process_afk_user_id)
                print(f"[DEBUG] Username {username} not found in DB")
                return

    try:
        with db.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT IS_AFK, AFK_LOCKED, USERNAME FROM users WHERE ID = ?', (target_user_id,))
            user = cursor.fetchone()
            if not user:
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="afk_settings"))
                bot.send_message(message.chat.id, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=markup)
                bot.register_next_step_handler(message, process_afk_user_id)
                return
            
            is_afk, afk_locked, username = user
            print(f"[DEBUG] User {target_user_id}: IS_AFK={is_afk}, AFK_LOCKED={afk_locked}, USERNAME={username}")
            afk_status_text = "–í–∫–ª—é—á—ë–Ω" if is_afk else "–í—ã–∫–ª—é—á–µ–Ω"
            
            username_display = f"@{username}" if username and username != "–ù–µ —É–∫–∞–∑–∞–Ω" else "–ù–µ—Ç username"
            username_text = f"üë§ Username: <a href=\"tg://user?id={target_user_id}\">{username_display}</a>\n" if username and username != "–ù–µ —É–∫–∞–∑–∞–Ω" else "üë§ Username: –ù–µ—Ç username\n"
            
            markup = types.InlineKeyboardMarkup()
            markup.add(
                types.InlineKeyboardButton("üü¢ –í–∫–ª—é—á–∏—Ç—å –ê–§–ö", callback_data=f"admin_enable_afk_{target_user_id}"),
                types.InlineKeyboardButton("üî¥ –í—ã–∫–ª—é—á–∏—Ç—å –ê–§–ö", callback_data=f"admin_disable_afk_{target_user_id}")
            )
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="afk_settings"))
            
            bot.send_message(
                message.chat.id,
                f"üë§ <b>User ID:</b> {target_user_id}\n"
                f"{username_text}"
                f"üîî <b>–ê–§–ö –°—Ç–∞—Ç—É—Å:</b> {afk_status_text}\n"
                f"üîí <b>–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ê–§–ö:</b> {'–î–∞' if afk_locked else '–ù–µ—Ç'}",
                parse_mode='HTML',
                reply_markup=markup
            )
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ AFK –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}: {e}")
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    AFK_STATE.pop(admin_id, None)

@bot.callback_query_handler(func=lambda call: call.data.startswith("admin_enable_afk_"))
def admin_enable_afk(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!")
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º target_user_id –∏–∑ callback_data
    target_user_id = int(call.data.replace("admin_enable_afk_", ""))
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å AFK –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('UPDATE users SET IS_AFK = ?, AFK_LOCKED = ? WHERE ID = ?', (1, 1, target_user_id))
        conn.commit()
        print(f"[DEBUG] –ê–§–ö –≤–∫–ª—é—á—ë–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    
    with db.get_db() as conn:
        cursor = conn.cursor()
        # –ò–∑–≤–ª–µ–∫–∞–µ–º IS_AFK, AFK_LOCKED –∏ USERNAME
        cursor.execute('SELECT IS_AFK, AFK_LOCKED, USERNAME FROM users WHERE ID = ?', (target_user_id,))
        user = cursor.fetchone()
        is_afk, afk_locked, username = user
        afk_status_text = "–í–∫–ª—é—á—ë–Ω" if is_afk else "–í—ã–∫–ª—é—á–µ–Ω"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º username –∫–∞–∫ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
        username_display = f"@{username}" if username and username != "–ù–µ —É–∫–∞–∑–∞–Ω" else "–ù–µ—Ç username"
        username_text = f"üë§ Username: <a href=\"tg://user?id={target_user_id}\">{username_display}</a>\n" if username and username != "–ù–µ —É–∫–∞–∑–∞–Ω" else "üë§ Username: –ù–µ—Ç username\n"
        
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("üü¢ –í–∫–ª—é—á–∏—Ç—å –ê–§–ö", callback_data=f"admin_enable_afk_{target_user_id}"),
            types.InlineKeyboardButton("üî¥ –í—ã–∫–ª—é—á–∏—Ç—å –ê–§–ö", callback_data=f"admin_disable_afk_{target_user_id}")
        )
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="afk_settings"))
        
        try:
            bot.edit_message_text(
                f"üë§ <b>User ID:</b> {target_user_id}\n"
                f"{username_text}"
                f"üîî <b>–ê–§–ö –°—Ç–∞—Ç—É—Å:</b> {afk_status_text}",
                chat_id,
                message_id,
                parse_mode='HTML',
                reply_markup=markup
            )
        except Exception as e:
            print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            bot.send_message(chat_id, f"üë§ <b>User ID:</b> {target_user_id}\n{username_text}üîî <b>–ê–§–ö –°—Ç–∞—Ç—É—Å:</b> {afk_status_text}", parse_mode='HTML', reply_markup=markup)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        bot.send_message(
            target_user_id,
            "üîî <b>–í–∞—à –ê–§–ö-—Å—Ç–∞—Ç—É—Å –±—ã–ª –∏–∑–º–µ–Ω—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º</b>\n\n"
            "–¢–µ–ø–µ—Ä—å –≤–∞—à –ê–§–ö: <b>–í–∫–ª—é—á—ë–Ω</b>",
            parse_mode='HTML'
        )
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {e}")

    bot.answer_callback_query(call.id, "‚úÖ –ê–§–ö –≤–∫–ª—é—á—ë–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")

@bot.callback_query_handler(func=lambda call: call.data.startswith("admin_disable_afk_"))
def admin_disable_afk(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!")
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º target_user_id –∏–∑ callback_data
    target_user_id = int(call.data.replace("admin_disable_afk_", ""))
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å AFK –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('UPDATE users SET IS_AFK = ?, AFK_LOCKED = ? WHERE ID = ?', (0, 0, target_user_id))
        conn.commit()
        print(f"[DEBUG] –ê–§–ö –≤—ã–∫–ª—é—á–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}, –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–Ω—è—Ç–∞")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    
    with db.get_db() as conn:
        cursor = conn.cursor()
        # –ò–∑–≤–ª–µ–∫–∞–µ–º IS_AFK, AFK_LOCKED –∏ USERNAME
        cursor.execute('SELECT IS_AFK, AFK_LOCKED, USERNAME FROM users WHERE ID = ?', (target_user_id,))
        user = cursor.fetchone()
        is_afk, afk_locked, username = user
        afk_status_text = "–í–∫–ª—é—á—ë–Ω" if is_afk else "–í—ã–∫–ª—é—á–µ–Ω"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º username –∫–∞–∫ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
        username_display = f"@{username}" if username and username != "–ù–µ —É–∫–∞–∑–∞–Ω" else "–ù–µ—Ç username"
        username_text = f"üë§ Username: <a href=\"tg://user?id={target_user_id}\">{username_display}</a>\n" if username and username != "–ù–µ —É–∫–∞–∑–∞–Ω" else "üë§ Username: –ù–µ—Ç username\n"
        
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("üü¢ –í–∫–ª—é—á–∏—Ç—å –ê–§–ö", callback_data=f"admin_enable_afk_{target_user_id}"),
            types.InlineKeyboardButton("üî¥ –í—ã–∫–ª—é—á–∏—Ç—å –ê–§–ö", callback_data=f"admin_disable_afk_{target_user_id}")
        )
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="afk_settings"))
        
        try:
            bot.edit_message_text(
                f"üë§ <b>User ID:</b> {target_user_id}\n"
                f"{username_text}"
                f"üîî <b>–ê–§–ö –°—Ç–∞—Ç—É—Å:</b> {afk_status_text}",
                chat_id,
                message_id,
                parse_mode='HTML',
                reply_markup=markup
            )
        except Exception as e:
            print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            bot.send_message(chat_id, f"üë§ <b>User ID:</b> {target_user_id}\n{username_text}üîî <b>–ê–§–ö –°—Ç–∞—Ç—É—Å:</b> {afk_status_text}", parse_mode='HTML', reply_markup=markup)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        bot.send_message(
            target_user_id,
            "üîî <b>–í–∞—à –ê–§–ö-—Å—Ç–∞—Ç—É—Å –±—ã–ª –∏–∑–º–µ–Ω—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º</b>\n\n"
            "–¢–µ–ø–µ—Ä—å –≤–∞—à –ê–§–ö: <b>–í—ã–∫–ª—é—á–µ–Ω</b>",
            parse_mode='HTML'
        )
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {e}")

    bot.answer_callback_query(call.id, "‚úÖ –ê–§–ö –≤—ã–∫–ª—é—á–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")



def cancel_old_checks(crypto_api):
    try:
        checks_result = crypto_api.get_checks(status="active")
        if checks_result.get("ok", False):
            for check in checks_result["result"]["items"]:
                check_id = check["check_id"]
                crypto_api.delete_check(check_id=check_id)
                print(f"[INFO] –û—Ç–º–µ–Ω—ë–Ω —á–µ–∫ {check_id}, –≤—ã—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ {check['amount']} USDT")
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —á–µ–∫–∏: {e}")



@bot.callback_query_handler(func=lambda call: call.data == "send_all_checks")
def send_all_checks(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!")
        return
    
    crypto_api = crypto_pay.CryptoPay()
    
    try:
        cancel_old_checks(crypto_api)
        balance_result = crypto_api.get_balance()
        if not balance_result.get("ok", False):
            bot.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞ CryptoPay. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                call.message.chat.id,
                call.message.message_id
            )
            return
        
        usdt_balance = next((float(item["available"]) for item in balance_result["result"] if item["currency_code"] == "USDT"), 0.0)
        usdt_onhold = next((float(item["onhold"]) for item in balance_result["result"] if item["currency_code"] == "USDT"), 0.0)
        
        print(f"[INFO] –ë–∞–ª–∞–Ω—Å CryptoPay: –¥–æ—Å—Ç—É–ø–Ω–æ {usdt_balance} USDT, –≤ —Ä–µ–∑–µ—Ä–≤–µ {usdt_onhold} USDT")
        
        if usdt_balance <= 0:
            bot.edit_message_text(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ CryptoPay.\n–î–æ—Å—Ç—É–ø–Ω–æ: {usdt_balance} USDT\n–í —Ä–µ–∑–µ—Ä–≤–µ: {usdt_onhold} USDT",
                call.message.chat.id,
                call.message.message_id
            )
            return
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å CryptoPay: {e}")
        bot.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞ CryptoPay. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            call.message.chat.id,
            call.message.message_id
        )
        return
    
    with db_module.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT BALANCE FROM treasury WHERE ID = 1')
        treasury_result = cursor.fetchone()
        treasury_balance = treasury_result[0] if treasury_result else 0.0
        
        if treasury_balance <= 0:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
            bot.edit_message_text(
                "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –≤ –∫–∞–∑–Ω–µ –¥–ª—è –≤—ã–ø–ª–∞—Ç.",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=markup
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –±–∞–ª–∞–Ω—Å–æ–º > 0.2, –≤–∫–ª—é—á–∞—è USERNAME
        cursor.execute('SELECT ID, BALANCE, USERNAME FROM users WHERE BALANCE > 0.2')
        users = cursor.fetchall()
        
        if not users:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="Gv"))
            bot.edit_message_text(
                "‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –±–∞–ª–∞–Ω—Å–æ–º –±–æ–ª—å—à–µ 0.2$.",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=markup
            )
            return
        
        success_count = 0
        total_amount = 0
        failed_users = []
        checks_report = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è –æ—Ç—á—ë—Ç–∞
        current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        for user_id, balance, username in users:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤ –ø–µ—Ä–µ–¥ –ø–æ–ø—ã—Ç–∫–æ–π –≤—ã–ø–ª–∞—Ç—ã
            if float(balance) > treasury_balance:
                failed_users.append((user_id, balance, username, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –≤ –∫–∞–∑–Ω–µ"))
                continue
            if float(balance) > usdt_balance:
                failed_users.append((user_id, balance, username, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ CryptoPay"))
                continue
            
            for attempt in range(3):
                try:
                    cheque_result = crypto_api.create_check(
                        amount=str(balance),
                        asset="USDT",
                        pin_to_user_id=user_id,
                        description=f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤—ã–ø–ª–∞—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}"
                    )
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ cheque_result —Å—Ç—Ä–æ–∫–æ–π, –∏ –ø–∞—Ä—Å–∏–º –µ—ë –∫–∞–∫ JSON
                    if isinstance(cheque_result, str):
                        try:
                            cheque_result = json.loads(cheque_result)
                        except json.JSONDecodeError as e:
                            print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç create_check: {cheque_result}, –æ—à–∏–±–∫–∞: {e}")
                            failed_users.append((user_id, balance, username, "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç CryptoPay"))
                            break
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –º–µ—Ç–æ–¥ createCheck –æ—Ç–∫–ª—é—á—ë–Ω
                    if isinstance(cheque_result, dict) and not cheque_result.get("ok", False):
                        error = cheque_result.get("error", {})
                        if isinstance(error, dict) and error.get("code") == 403 and error.get("name") == "METHOD_DISABLED":
                            markup = types.InlineKeyboardMarkup()
                            markup.add(types.InlineKeyboardButton("üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
                            bot.edit_message_text(
                                "‚ùå –í @CryptoBot –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–≤–∞—Ç—å —á–µ–∫–∏. –í–∫–ª—é—á–∏—Ç–µ –º–µ—Ç–æ–¥ createCheck –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.",
                                call.message.chat.id,
                                call.message.message_id,
                                reply_markup=markup
                            )
                            return
                        else:
                            error_name = error.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞") if isinstance(error, dict) else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
                            failed_users.append((user_id, balance, username, f"–û—à–∏–±–∫–∞ CryptoPay: {error_name}"))
                            break
                    
                    if cheque_result.get("ok", False):
                        cheque = cheque_result.get("result", {})
                        cheque_link = cheque.get("bot_check_url", "")
                        
                        if cheque_link:
                            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —á–µ–∫ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                            cursor.execute('''
                                INSERT INTO checks (USER_ID, AMOUNT, CHECK_CODE, STATUS, CREATED_AT)
                                VALUES (?, ?, ?, ?, ?)
                            ''', (user_id, balance, cheque_link, 'pending', current_time))
                            conn.commit()
                            
                            # –û–±–Ω—É–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            cursor.execute('UPDATE users SET BALANCE = 0 WHERE ID = ?', (user_id,))
                            conn.commit()
                            
                            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∫–∞–∑–Ω—ã
                            treasury_balance -= float(balance)
                            cursor.execute('UPDATE treasury SET BALANCE = ? WHERE ID = 1', (treasury_balance,))
                            conn.commit()
                            db_module.log_treasury_operation("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥ (–º–∞—Å—Å–æ–≤—ã–π)", balance, treasury_balance)
                            
                            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç
                            username_display = username if username and username != "–ù–µ —É–∫–∞–∑–∞–Ω" else "–ù–µ —É–∫–∞–∑–∞–Ω"
                            checks_report.append({
                                "cheque_link": cheque_link,
                                "user_id": user_id,
                                "username": username_display,
                                "amount": balance
                            })
                            
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                            markup = types.InlineKeyboardMarkup()
                            markup.add(types.InlineKeyboardButton("üí≥ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —á–µ–∫", url=cheque_link))
                            markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
                            try:
                                bot.send_message(
                                    user_id,
                                    f"‚úÖ –í–∞—à —á–µ–∫ –Ω–∞ —Å—É–º–º—É {balance}$ –≥–æ—Ç–æ–≤!\n"
                                    f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ:",
                                    reply_markup=markup,
                                    parse_mode='HTML'
                                )
                            except Exception as e:
                                print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                                failed_users.append((user_id, balance, username, "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"))
                                break
                            
                            # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—Ö
                            log_entry = f"[{current_time}] | –ú–∞—Å—Å–æ–≤–∞—è –≤—ã–ø–ª–∞—Ç–∞ | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} | –°—É–º–º–∞ {balance}$ | –£—Å–ø–µ—Ö"
                            with open("withdrawals_log.txt", "a", encoding="utf-8") as log_file:
                                log_file.write(log_entry + "\n")
                            
                            success_count += 1
                            total_amount += balance
                            usdt_balance -= float(balance)
                            break
                    else:
                        error = cheque_result.get("error", {}).get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞") if isinstance(cheque_result, dict) else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
                        failed_users.append((user_id, balance, username, f"–û—à–∏–±–∫–∞ CryptoPay: {error}"))
                        break
                except RequestException as e:
                    print(f"[ERROR] –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                    if attempt == 2:
                        failed_users.append((user_id, balance, username, f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"))
                    continue
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        report = (
            f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ–∫–æ–≤: {success_count}\n"
            f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞: {total_amount}$\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å CryptoPay: {usdt_balance}$\n"
            f"üí∞ –í —Ä–µ–∑–µ—Ä–≤–µ CryptoPay: {usdt_onhold}$\n"
        )
        if checks_report:
            report += "\nüìã –£—Å–ø–µ—à–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã:\n"
            for entry in checks_report:
                report += (
                    f"ID: {entry['user_id']}, "
                    f"Username: @{entry['username']}, "
                    f"–°—É–º–º–∞: {entry['amount']}$, "
                    f"–°—Å—ã–ª–∫–∞: {entry['cheque_link']}\n"
                    f""
                    f"‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî"
                )
        if failed_users:
            report += "\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
            for user_id, balance, username, error in failed_users:
                username_display = username if username and username != "–ù–µ —É–∫–∞–∑–∞–Ω" else "–ù–µ —É–∫–∞–∑–∞–Ω"
                report += f"ID: {user_id}, Username: @{username_display}, –°—É–º–º–∞: {balance}$, –û—à–∏–±–∫–∞: {error}\n"
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
        bot.edit_message_text(
            report,
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup,
            parse_mode='HTML'
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á—ë—Ç –≤ —Ñ–∞–π–ª
        report_filename = f"checks_report_{current_time.replace(':', '-')}.txt"
        with open(report_filename, "w", encoding="utf-8") as report_file:
            report_file.write(report)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        admin_message = (
            f"üí∏ <b>–ú–∞—Å—Å–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>\n\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count} —á–µ–∫–æ–≤\n"
            f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞: {total_amount}$\n"
            f"üí∞ –û—Å—Ç–∞—Ç–æ–∫ –≤ –∫–∞–∑–Ω–µ: {treasury_balance}$\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å CryptoPay: {usdt_balance}$\n"
            f"üí∞ –í —Ä–µ–∑–µ—Ä–≤–µ CryptoPay: {usdt_onhold}$\n"
        )
        if checks_report:
            admin_message += "\nüìã –£—Å–ø–µ—à–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã:\n"
            for entry in checks_report:
                admin_message += (
                    f"ID: {entry['user_id']}, "
                    f"Username: @{entry['username']}, "
                    f"–°—É–º–º–∞: {entry['amount']}$, "
                    f"–°—Å—ã–ª–∫–∞: {entry['cheque_link']}\n"
                )
        if failed_users:
            admin_message += "\n‚ùå –û—à–∏–±–∫–∏:\n"
            for user_id, balance, username, error in failed_users:
                username_display = username if username and username != "–ù–µ —É–∫–∞–∑–∞–Ω" else "–ù–µ —É–∫–∞–∑–∞–Ω"
                admin_message += f"ID: {user_id}, Username: @{username_display}, –°—É–º–º–∞: {balance}$, –û—à–∏–±–∫–∞: {error}\n"
        
        for admin_id in config.ADMINS_ID:
            try:
                bot.send_message(admin_id, admin_message, parse_mode='HTML')
            except:
                continue


# bot.py
SEND_CHECK_STATE = {}
search_state = {}

@bot.callback_query_handler(func=lambda call: call.data == "send_check")
def send_check_start(call):
    if call.from_user.id not in config.ADMINS_ID:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!")
        return
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="Gv"))
    msg = bot.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ user_id –∏–ª–∏ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫ (–æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ):",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup
    )
    
    SEND_CHECK_STATE[call.from_user.id] = {"step": "awaiting_user_id", "message_id": msg.message_id}
    bot.register_next_step_handler(msg, process_user_id_input)

def process_user_id_input(message):
    admin_id = message.from_user.id
    if admin_id not in SEND_CHECK_STATE or SEND_CHECK_STATE[admin_id]["step"] != "awaiting_user_id":
        return
    
    if not message.text:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîç –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="send_check"))
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
        bot.reply_to(message, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ user_id –∏–ª–∏ @username.", reply_markup=markup)
        bot.register_next_step_handler(message, process_user_id_input)
        return
    
    input_text = message.text.strip()
    user_id = None
    username = None
    
    if input_text.startswith('@'):
        username = input_text[1:]
        print(f"[DEBUG] Processing username: {username}")
        with db_module.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT ID FROM users WHERE LOWER(USERNAME) = ?', (username.lower(),))
            user = cursor.fetchone()
            if user:
                user_id = user[0]
                print(f"[DEBUG] Found user ID {user_id} for username {username}")
            else:
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("üîç –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="send_check"))
                markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
                bot.reply_to(message, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å @username '{username}' –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=markup)
                bot.register_next_step_handler(message, process_user_id_input)
                return
    else:
        try:
            user_id = int(input_text)
            print(f"[DEBUG] Processing user ID: {user_id}")
        except ValueError:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîç –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="send_check"))
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
            bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –∏–ª–∏ @username.", reply_markup=markup)
            bot.register_next_step_handler(message, process_user_id_input)
            return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    with db_module.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT ID, BALANCE, USERNAME FROM users WHERE ID = ?', (user_id,))
        user = cursor.fetchone()
        if not user:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîç –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="send_check"))
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
            bot.reply_to(message, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=markup)
            bot.register_next_step_handler(message, process_user_id_input)
            return
        user_id, current_balance, username = user
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—É–º–º—É
    username_display = f"@{username}" if username and username != "–ù–µ —É–∫–∞–∑–∞–Ω" else "–ù–µ—Ç username"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="Gv"))
    msg = bot.reply_to(
        message,
        f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —á–µ–∫–∞ –≤ USDT –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} ({username_display})\n"
        f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {current_balance} $:",
        reply_markup=markup
    )
    
    SEND_CHECK_STATE[admin_id] = {
        "step": "awaiting_amount",
        "user_id": user_id,
        "message_id": msg.message_id
    }
    bot.register_next_step_handler(msg, process_amount_input)

def process_amount_input(message):
    admin_id = message.from_user.id
    if admin_id not in SEND_CHECK_STATE or SEND_CHECK_STATE[admin_id]["step"] != "awaiting_amount":
        return
    
    if not message.text:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
        bot.reply_to(message, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ USDT.", reply_markup=markup)
        bot.register_next_step_handler(message, process_amount_input)
        return
    
    amount_str = message.text.strip()
    if not re.match(r'^\d+(\.\d{1,2})?$', amount_str):
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
        bot.reply_to(message, "‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1.5). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:", reply_markup=markup)
        bot.register_next_step_handler(message, process_amount_input)
        return
    
    amount = float(amount_str)
    user_id = SEND_CHECK_STATE[admin_id]["user_id"]
    
    if amount < 0.1:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
        bot.reply_to(message, "‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —á–µ–∫–∞ ‚Äî 0.1 USDT.", reply_markup=markup)
        bot.register_next_step_handler(message, process_amount_input)
        return
    
    with db_module.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT BALANCE FROM treasury WHERE ID = 1')
        treasury_result = cursor.fetchone()
        treasury_balance = treasury_result[0] if treasury_result else 0.0
        
        if amount > treasury_balance:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
            bot.reply_to(message, f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –≤ –∫–∞–∑–Ω–µ. –í –∫–∞–∑–µ–Ω–µ: {treasury_balance} USDT.", reply_markup=markup)
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ CryptoPay
        crypto_api = crypto_pay.CryptoPay()
        try:
            balance_result = crypto_api.get_balance()
            if not balance_result.get("ok", False):
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
                bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞ CryptoPay.", reply_markup=markup)
                return
            
            usdt_balance = next((float(item["available"]) for item in balance_result["result"] if item["currency_code"] == "USDT"), 0.0)
            usdt_onhold = next((float(item["onhold"]) for item in balance_result["result"] if item["currency_code"] == "USDT"), 0.0)
            
            print(f"[INFO] –ë–∞–ª–∞–Ω—Å CryptoPay: –¥–æ—Å—Ç—É–ø–Ω–æ {usdt_balance} USDT, –≤ —Ä–µ–∑–µ—Ä–≤–µ {usdt_onhold} USDT")
            
            if amount > usdt_balance:
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
                bot.reply_to(message, f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ CryptoPay: –¥–æ—Å—Ç—É–ø–Ω–æ {usdt_balance} USDT, –≤ —Ä–µ–∑–µ—Ä–≤–µ {usdt_onhold} USDT.", reply_markup=markup)
                return
        except Exception as e:
            print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å CryptoPay: {e}")
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
            bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞ CryptoPay.", reply_markup=markup)
            return
        
        # –°–æ–∑–¥–∞—ë–º —á–µ–∫
        try:
            cheque_result = crypto_api.create_check(
                amount=str(amount),
                asset="USDT",
                pin_to_user_id=user_id,
                description=f"–ß–µ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
            )
            
            if not cheque_result.get("ok", False):
                error = cheque_result.get("error", {}).get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
                bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–µ–∫–∞: {error}", reply_markup=markup)
                return
            
            cheque = cheque_result.get("result", {})
            cheque_link = cheque.get("bot_check_url", "")
            
            if not cheque_link:
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
                bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —á–µ–∫.", reply_markup=markup)
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ–∫ –≤ –±–∞–∑–µ
            current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            cursor.execute('''
                INSERT INTO checks (USER_ID, AMOUNT, CHECK_CODE, STATUS, CREATED_AT)
                VALUES (?, ?, ?, ?, ?)
            ''', (user_id, amount, cheque_link, 'pending', current_time))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∫–∞–∑–Ω—ã
            treasury_balance -= amount
            cursor.execute('UPDATE treasury SET BALANCE = ? WHERE ID = 1', (treasury_balance,))
            conn.commit()
            db_module.log_treasury_operation("–†—É—á–Ω–æ–π —á–µ–∫", amount, treasury_balance)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
            log_entry = f"[{current_time}] | –†—É—á–Ω–æ–π —á–µ–∫ | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} | –°—É–º–º–∞ {amount}$ | –£—Å–ø–µ—Ö"
            with open("withdrawals_log.txt", "a", encoding="utf-8") as log_file:
                log_file.write(log_entry + "\n")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üí≥ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —á–µ–∫", url=cheque_link))
            markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
            try:
                bot.send_message(
                    user_id,
                    f"‚úÖ –í–∞—à —á–µ–∫ –Ω–∞ —Å—É–º–º—É {amount}$ –≥–æ—Ç–æ–≤!\n"
                    f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ:",
                    reply_markup=markup,
                    parse_mode='HTML'
                )
            except Exception as e:
                print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
                bot.reply_to(message, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}", reply_markup=markup)
                return
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
            bot.reply_to(message, f"‚úÖ –ß–µ–∫ –Ω–∞ {amount}$ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.", reply_markup=markup)
            
            SEND_CHECK_STATE.pop(admin_id, None)
        
        except Exception as e:
            print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á–µ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
            bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–µ–∫–∞: {e}", reply_markup=markup)
            return


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
@bot.message_handler(func=lambda message: search_state.get(message.from_user.id, {}).get("awaiting_search", False))
def handle_search_query(message):
    if message.from_user.id not in config.ADMINS_ID:
        bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞!")
        return
    
    query = message.text.strip()
    search_state[message.from_user.id] = {"query": query}
    bot.reply_to(message, f"üîç –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{query}'...")
    
    # –í—ã–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    if search_state[message.from_user.id].get("context") == "send_check":
        process_user_id_input(message)
    # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, change_price, reduce_balance)






#=============================================================================================================

#–ù–û–ú–ï–†–ê –ö–û–¢–û–†–´–ï –ù–ï –û–ë–†–ê–ë–ê–¢–´–í–ê–õ–ò –í –¢–ï–ß–ï–ù–ò–ï 10 –ú–ò–ù–£–¢ +
def check_number_timeout():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–¥–∞ (10 –º–∏–Ω—É—Ç)."""
    while True:
        try:
            with db.get_db() as conn:
                cursor = conn.cursor()
                cursor.execute('SELECT NUMBER, TAKE_DATE, ID_OWNER, MODERATOR_ID, STATUS FROM numbers')
                numbers = cursor.fetchall()
                
                current_time = datetime.now()
                for number, take_date, owner_id, moderator_id, status in numbers:
                    if take_date in ("0", "1") or status not in ("–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ", "taken"):
                        continue
                    try:
                        take_time = datetime.strptime(take_date, "%Y-%m-%d %H:%M:%S")
                        elapsed_time = (current_time - take_time).total_seconds() / 60
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω
                        cursor.execute('SELECT CONFIRMED_BY_MODERATOR_ID FROM numbers WHERE NUMBER = ?', (number,))
                        confirmed_by = cursor.fetchone()[0]
                        if elapsed_time >= 10 and confirmed_by is not None:
                            # –ù–æ–º–µ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –æ—á–µ—Ä–µ–¥—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –±—ã–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω
                            cursor.execute('UPDATE numbers SET MODERATOR_ID = NULL, TAKE_DATE = "0", STATUS = "–æ–∂–∏–¥–∞–µ—Ç" WHERE NUMBER = ?', (number,))
                            conn.commit()
                            logging.info(f"–ù–æ–º–µ—Ä {number} –≤–æ–∑–≤—Ä–∞—â—ë–Ω –≤ –æ—á–µ—Ä–µ–¥—å –∏–∑-–∑–∞ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.")
                            
                            if owner_id:
                                markup_owner = types.InlineKeyboardMarkup()
                                markup_owner.add(types.InlineKeyboardButton("üì± –°–¥–∞—Ç—å –Ω–æ–º–µ—Ä", callback_data="submit_number"))
                                markup_owner.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
                                safe_send_message(
                                    owner_id,
                                    f"üì± –í–∞—à –Ω–æ–º–µ—Ä {number} –≤–æ–∑–≤—Ä–∞—â—ë–Ω –≤ –æ—á–µ—Ä–µ–¥—å –∏–∑-–∑–∞ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.",
                                    parse_mode='HTML',
                                    reply_markup=markup_owner
                                )
                            
                            if moderator_id:
                                markup_mod = types.InlineKeyboardMarkup()
                                markup_mod.add(types.InlineKeyboardButton("üì≤ –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä", callback_data="get_number"))
                                markup_mod.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
                                safe_send_message(
                                    moderator_id,
                                    f"üì± –ù–æ–º–µ—Ä {number} –≤–æ–∑–≤—Ä–∞—â—ë–Ω –≤ –æ—á–µ—Ä–µ–¥—å –∏–∑-–∑–∞ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è.",
                                    parse_mode='HTML',
                                    reply_markup=markup_mod
                                )
                    except ValueError as e:
                        logging.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –Ω–æ–º–µ—Ä–∞ {number}: {e}")
            time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ check_number_timeout: {e}")
            time.sleep(60)

def check_number_hold_time():
    while True:
        try:
            with db.get_db() as conn:
                cursor = conn.cursor()
                cursor.execute('SELECT PRICE, HOLD_TIME FROM settings')
                result = cursor.fetchone()
                price, hold_time = result if result else (2.0, 5)

                cursor.execute('''
                    SELECT NUMBER, ID_OWNER, TAKE_DATE, STATUS, CONFIRMED_BY_MODERATOR_ID, HOLDS_COUNT
                    FROM numbers 
                    WHERE STATUS IN ('–∞–∫—Ç–∏–≤–µ–Ω', '–æ—Ç—Å—Ç–æ—è–ª 1/2', '–æ—Ç—Å—Ç–æ—è–ª 2/2') AND TAKE_DATE NOT IN ('0', '1')
                ''')
                numbers = cursor.fetchall()

                current_time = datetime.now()
                for number, owner_id, take_date, status, mod_id, holds_count in numbers:
                    try:
                        start_time = datetime.strptime(take_date, "%Y-%m-%d %H:%M:%S")
                        time_elapsed = (current_time - start_time).total_seconds() / 60
                        if time_elapsed < hold_time:
                            print(f"[TIMEOUT_CHECK] –ù–æ–º–µ—Ä {number}, —Å—Ç–∞—Ç—É—Å: {status}, –≤–ª–∞–¥–µ–ª–µ—Ü: {owner_id}, –º–æ–¥–µ—Ä–∞—Ç–æ—Ä: {mod_id if mod_id else 'None'}, –≤—Ä–µ–º—è: {time_elapsed:.2f}/{hold_time} –º–∏–Ω—É—Ç")
                            continue

                        cursor.execute('SELECT STATUS FROM numbers WHERE NUMBER = ?', (number,))
                        current_status = cursor.fetchone()[0]
                        if current_status not in ['–∞–∫—Ç–∏–≤–µ–Ω', '–æ—Ç—Å—Ç–æ—è–ª 1/2', '–æ—Ç—Å—Ç–æ—è–ª 2/2']:
                            print(f"[TIMEOUT_CHECK] –ù–æ–º–µ—Ä {number} –∏–º–µ–µ—Ç –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å—Ç–∞—Ç—É—Å: {current_status}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                            continue

                        payout = 0
                        new_status = status
                        if holds_count == 0 and current_status == '–∞–∫—Ç–∏–≤–µ–Ω':
                            new_status = "–æ—Ç—Å—Ç–æ—è–ª 1/2"
                            payout = price
                        elif holds_count == 1 and current_status == '–æ—Ç—Å—Ç–æ—è–ª 1/2':
                            new_status = "–æ—Ç—Å—Ç–æ—è–ª 2/2"
                            payout = price
                        elif holds_count >= 2:
                            new_status = "–æ—Ç—Å—Ç–æ—è–ª 2/2+ —Ö–æ–ª–¥"
                            payout = 0

                        if payout > 0:
                            cursor.execute('UPDATE users SET BALANCE = BALANCE + ? WHERE ID = ?', (payout, owner_id))
                            print(f"[DEBUG] –ù–∞—á–∏—Å–ª–µ–Ω–æ {payout}$ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {owner_id} –∑–∞ –Ω–æ–º–µ—Ä {number} (HOLD {holds_count + 1})")

                            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            hold_text = "1/2 –æ—Ç—Å—Ç–æ—è–ª" if new_status == "–æ—Ç—Å—Ç–æ—è–ª 1/2" else "2/2 –æ—Ç—Å—Ç–æ—è–ª"
                            continues_text = "–∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Å—Ç–æ—è—Ç—å" if new_status != "–æ—Ç—Å—Ç–æ—è–ª 2/2+ —Ö–æ–ª–¥" else ""
                            message_text = (
                                f"üì± <b>–ù–æ–º–µ—Ä:</b> <code>{number}</code>\n"
                                f"‚úÖ <b>–û—Ç—Å—Ç–æ—è–ª —Ö–æ–ª–¥:</b> {hold_text}\n"
                                f"üí∞ <b>–ù–∞—á–∏—Å–ª–∏–ª–æ—Å—å:</b> {payout}$\n"
                                f"‚è≥ <b>–ù–æ–º–µ—Ä –æ—Ç—Å—Ç–æ—è–ª:</b> {time_elapsed:.2f} –º–∏–Ω—É—Ç {continues_text}"
                            )
                            markup = types.InlineKeyboardMarkup()
                            markup.add(types.InlineKeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile"))
                            markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
                            safe_send_message(owner_id, message_text, parse_mode='HTML', reply_markup=markup)

                        shutdown_date = current_time.strftime("%Y-%m-%d %H:%M:%S")
                        cursor.execute('''
                            UPDATE numbers 
                            SET STATUS = ?, SHUTDOWN_DATE = ?, HOLDS_COUNT = HOLDS_COUNT + 1
                            WHERE NUMBER = ?
                        ''', (new_status, shutdown_date, number))
                        conn.commit()
                        print(f"[DEBUG] –ù–æ–º–µ—Ä {number} –æ—Ç—Å—Ç–æ—è–ª. STATUS: {new_status}, HOLDS_COUNT: {holds_count + 1}, PAYOUT: {payout}")

                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–º–µ—Ä–∞ {number}: {e}")

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ check_number_hold_time: {e}")
        
        time.sleep(60)
        
#–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ—è—è–Ω–∏—è –Ω–æ–º–µ—Ä–æ–≤



def get_number_in_group(user_id, chat_id, message_id, tg_number):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        if not db_module.is_moderator(user_id) and user_id not in config.ADMINS_ID:
            bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!", parse_mode='HTML')
            return

        with db_module.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT NUMBER, ID_OWNER, SUBMIT_DATE
                FROM numbers
                WHERE STATUS = "–æ–∂–∏–¥–∞–µ—Ç" AND ID_OWNER NOT IN (SELECT ID FROM users WHERE AFK_LOCKED = 1)
                ORDER BY SUBMIT_DATE ASC
                LIMIT 1
            ''')
            number_data = cursor.fetchone()

        if not number_data:
            bot.send_message(chat_id, "üì≠ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.", parse_mode='HTML')
            return

        number, owner_id, submit_date = number_data

        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –≤ –±–∞–∑–µ
        with db_module.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('''
                UPDATE numbers 
                SET STATUS = "taken", 
                    MODERATOR_ID = ?, 
                    TG_NUMBER = ?, 
                    TAKE_DATE = ?,
                    GROUP_CHAT_ID = ?
                WHERE NUMBER = ?
            ''', (user_id, tg_number, datetime.now().strftime("%Y-%m-%d %H:%M:%S"), chat_id, number))
            conn.commit()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º active_code_requests –¥–ª—è —ç—Ç–æ–≥–æ user_id
        if user_id not in active_code_requests:
            active_code_requests[user_id] = {}
        active_code_requests[user_id][message_id] = {
            'number': number,
            'owner_id': owner_id,
            'tg_number': tg_number,
            'chat_id': chat_id
        }

        # –ü–æ–ª—É—á–∞–µ–º username –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        try:
            user = bot.get_chat_member(chat_id, user_id).user
            username = f"@{user.username}" if user.username else "Unknown"
        except Exception as e:
            print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å username –¥–ª—è user_id {user_id}: {e}")
            username = "Unknown"

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–µ –≤–∞–ª–∏–¥"
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("‚ùå–ù–µ –≤–∞–ª–∏–¥", callback_data=f"invalid_{number}_{tg_number}"))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É —Å –∑–∞–ø—Ä–æ—Å–æ–º —Ñ–æ—Ç–æ
        sent_message = bot.send_message(
            chat_id,
            f"üì±  <i>(–í–¶ {tg_number})</i>\n"
            f"üìå <code>{number}</code>\n"
            f"<b>–î–µ–π—Å—Ç–≤–∏–µ:</b> <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏</b> –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n"
            f"<i>‚ö†Ô∏è –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–æ—Ç–æ —á—ë—Ç–∫–æ–µ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–æ–º–µ—Ä—É!</i>",
            parse_mode='HTML',
            reply_markup=markup
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–ø–ª–∞—è
        code_messages[number] = {
            "chat_id": chat_id,
            "message_id": sent_message.message_id,
            "timestamp": datetime.now(),
            "tg_number": tg_number,
            "owner_id": owner_id
        }

        print(f"[DEBUG] –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä {user_id} –≤–∑—è–ª –Ω–æ–º–µ—Ä {number}, –æ–∂–∏–¥–∞–µ—Ç —Ñ–æ—Ç–æ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏.")

    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞ –≤ –≥—Ä—É–ø–ø–µ: {e}")
        bot.send_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞.", parse_mode='HTML')


@bot.callback_query_handler(func=lambda call: call.data.startswith("mark_invalid_"))
def mark_number_invalid(call):
    user_id = call.from_user.id
    db.update_last_activity(user_id)
    try:
        # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data
        parts = call.data.split("_")
        if len(parts) < 4:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö!")
            return
        number = parts[2]
        group_chat_id = int(parts[3])
        tg_number = int(parts[4])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –Ω–æ–º–µ—Ä –≤ –±–∞–∑–µ –∏ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º
        with db.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT ID_OWNER, MODERATOR_ID FROM numbers WHERE NUMBER = ?', (number,))
            result = cursor.fetchone()
            if not result:
                bot.answer_callback_query(call.id, "‚ùå –ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return
            owner_id, moderator_id = result

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–∑—ã–≤–∞—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –Ω–æ–º–µ—Ä–∞
            if call.from_user.id != owner_id:
                bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø–æ–º–µ—Ç–∫–∏ —ç—Ç–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∫–∞–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ!")
                return

            # –£–¥–∞–ª—è–µ–º –Ω–æ–º–µ—Ä –∏–∑ –±–∞–∑—ã
            try:
                cursor.execute('DELETE FROM numbers WHERE NUMBER = ?', (number,))
                conn.commit()
                print(f"[DEBUG] –ù–æ–º–µ—Ä {number} —É–¥–∞–ª—ë–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
            except Exception as e:
                print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞ {number} –∏–∑ –±–∞–∑—ã: {e}")
                raise e

        # –§–æ—Ä–º–∏—Ä—É–µ–º confirmation_key
        confirmation_key = f"{number}_{owner_id}"
        if confirmation_key in confirmation_messages:
            try:
                bot.delete_message(
                    confirmation_messages[confirmation_key]["chat_id"],
                    confirmation_messages[confirmation_key]["message_id"]
                )
            except Exception as e:
                print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è {confirmation_key}: {e}")
            del confirmation_messages[confirmation_key]
            print(f"[DEBUG] –£–¥–∞–ª—ë–Ω confirmation_key {confirmation_key} –∏–∑ confirmation_messages")

        # –û—á–∏—â–∞–µ–º active_code_requests –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞, –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        if owner_id in active_code_requests and number in active_code_requests[owner_id]:
            message_id = active_code_requests[owner_id][number]
            try:
                bot.edit_message_text(
                    f"‚ùå –ó–∞–ø—Ä–æ—Å –∫–æ–¥–∞ –¥–ª—è –Ω–æ–º–µ—Ä–∞ {number} –æ—Ç–º–µ–Ω—ë–Ω, —Ç–∞–∫ –∫–∞–∫ –Ω–æ–º–µ—Ä –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π.",
                    owner_id,
                    message_id,
                    parse_mode='HTML'
                )
            except telebot.apihelper.ApiTelegramException as e:
                print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è owner_id {owner_id}, message_id {message_id}: {e}")
            del active_code_requests[owner_id][number]
            print(f"[DEBUG] –£–¥–∞–ª—ë–Ω –Ω–æ–º–µ—Ä {number} –∏–∑ active_code_requests –¥–ª—è owner_id {owner_id}")
            if not active_code_requests[owner_id]:
                del active_code_requests[owner_id]
                print(f"[DEBUG] –£–¥–∞–ª—ë–Ω owner_id {owner_id} –∏–∑ active_code_requests")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞
        markup_owner = types.InlineKeyboardMarkup()
        markup_owner.add(
            types.InlineKeyboardButton("üì± –°–¥–∞—Ç—å –Ω–æ–º–µ—Ä —Å–Ω–æ–≤–∞", callback_data="submit_number"),
            types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
        )
        bot.edit_message_text(
            f"‚ùå –í—ã –æ—Ç–º–µ—Ç–∏–ª–∏ –Ω–æ–º–µ—Ä {number} –∫–∞–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π. –ù–æ–º–µ—Ä —É–¥–∞–ª—ë–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã.",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup_owner,
            parse_mode='HTML'
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –≤ –≥—Ä—É–ø–ø–µ
        markup_mod = types.InlineKeyboardMarkup()
        markup_mod.add(
            types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
        )
        try:
            bot.send_message(
                group_chat_id,
                f"üì± <b>–í–¶ {tg_number}</b>\n"
                f"‚ùå –í–ª–∞–¥–µ–ª–µ—Ü –Ω–æ–º–µ—Ä–∞ {number} –æ—Ç–º–µ—Ç–∏–ª –µ–≥–æ –∫–∞–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π. \n –ü—Ä–∏–Ω–æ—Å–∏–º —Å–≤–æ–∏ –∏–∑–≤–∏–Ω–µ–Ω–∏—è –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–æ–∑—å–º–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä",
                reply_markup=markup_mod,
                parse_mode='HTML'
            )
        except telebot.apihelper.ApiTelegramException as e:
            print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É {group_chat_id}: {e}")
            if moderator_id:
                try:
                    bot.send_message(
                        moderator_id,
                        f"üì± <b>–í–¶ {tg_number}</b>\n"
                        f"‚ùå –í–ª–∞–¥–µ–ª–µ—Ü –Ω–æ–º–µ—Ä–∞ {number} –æ—Ç–º–µ—Ç–∏–ª –µ–≥–æ –∫–∞–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π. –ù–æ–º–µ—Ä —É–¥–∞–ª—ë–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã.\n"
                        f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É (ID: {group_chat_id}).",
                        reply_markup=markup_mod,
                        parse_mode='HTML'
                    )
                except telebot.apihelper.ApiTelegramException as e:
                    print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É {moderator_id}: {e}")

        bot.answer_callback_query(call.id, "‚úÖ –ù–æ–º–µ—Ä –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π.")
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –≤ mark_number_invalid: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–º–µ—Ä–∞!")

@bot.callback_query_handler(func=lambda call: call.data.startswith("moderator_invalid_"))
def moderator_mark_number_invalid(call):
    try:
        parts = call.data.split("_")
        if len(parts) < 5:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö!")
            return
        number = parts[2]
        tg_number = int(parts[3])
        owner_id = int(parts[4])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º
        if not db.is_moderator(call.from_user.id) and call.from_user.id not in config.ADMINS_ID:
            bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –Ω–æ–º–µ—Ä –≤ –±–∞–∑–µ
        with db.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT ID_OWNER FROM numbers WHERE NUMBER = ?', (number,))
            result = cursor.fetchone()
            if not result:
                bot.answer_callback_query(call.id, "‚ùå –ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return
            if result[0] != owner_id:
                bot.answer_callback_query(call.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –≤–ª–∞–¥–µ–ª—å—Ü–∞!")
                return

            # –£–¥–∞–ª—è–µ–º –Ω–æ–º–µ—Ä –∏–∑ –±–∞–∑—ã
            cursor.execute('DELETE FROM numbers WHERE NUMBER = ?', (number,))
            conn.commit()

        bot.edit_message_text(
            f"‚úÖ –ù–æ–º–µ—Ä {number} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã",
            call.message.chat.id,
            call.message.message_id,
            parse_mode='HTML'
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞
        markup_owner = types.InlineKeyboardMarkup()
        markup_owner.add(
            types.InlineKeyboardButton("üì± –°–¥–∞—Ç—å –Ω–æ–º–µ—Ä —Å–Ω–æ–≤–∞", callback_data="submit_number"),
            types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
        )
        try:
            bot.send_message(
                owner_id,
                f"‚ùå –í–∞—à –Ω–æ–º–µ—Ä {number} –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.\nüì± –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä –∏ —Å–¥–∞–π—Ç–µ –∑–∞–Ω–æ–≤–æ.",
                reply_markup=markup_owner,
                parse_mode='HTML'
            )
        except telebot.apihelper.ApiTelegramException as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É {owner_id}: {e}")
            for admin_id in config.ADMINS_ID:
                try:
                    bot.send_message(
                        admin_id,
                        f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ {owner_id} –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞ {number}: {e}",
                        parse_mode='HTML'
                    )
                except:
                    pass

        # –û—á–∏—â–∞–µ–º confirmation_messages
        confirmation_key = f"{number}_{owner_id}"
        if confirmation_key in confirmation_messages:
            del confirmation_messages[confirmation_key]

        # –û—á–∏—â–∞–µ–º active_code_requests
        if owner_id in active_code_requests and number in active_code_requests[owner_id]:
            del active_code_requests[owner_id][number]
            if not active_code_requests[owner_id]:
                del active_code_requests[owner_id]

        bot.answer_callback_query(call.id, "‚úÖ –ù–æ–º–µ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ moderator_mark_number_invalid: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–º–µ—Ä–∞!")
        

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
confirmation_messages = {}
button_contexts = {}
code_messages = {}

@bot.callback_query_handler(func=lambda call: call.data.startswith("confirm_code_"))
def process_confirm_code(call):
    try:
        data_parts = call.data.split("_")
        logging.debug(f"[DEBUG] –ü–æ–ª—É—á–µ–Ω callback_data: {repr(call.data)}, parts: {data_parts}, length: {len(data_parts)}")

        if len(data_parts) < 3:
            logging.error(f"[ERROR] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {call.data}, parts: {data_parts}, expected at least 3 parts")
            bot.answer_callback_query(call.id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        if data_parts[0] != "confirm" or data_parts[1] != "code":
            logging.error(f"[ERROR] –ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å callback_data: {call.data}, expected 'confirm_code'")
            bot.answer_callback_query(call.id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        number = data_parts[2]
        tg_number = data_parts[3] if len(data_parts) > 3 else None
        if not tg_number:
            logging.error(f"[ERROR] –ù–µ –Ω–∞–π–¥–µ–Ω tg_number –≤ callback_data: {call.data}")
            bot.answer_callback_query(call.id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        user_id = call.from_user.id
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º chat_id –∏–∑ code_messages –¥–ª—è –≥—Ä—É–ø–ø—ã
        group_chat_id = code_messages[number]['chat_id']

        logging.debug(f"[DEBUG] –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞: number={number}, tg_number={tg_number}, user_id={user_id}, group_chat_id={group_chat_id}")

        if 'code_messages' not in globals() or number not in code_messages:
            logging.error(f"[ERROR] code_messages –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –Ω–æ–º–µ—Ä {number} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ –Ω–æ–º–µ—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        owner_id = code_messages[number]['owner_id']
        if user_id != owner_id:
            logging.error(f"[ERROR] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –Ω–æ–º–µ—Ä–∞ {number}, owner_id={owner_id}")
            bot.answer_callback_query(call.id, "‚ùå –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –Ω–æ–º–µ—Ä.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –Ω–æ–º–µ—Ä–∞
        with db_module.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT STATUS FROM numbers WHERE NUMBER = ?', (number,))
            status = cursor.fetchone()
            if not status:
                logging.error(f"[ERROR] –ù–æ–º–µ—Ä {number} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ numbers")
                bot.answer_callback_query(call.id, "‚ùå –ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
                return

            status = status[0]
            if '—Å–ª–µ—Ç' in status.lower():
                logging.debug(f"[DEBUG] –ù–æ–º–µ—Ä {number} —É–∂–µ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ —Å–ª–µ—Ç–µ–≤—à–∏–π (—Å—Ç–∞—Ç—É—Å: {status}), –∫–Ω–æ–ø–∫–∏ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è")
                bot.send_message(
                    group_chat_id,
                    f"üì± <b>–í–¶ {tg_number}</b>\n"
                    f"üî¢ <b>–ù–æ–º–µ—Ä:</b> <code>{number}</code>\n"
                    f"‚ùå –ù–æ–º–µ—Ä —É–∂–µ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ —Å–ª–µ—Ç–µ–≤—à–∏–π ({status})",
                    parse_mode='HTML'
                )
                return

            current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            logging.debug(f"[DEBUG] –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time}")
            cursor.execute('''
                UPDATE numbers 
                SET STATUS = '–∞–∫—Ç–∏–≤–µ–Ω', TAKE_DATE = ?, CONFIRMED_BY_OWNER_ID = ?
                WHERE NUMBER = ?
            ''', (current_time, user_id, number))
            conn.commit()
            logging.debug(f"[DEBUG] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–æ–º–µ—Ä–∞ {number} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        message_id = code_messages[number]['message_id']
        try:
            bot.delete_message(group_chat_id, message_id)
            logging.debug(f"[DEBUG] –°—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ {group_chat_id}, message_id={message_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ")
        except telebot.apihelper.ApiTelegramException as e:
            if "message to delete not found" in str(e) or e.result.status_code == 400:
                logging.warning(f"[WARNING] –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ (group_chat_id={group_chat_id}, message_id={message_id}), –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º")
            else:
                logging.error(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º")
        except Exception as e:
            logging.error(f"[ERROR] –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º")

        markup = telebot.types.InlineKeyboardMarkup()
        markup.add(
            telebot.types.InlineKeyboardButton("‚ö†Ô∏è –ù–µ –≤—Å—Ç–∞–ª", callback_data=f"not_active_{number}_{tg_number}"),
            telebot.types.InlineKeyboardButton("–û—à–∏–±–∫–∞", callback_data=f"error_{number}_{tg_number}")
        )
        bot.send_message(
            group_chat_id,  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É
            f"üì± <b>–í–¶ {tg_number}</b>\n"
            f"üî¢ <b>–ù–æ–º–µ—Ä:</b> <code>{number}</code>\n"
            f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω\n"
            f"<i>–ï—Å–ª–∏ –Ω–µ —Ç–∞–∫, –Ω–∞–∂–º–∏—Ç–µ ¬´‚ö†Ô∏è –ù–µ –≤—Å—Ç–∞–ª¬ª –∏–ª–∏ ¬´–û—à–∏–±–∫–∞¬ª</i>",
            reply_markup=markup,
            parse_mode='HTML'
        )

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ —É –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        try:
            bot.delete_message(owner_id, call.message.message_id)
            bot.send_message(owner_id, f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à –Ω–æ–º–µ—Ä <code>{number}</code> —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω! ‚úÖ\n‚è≥ –û—Ç—Å—á—ë—Ç –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞—Ç.", parse_mode='HTML')
            logging.debug(f"[DEBUG] –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ —É –≤–ª–∞–¥–µ–ª—å—Ü–∞ {user_id} —É–¥–∞–ª–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        except Exception as e:
            logging.error(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ —É –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ: {e}")

        logging.debug(f"[DEBUG] –ù–æ–º–µ—Ä {number} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –∏ –ø–µ—Ä–µ–≤–µ–¥—ë–Ω –≤ —Å—Ç–∞—Ç—É—Å '–∞–∫—Ç–∏–≤–µ–Ω' –≤–ª–∞–¥–µ–ª—å—Ü–µ–º")
        bot.answer_callback_query(call.id, "‚úÖ –ù–æ–º–µ—Ä –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω, –æ—Ç—Å—á—ë—Ç –Ω–∞—á–∞—Ç!")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞: {str(e)} - –ö–æ–Ω—Ç–µ–∫—Å—Ç: number={number}, user_id={user_id}")
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏.") 

@bot.callback_query_handler(func=lambda call: call.data.startswith("not_active_"))
def process_not_active(call):
    try:
        data_parts = call.data.split("_")
        if len(data_parts) < 3:
            logging.error(f"[ERROR] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {call.data}, expected at least 3 parts")
            bot.answer_callback_query(call.id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        number = data_parts[2]
        tg_number = data_parts[3] if len(data_parts) > 3 else None
        if not tg_number:
            logging.error(f"[ERROR] –ù–µ –Ω–∞–π–¥–µ–Ω tg_number –≤ callback_data: {call.data}")
            bot.answer_callback_query(call.id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        user_id = call.from_user.id
        group_chat_id = call.message.chat.id

        logging.debug(f"[DEBUG] –ü–æ–º–µ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ –∫–∞–∫ '–ù–µ –≤—Å—Ç–∞–ª': number={number}, tg_number={tg_number}, user_id={user_id}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –Ω–æ–º–µ—Ä–∞
        with db_module.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT STATUS FROM numbers WHERE NUMBER = ?', (number,))
            status = cursor.fetchone()
            if not status:
                bot.answer_callback_query(call.id, "‚ùå –ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return
            status = status[0]
            forbidden_statuses = ["—Å–ª—ë—Ç 1/2 —Ö–æ–ª–¥", "—Å–ª—ë—Ç 2/2", "—Å–ª—ë—Ç 2/2+", "–Ω–µ –≤–∞–ª–∏–¥"]
            if status in forbidden_statuses:
                bot.answer_callback_query(call.id, f"‚ùå –ù–æ–º–µ—Ä {number} —É–∂–µ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ —Å–ª–µ—Ç–µ–≤—à–∏–π ({status}), –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
                return

        # –ü–æ–ª—É—á–∞–µ–º ID –≤–ª–∞–¥–µ–ª—å—Ü–∞ –Ω–æ–º–µ—Ä–∞
        with db_module.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT ID_OWNER FROM numbers WHERE NUMBER = ?', (number,))
            owner_id = cursor.fetchone()
            if not owner_id:
                bot.answer_callback_query(call.id, "‚ùå –ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return
            owner_id = owner_id[0]

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –≤–ª–∞–¥–µ–ª—å—Ü–∞
        with db_module.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('UPDATE users SET WARNINGS = WARNINGS + 1 WHERE ID = ?', (owner_id,))
            conn.commit()

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–æ–º–µ—Ä–∞ –Ω–∞ "‚ö†Ô∏è –ù–µ –≤—Å—Ç–∞–ª"
        with db_module.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('UPDATE numbers SET STATUS = ? WHERE NUMBER = ?', ("‚ö†Ô∏è –ù–µ –≤—Å—Ç–∞–ª", number))
            conn.commit()

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞
        markup_owner = telebot.types.InlineKeyboardMarkup()
        markup_owner.add(types.InlineKeyboardButton("üì± –°–¥–∞—Ç—å –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä", callback_data="submit_number"))
        markup_owner.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        bot.send_message(
            owner_id,
            f"‚ö†Ô∏è –í–∞—à –Ω–æ–º–µ—Ä <code>{number}</code> –±—ã–ª –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ '–ù–µ –≤—Å—Ç–∞–ª'. ‚ùå\n"
            f"üîí –≠—Ç–æ –¥–æ–±–∞–≤–∏–ª–æ –≤–∞–º 1 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä.",
            reply_markup=markup_owner,
            parse_mode='HTML'
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        bot.edit_message_text(
            f"üì± <b>–í–¶ {tg_number}</b>\n"
            f"üî¢ <b>–ù–æ–º–µ—Ä:</b> <code>{number}</code>\n"
            f"‚ö†Ô∏è –í—ã –æ—Ç–º–µ—Ç–∏–ª–∏ –∫–∞–∫ '–ù–µ –≤—Å—Ç–∞–ª'",
            group_chat_id,
            call.message.message_id,
            parse_mode='HTML'
        )

        logging.debug(f"[DEBUG] –ù–æ–º–µ—Ä {number} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ '–ù–µ –≤—Å—Ç–∞–ª', –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤–ª–∞–¥–µ–ª—å—Ü—É {owner_id}")
        bot.answer_callback_query(call.id, "‚úÖ –ù–æ–º–µ—Ä –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ '–ù–µ –≤—Å—Ç–∞–ª'.")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–º–µ—Ç–∫–µ –Ω–æ–º–µ—Ä–∞ –∫–∞–∫ '–ù–µ –≤—Å—Ç–∞–ª': {e}")
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ.")

@bot.callback_query_handler(func=lambda call: call.data.startswith("error_"))
def process_error(call):
    try:
        _, number, tg_number = call.data.split("_")
        user_id = call.from_user.id
        chat_id = call.message.chat.id

        logging.debug(f"[DEBUG] –ü–æ–º–µ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ –∫–∞–∫ –æ—à–∏–±–∫–∞: number={number}, tg_number={tg_number}, user_id={user_id}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –Ω–æ–º–µ—Ä–∞
        with db_module.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT STATUS FROM numbers WHERE NUMBER = ?', (number,))
            status = cursor.fetchone()
            if not status:
                bot.answer_callback_query(call.id, "‚ùå –ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return
            status = status[0]
            forbidden_statuses = ["—Å–ª—ë—Ç 1/2 —Ö–æ–ª–¥", "—Å–ª—ë—Ç 2/2", "—Å–ª—ë—Ç 2/2+", "–Ω–µ –≤–∞–ª–∏–¥"]
            if status in forbidden_statuses:
                bot.answer_callback_query(call.id, f"‚ùå –ù–æ–º–µ—Ä {number} —É–∂–µ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ —Å–ª–µ—Ç–µ–≤—à–∏–π ({status}), –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
                return

        with db_module.get_db() as conn:
            cursor = conn.cursor()
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–û—à–∏–±–∫–∞" –∏ –ø–æ–º–µ—á–∞–µ–º –Ω–æ–º–µ—Ä –∫–∞–∫ –∏—Å–∫–ª—é—á—ë–Ω–Ω—ã–π –∏–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Å–¥–∞—á–∏
            cursor.execute('UPDATE numbers SET STATUS = ?, IS_EXCLUDED = 1 WHERE NUMBER = ?', ("–û—à–∏–±–∫–∞", number))
            conn.commit()

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ
        bot.edit_message_text(
            f"üì± <b>–í–¶ {tg_number}</b>\n"
            f"üî¢ <b>–ù–æ–º–µ—Ä:</b> <code>{number}</code>\n"
            f"‚ùå <b>–ü–æ–º–µ—á–µ–Ω –∫–∞–∫ –æ—à–∏–±–∫–∞</b>",
            chat_id,
            call.message.message_id,
            parse_mode='HTML'
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞
        with db_module.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT ID_OWNER FROM numbers WHERE NUMBER = ?', (number,))
            owner_id = cursor.fetchone()
        if owner_id:
            markup_owner = telebot.types.InlineKeyboardMarkup()
            markup_owner.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
            bot.send_message(
                owner_id[0],
                f"‚ö†Ô∏è –í–∞—à –Ω–æ–º–µ—Ä <code>{number}</code> –±—ã–ª –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –æ—à–∏–±–∫–∞. ‚ùå\n"
                f"–≠—Ç–æ—Ç –Ω–æ–º–µ—Ä –∏—Å–∫–ª—é—á—ë–Ω –∏–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Å–¥–∞—á–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä.",
                reply_markup=markup_owner,
                parse_mode='HTML'
            )

        logging.debug(f"[DEBUG] –ù–æ–º–µ—Ä {number} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ '–û—à–∏–±–∫–∞'")
        bot.answer_callback_query(call.id, "‚úÖ –ù–æ–º–µ—Ä –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –æ—à–∏–±–∫–∞.")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–º–µ—Ç–∫–µ –Ω–æ–º–µ—Ä–∞ –∫–∞–∫ –æ—à–∏–±–∫–∞: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–º–µ—Ç–∫–µ.")

@bot.callback_query_handler(func=lambda call: call.data.startswith("invalid_code_"))
def invalid_code(call):
    try:
        parts = call.data.split("_")
        if len(parts) < 4:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö!")
            return

        number = parts[2]
        tg_number = int(parts[3])

        with db_module.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT ID_OWNER, MODERATOR_ID, GROUP_CHAT_ID
                FROM numbers
                WHERE NUMBER = ? AND STATUS = "taken"
            ''', (number,))
            number_data = cursor.fetchone()

        if not number_data:
            bot.answer_callback_query(call.id, "‚ùå –ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –≤ —Å—Ç–∞—Ç—É—Å–µ 'taken'!")
            return

        owner_id, moderator_id, group_chat_id = number_data

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –Ω–æ–º–µ—Ä–∞
        if call.from_user.id != owner_id:
            bot.answer_callback_query(call.id, "‚ùå –í—ã –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü —ç—Ç–æ–≥–æ –Ω–æ–º–µ—Ä–∞!")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–æ–º–µ—Ä–∞ –Ω–∞ "—Å–ª–µ—Ç–µ–ª"
        current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        with db_module.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('''
                UPDATE numbers 
                SET STATUS = "—Å–ª–µ—Ç–µ–ª", 
                    SHUTDOWN_DATE = ?,
                    VERIFICATION_CODE = NULL
                WHERE NUMBER = ?
            ''', (current_time, number))
            conn.commit()

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot.send_message(
            owner_id,
            f"‚ùå –ù–æ–º–µ—Ä <code>{number}</code> –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π.",
            parse_mode='HTML'
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ
        if number in code_messages:
            bot.edit_message_text(
                f"üì± <b>–í–¶ {tg_number}</b>\n"
                f"‚ùå –ù–æ–º–µ—Ä <code>{number}</code> –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –≤ {current_time}.",
                code_messages[number]["chat_id"],
                code_messages[number]["message_id"],
                parse_mode='HTML'
            )
            del code_messages[number]

        bot.answer_callback_query(call.id, "‚ùå –ù–æ–º–µ—Ä –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π.")

        print(f"[DEBUG] –ù–æ–º–µ—Ä {number} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {owner_id}")

    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ –∫–æ–¥–∞: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–¥–∞!")


def create_back_to_main_markup():
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    return markup

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –Ω–æ–º–µ—Ä–æ–≤

@bot.callback_query_handler(func=lambda call: call.data.startswith("moderator_reject_"))
def handle_number_rejection(call):
    number = call.data.split("_")[2]
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT ID_OWNER FROM numbers WHERE NUMBER = ?', (number,))
        owner = cursor.fetchone()
        cursor.execute('DELETE FROM numbers WHERE NUMBER = ?', (number,))
        conn.commit()

        if owner:
            markup_owner = types.InlineKeyboardMarkup()
            markup_owner.add(types.InlineKeyboardButton("üì± –°–¥–∞—Ç—å –Ω–æ–º–µ—Ä —Å–Ω–æ–≤–∞", callback_data="submit_number"))
            markup_owner.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
            try:
                bot.send_message(owner[0], 
                               f"‚ùå –í–∞—à –Ω–æ–º–µ—Ä {number} –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.\nüì± –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä –∏ —Å–¥–∞–π—Ç–µ –∑–∞–Ω–æ–≤–æ.", 
                               reply_markup=markup_owner)
            except:
                pass

    markup_mod = types.InlineKeyboardMarkup()
    markup_mod.add(types.InlineKeyboardButton("üì≤ –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä", callback_data="get_number"))
    markup_mod.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    bot.edit_message_text(f"üì± –ù–æ–º–µ—Ä {number} –æ—Ç–∫–ª–æ–Ω–µ–Ω –∏ —É–¥–∞–ª—ë–Ω –∏–∑ –æ—á–µ—Ä–µ–¥–∏.\n‚ùå –ù–æ–º–µ—Ä –Ω–µ –≤—Å—Ç–∞–ª.", 
                         call.message.chat.id, 
                         call.message.message_id, 
                         reply_markup=markup_mod)





@bot.callback_query_handler(func=lambda call: call.data.startswith("number_active_"))
def number_active(call):
    try:
        parts = call.data.split("_")
        if len(parts) < 4:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö!")
            return

        number = parts[2]
        tg_number = int(parts[3])

        with db.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT ID_OWNER FROM numbers WHERE NUMBER = ?', (number,))
            owner = cursor.fetchone()
            if not owner:
                bot.answer_callback_query(call.id, "‚ùå –ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å '–∞–∫—Ç–∏–≤–µ–Ω', ID –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –∏ –≤—Ä–µ–º—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            current_time = datetime.now().strftime("%H:%M")
            cursor.execute(
                '''
                UPDATE numbers 
                SET STATUS = ?, 
                    CONFIRMED_BY_MODERATOR_ID = ?, 
                    TAKE_DATE = ? 
                WHERE NUMBER = ?
                ''',
                ('–∞–∫—Ç–∏–≤–µ–Ω', call.from_user.id, datetime.now().strftime("%Y-%m-%d %H:%M:%S"), number)
            )
            conn.commit()
            print(f"[DEBUG] –ù–æ–º–µ—Ä {number} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º {call.from_user.id}, —Å—Ç–∞—Ç—É—Å: –∞–∫—Ç–∏–≤–µ–Ω, TAKE_DATE: {current_time}")

        if owner:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
            try:
                bot.send_message(
                    owner[0],
                    f"‚úÖ –í–∞—à –Ω–æ–º–µ—Ä {number} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –∏ —Ç–µ–ø–µ—Ä—å –∞–∫—Ç–∏–≤–µ–Ω.\n‚è≥ –í—Å—Ç–∞–ª: {current_time}.",
                    reply_markup=markup,
                    parse_mode='HTML'
                )
                print(f"[DEBUG] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–ª–∞–¥–µ–ª—å—Ü—É {owner[0]} –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞ {number}")
            except Exception as e:
                print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É {owner[0]}: {e}")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ
        bot.edit_message_text(
            f"üì± <b>–í–¶ {tg_number}</b>\n"
            f"‚úÖ –ù–æ–º–µ—Ä <code>{number}</code> –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –≤ {current_time}.",
            call.message.chat.id,
            call.message.message_id,
            parse_mode='HTML'
        )
        bot.answer_callback_query(call.id, "‚úÖ –ù–æ–º–µ—Ä —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!")

    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –≤ number_active: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞!")


@bot.callback_query_handler(func=lambda call: call.data.startswith("invalid_"))
def handle_invalid_number(call):
    number = call.data.split("_")[1]
    try:
        with db.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT ID_OWNER, MODERATOR_ID FROM numbers WHERE NUMBER = ?', (number,))
            result = cursor.fetchone()
            if not result:
                bot.answer_callback_query(call.id, "‚ùå –ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return
            owner_id, moderator_id = result
            if call.from_user.id != moderator_id and call.from_user.id not in config.ADMINS_ID:
                bot.answer_callback_query(call.id, "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä!")
                return

            cursor.execute('UPDATE numbers SET STATUS = "—Å–ª–µ—Ç–µ–ª", SHUTDOWN_DATE = ?, VERIFICATION_CODE = NULL WHERE NUMBER = ?',
                          (datetime.now().strftime("%Y-%m-%d %H:%M:%S"), number))
            conn.commit()

        markup = create_back_to_main_markup()
        safe_send_message(
            owner_id,
            f"‚ùå –í–∞—à –Ω–æ–º–µ—Ä <code>{number}</code> –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.\n"
            f"üì± –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä –∏ —Å–¥–∞–π—Ç–µ –∑–∞–Ω–æ–≤–æ.",
            parse_mode='HTML',
            reply_markup=markup
        )

        bot.edit_message_text(
            f"‚úÖ –ù–æ–º–µ—Ä <code>{number}</code> –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ —Å–ª–µ—Ç–µ–≤—à–∏–π.",
            call.message.chat.id,
            call.message.message_id,
            parse_mode='HTML',
            reply_markup=markup
        )
        if number in code_messages:
            del code_messages[number]
        bot.answer_callback_query(call.id, "‚úÖ –ù–æ–º–µ—Ä –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ —Å–ª–µ—Ç–µ–≤—à–∏–π.")

    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –≤ handle_invalid_number: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–º–µ—Ä–∞.")


@bot.callback_query_handler(func=lambda call: call.data.startswith("number_failed_"))
def handle_number_failed(call):
    number = call.data.split("_")[2]
    try:
        with db.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT TAKE_DATE, ID_OWNER, CONFIRMED_BY_MODERATOR_ID, STATUS FROM numbers WHERE NUMBER = ?', (number,))
            data = cursor.fetchone()
            if not data:
                bot.answer_callback_query(call.id, "‚ùå –ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return
            
            take_date, owner_id, confirmed_by_moderator_id, status = data
            
            if status == "–æ—Ç—Å—Ç–æ—è–ª":
                bot.answer_callback_query(call.id, "‚úÖ –ù–æ–º–µ—Ä —É–∂–µ –æ—Ç—Å—Ç–æ—è–ª —Å–≤–æ—ë –≤—Ä–µ–º—è!")
                return

            cursor.execute('SELECT HOLD_TIME FROM settings')
            result = cursor.fetchone()
            hold_time = result[0] if result else 5
            
            end_time = datetime.now()
            if take_date in ("0", "1"):
                work_time = 0
                worked_enough = False
            else:
                start_time = datetime.strptime(take_date, "%Y-%m-%d %H:%M:%S")
                work_time = (end_time - start_time).total_seconds() / 60
                worked_enough = work_time >= hold_time
            
            shutdown_date = end_time.strftime("%Y-%m-%d %H:%M:%S")
            cursor.execute('UPDATE numbers SET SHUTDOWN_DATE = ?, STATUS = "—Å–ª–µ—Ç–µ–ª" WHERE NUMBER = ?', 
                          (shutdown_date, number))
            conn.commit()
        
        mod_message = (
            f"üì± –ù–æ–º–µ—Ä: {number}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: —Å–ª–µ—Ç–µ–ª\n"
        )
        if take_date not in ("0", "1"):
            mod_message += f"üü¢ –í—Å—Ç–∞–ª: {take_date}\n"
        mod_message += f"üî¥ –°–ª–µ—Ç–µ–ª: {shutdown_date}\n"
        if not worked_enough:
            mod_message += f"‚ö†Ô∏è –ù–æ–º–µ—Ä –Ω–µ –æ—Ç—Ä–∞–±–æ—Ç–∞–ª –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è ({hold_time} –º–∏–Ω—É—Ç)!\n"
        mod_message += f"‚è≥ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {work_time:.2f} –º–∏–Ω—É—Ç"
        
        owner_message = (
            f"‚ùå –í–∞—à –Ω–æ–º–µ—Ä {number} —Å–ª–µ—Ç–µ–ª.\n"
            f"üì± –ù–æ–º–µ—Ä: {number}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: —Å–ª–µ—Ç–µ–ª\n"
        )
        if take_date not in ("0", "1"):
            owner_message += f"üü¢ –í—Å—Ç–∞–ª: {take_date}\n"
        owner_message += f"üî¥ –°–ª–µ—Ç–µ–ª: {shutdown_date}\n"
        if not worked_enough:
            owner_message += f"‚è≥ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {work_time:.2f} –º–∏–Ω—É—Ç"
        
        bot.send_message(owner_id, owner_message, parse_mode='HTML')
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="moderator_numbers"))
        bot.edit_message_text(mod_message, 
                            call.message.chat.id, 
                            call.message.message_id, 
                            reply_markup=markup,
                            parse_mode='HTML')
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ handle_number_failed: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–º–µ—Ä–∞.")


#–ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–æ–º–µ—Ä–æ–≤:




@bot.callback_query_handler(func=lambda call: call.data.startswith("view_failed_number_"))
def view_failed_number(call):
    number = call.data.split("_")[3]
    user_id = call.from_user.id
    is_moderator = db.is_moderator(user_id)
    
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT STATUS, TAKE_DATE, SHUTDOWN_DATE FROM numbers WHERE NUMBER = ?', (number,))
        data = cursor.fetchone()
    
    if not data:
        bot.answer_callback_query(call.id, "‚ùå –ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    status, take_date, shutdown_date = data
    text = (
        f"üì± –ù–æ–º–µ—Ä: <code>{number}</code>\n"
        f"üìä –°—Ç–∞—Ç—É—Å: {status}\n"
        f"üü¢ –í—Å—Ç–∞–ª: {take_date}\n"
        f"üî¥ –°–ª–µ—Ç–µ–ª: {shutdown_date}\n"
    )
    
    markup = types.InlineKeyboardMarkup()
    back_callback = "my_numbers" if not is_moderator else "moderator_numbers"
    markup.add(types.InlineKeyboardButton("üîô –í –Ω–æ–º–µ—Ä–∞", callback_data=back_callback))
    markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    bot.edit_message_text(text, call.message.chat.id, call.message.message_id, parse_mode='HTML', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("view_stood_number_"))
def view_stood_number(call):
    number = call.data.split("_")[3]
    user_id = call.from_user.id
    is_moderator = db.is_moderator(user_id)
    
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT STATUS, TAKE_DATE, SHUTDOWN_DATE FROM numbers WHERE NUMBER = ?', (number,))
        data = cursor.fetchone()
    
    if not data:
        bot.answer_callback_query(call.id, "‚ùå –ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    status, take_date, shutdown_date = data
    text = (
        f"üì± –ù–æ–º–µ—Ä: <code>{number}</code>\n"
        f"üìä –°—Ç–∞—Ç—É—Å: {status}\n"
        f"üü¢ –í—Å—Ç–∞–ª: {take_date}\n"
        f"üü¢ –û—Ç—Å—Ç–æ—è–ª: {shutdown_date}\n"
    )
    
    markup = types.InlineKeyboardMarkup()
    back_callback = "my_numbers" if not is_moderator else "moderator_numbers"
    markup.add(types.InlineKeyboardButton("üîô –í –Ω–æ–º–µ—Ä–∞", callback_data=back_callback))
    markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    bot.edit_message_text(text, call.message.chat.id, call.message.message_id, parse_mode='HTML', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("view_number_details_"))
def view_number_details(call):
    number = call.data.split("_")[3]
    user_id = call.from_user.id
    is_moderator = db.is_moderator(user_id)
    
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('''
            SELECT STATUS, TAKE_DATE, SHUTDOWN_DATE, MODERATOR_ID, CONFIRMED_BY_MODERATOR_ID 
            FROM numbers 
            WHERE NUMBER = ?
        ''', (number,))
        data = cursor.fetchone()
    
    if not data:
        bot.answer_callback_query(call.id, "‚ùå –ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    status, take_date, shutdown_date, moderator_id, confirmed_by_moderator_id = data
    text = (
        f"üì± –ù–æ–º–µ—Ä: <code>{number}</code>\n"
        f"üìä –°—Ç–∞—Ç—É—Å: {status}\n"
    )
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–í—Å—Ç–∞–ª" —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤ "–∞–∫—Ç–∏–≤–µ–Ω" –∏–ª–∏ "–æ—Ç—Å—Ç–æ—è–ª" –∏ –µ—Å–ª–∏ TAKE_DATE –Ω–µ "0" –∏–ª–∏ "1"
    if status in ("–∞–∫—Ç–∏–≤–µ–Ω", "–æ—Ç—Å—Ç–æ—è–ª") and take_date not in ("0", "1"):
        text += f"üü¢ –í—Å—Ç–∞–ª: {take_date}\n"
    if shutdown_date and shutdown_date != "0":
        text += f"{'üü¢ –û—Ç—Å—Ç–æ—è–ª' if status == '–æ—Ç—Å—Ç–æ—è–ª' else 'üî¥ –°–ª–µ—Ç–µ–ª'}: {shutdown_date}\n"
    
    markup = types.InlineKeyboardMarkup()
    if is_moderator and shutdown_date == "0" and status == "–∞–∫—Ç–∏–≤–µ–Ω" and confirmed_by_moderator_id == user_id:
        markup.add(types.InlineKeyboardButton("-", callback_data=f""))
    
    back_callback = "my_numbers" if not is_moderator else "moderator_numbers"
    markup.add(types.InlineKeyboardButton("üîô –í –Ω–æ–º–µ—Ä–∞", callback_data=back_callback))
    markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    
    bot.edit_message_text(text, call.message.chat.id, call.message.message_id, parse_mode='HTML', reply_markup=markup)
    

       

































active_code_requests = {}

@bot.message_handler(content_types=['text'], func=lambda message: message.chat.type in ['group', 'supergroup'])
def handle_group_commands(message):
    try:
        user_id = message.from_user.id
        chat_id = message.chat.id
        message_id = message.message_id
        text = message.text.strip()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∞—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–æ–π
        if chat_id not in db_module.get_all_group_ids():
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –≤—ÜN, –ø–∫N
        pattern = r'^(–≤—Ü|–ø–∫|–í–¶|–ü–ö)\s*(\d+)$'
        match = re.match(pattern, text, re.IGNORECASE)
        if match:
            prefix, number_str = match.groups()
            tg_number = int(number_str)
            if not 1 <= tg_number <= 70:
                bot.reply_to(message, "‚ùå –ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ 70.", parse_mode='HTML')
                return
            get_number_in_group(user_id, chat_id, message_id, tg_number)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Å–ª–µ—Ç/—Å–ª—ë—Ç +–Ω–æ–º–µ—Ä
        valid_commands = ['—Å–ª–µ—Ç', '—Å–ª—ë—Ç', '–°–ª–µ—Ç', '–°–ª—ë—Ç', '–°–õ–ï–¢', '–°–õ–Å–¢', '/—Å–ª–µ—Ç', '/c–ª—ë—Ç', '/–°–õ–ï–¢', '/–°–õ–Å–¢']
        parts = text.split()
        if parts and parts[0] in valid_commands:
            logging.info(f"[DEBUG] –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ –≤—ã–∑–≤–∞–Ω, —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}, chat_type: {message.chat.type}, user_id: {message.from_user.id}, chat_id: {message.chat.id}")
            is_mod = db_module.is_moderator(user_id)
            logging.info(f"[DEBUG] –ü—Ä–∞–≤–∞: is_moderator({user_id}) = {is_mod}, ADMINS_ID = {config.ADMINS_ID}")
            if not is_mod and user_id not in config.ADMINS_ID:
                bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤!")
                logging.info(f"[DEBUG] –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è user_id {user_id}")
                return

            if len(parts) != 2:
                bot.reply_to(message, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: <–∫–æ–º–∞–Ω–¥–∞> +–Ω–æ–º–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–ª—ë—Ç +7900123455)")
                logging.info(f"[DEBUG] –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã {text} –æ—Ç user_id {user_id}")
                return

            number = parts[1].strip()
            logging.info(f"[DEBUG] –ò–∑–≤–ª–µ—á—ë–Ω –Ω–æ–º–µ—Ä: {number}")

            if not number.startswith('+') or len(number) < 10:
                bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞!")
                logging.info(f"[DEBUG] –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ {number} –æ—Ç user_id {user_id}")
                return

            with db_module.get_db() as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    SELECT TAKE_DATE, STATUS, HOLDS_COUNT
                    FROM numbers
                    WHERE NUMBER = ?
                ''', (number,))
                data = cursor.fetchone()

                if not data:
                    bot.reply_to(message, f"‚ùå –ù–æ–º–µ—Ä {number} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ!")
                    logging.info(f"[DEBUG] –ù–æ–º–µ—Ä {number} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è user_id {user_id}")
                    return

                take_date, status, holds_count = data
                end_time = datetime.now()
                shutdown_date = end_time.strftime("%Y-%m-%d %H:%M:%S")

                if status == "–æ—Ç—Å—Ç–æ—è–ª 1/2":
                    new_status = "—Å–ª—ë—Ç 1/2 —Ö–æ–ª–¥"
                elif status == "–æ—Ç—Å—Ç–æ—è–ª 2/2":
                    new_status = "—Å–ª—ë—Ç 2/2"
                elif status == "–æ—Ç—Å—Ç–æ—è–ª 2/2+ —Ö–æ–ª–¥":
                    new_status = "—Å–ª—ë—Ç 2/2+"
                elif status == "taken":
                    new_status = "–Ω–µ –≤–∞–ª–∏–¥"
                elif status == "–∞–∫—Ç–∏–≤–µ–Ω":
                    new_status = "–Ω–µ –≤–∞–ª–∏–¥"
                else:
                    bot.reply_to(message, f"‚ùå –ù–æ–º–µ—Ä {number} –Ω–µ –≤ –ø–æ–¥—Ö–æ–¥—è—â–µ–º —Å—Ç–∞—Ç—É—Å–µ –¥–ª—è —Å–ª—ë—Ç–∞ ({status})!")
                    logging.info(f"[DEBUG] –ù–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å—Ç–∞—Ç—É—Å {status} –¥–ª—è –Ω–æ–º–µ—Ä–∞ {number} –æ—Ç user_id {user_id}")
                    return

                cursor.execute('''
                    UPDATE numbers 
                    SET STATUS = ?, SHUTDOWN_DATE = ?, HOLDS_COUNT = HOLDS_COUNT + 1
                    WHERE NUMBER = ?
                ''', (new_status, shutdown_date, number))
                conn.commit()

                work_time = 0
                if take_date not in ("0", "1"):
                    start_time = datetime.strptime(take_date, "%Y-%m-%d %H:%M:%S")
                    work_time = (end_time - start_time).total_seconds() / 60

                mod_message = (
                    f"üì± –ù–æ–º–µ—Ä: <code>{number}</code>\n"
                    f"üìä –°—Ç–∞—Ç—É—Å: {new_status}\n"
                    f"üü¢ –í—Å—Ç–∞–ª: {take_date if take_date not in ('0', '1') else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
                    f"üî¥ –°–ª–µ—Ç–µ–ª: {shutdown_date}\n"
                    f"‚è≥ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {work_time:.2f} –º–∏–Ω—É—Ç"
                )
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
                bot.send_message(chat_id, mod_message, parse_mode='HTML', reply_markup=markup)

                with db_module.get_db() as conn:
                    cursor = conn.cursor()
                    cursor.execute('SELECT ID_OWNER FROM numbers WHERE NUMBER = ?', (number,))
                    owner_id = cursor.fetchone()
                    if owner_id:
                        owner_message = (
                            f"‚ùå –í–∞—à –Ω–æ–º–µ—Ä {number} —Å–ª–µ—Ç–µ–ª.\n"
                            f"üì± –ù–æ–º–µ—Ä: <code>{number}</code>\n"
                            f"üìä –°—Ç–∞—Ç—É—Å: {new_status}\n"
                            f"üü¢ –í—Å—Ç–∞–ª: {take_date if take_date not in ('0', '1') else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
                            f"üî¥ –°–ª–µ—Ç–µ–ª: {shutdown_date}\n"
                            f"‚è≥ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {work_time:.2f} –º–∏–Ω—É—Ç"
                        )
                        markup_owner = types.InlineKeyboardMarkup()
                        markup_owner.add(types.InlineKeyboardButton("üì± –°–¥–∞—Ç—å –Ω–æ–º–µ—Ä", callback_data="submit_number"))
                        markup_owner.add(types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
                        safe_send_message(owner_id[0], owner_message, parse_mode='HTML', reply_markup=markup_owner)

                logging.info(f"[DEBUG] –£—Å–ø–µ—à–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ {text} –¥–ª—è –Ω–æ–º–µ—Ä–∞ {number} –æ—Ç user_id {user_id}")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {text}: {e}")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.")


@bot.message_handler(content_types=['photo'], func=lambda message: message.chat.type in ['group', 'supergroup'])
def handle_photo_commands(message):
    try:
        user_id = message.from_user.id
        chat_id = message.chat.id
        message_id = message.message_id

        logging.debug(f"[DEBUG] –ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ: user_id={user_id}, chat_id={chat_id}, message_id={message_id}")

        if chat_id not in db_module.get_all_group_ids():
            logging.debug(f"[DEBUG] –ß–∞—Ç {chat_id} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
            return

        if not message.reply_to_message:
            logging.debug(f"[DEBUG] –ù–µ—Ç —Ä–µ–ø–ª–∞—è: message.reply_to_message={message.reply_to_message}")
            bot.reply_to(message, "‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–º–µ—Ä–æ–º.", parse_mode='HTML')
            return
        if message.reply_to_message.from_user.id != bot.user.id:
            logging.debug(f"[DEBUG] –†–µ–ø–ª–∞–π –Ω–µ –æ—Ç –±–æ—Ç–∞: reply_from={message.reply_to_message.from_user.id}, bot_id={bot.user.id}")
            bot.reply_to(message, "‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –º–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ.", parse_mode='HTML')
            return

        photo_id = message.photo[-1].file_id
        reply_message_id = message.reply_to_message.message_id

        logging.debug(f"[DEBUG] –§–æ—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: photo_id={photo_id}, reply_message_id={reply_message_id}")

        number = None
        tg_number = None
        owner_id = None
        if 'code_messages' in globals() and code_messages:
            logging.debug(f"[DEBUG] code_messages: {code_messages}")
            for num, data in code_messages.items():
                logging.debug(f"[DEBUG] –ü—Ä–æ–≤–µ—Ä–∫–∞: message_id={data['message_id']}, reply_message_id={reply_message_id}, chat_id={data['chat_id']}, current_chat_id={chat_id}")
                if (data['message_id'] == reply_message_id and
                        data['chat_id'] == chat_id and
                        user_id in active_code_requests and
                        any(req['number'] == num for req in active_code_requests[user_id].values())):
                    number = num
                    tg_number = data['tg_number']
                    owner_id = data['owner_id']
                    logging.debug(f"[DEBUG] –ù–∞–π–¥–µ–Ω –Ω–æ–º–µ—Ä: {number}, tg_number={tg_number}, owner_id={owner_id}")
                    break

        if not number or not tg_number or not owner_id:
            logging.debug(f"[DEBUG] –ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ code_messages –¥–ª—è reply_message_id={reply_message_id}")
            bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤—è–∑–∞—Ç—å —Ñ–æ—Ç–æ –∫ –Ω–æ–º–µ—Ä—É.", parse_mode='HTML')
            return

        with db_module.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT STATUS FROM numbers WHERE NUMBER = ?', (number,))
            status = cursor.fetchone()
            if status and status[0] != 'taken':
                logging.debug(f"[DEBUG] –ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {status[0]}")
                return

        with db_module.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('''
                UPDATE numbers 
                SET PHOTO_ID = ?
                WHERE NUMBER = ?
            ''', (photo_id, number))
            conn.commit()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        sent_message = bot.send_message(
            chat_id,
            f"üì≤ <b><u>–í–¶ {tg_number}</u></b>\n"
            f"üî• <b>–ù–æ–º–µ—Ä:</b> <code>{number}</code>\n"
            f"üé• <b>–§–æ—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ –∏ –ø—Ä–∏–Ω—è—Ç–∞! ‚úÖ</b>\n"
            f"<i>–û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üöÄ</i>",
            parse_mode='HTML'
        )
        code_messages[number] = {'message_id': sent_message.message_id, 'chat_id': chat_id, 'owner_id': owner_id, 'tg_number': tg_number}
        logging.debug(f"[DEBUG] –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É: chat_id={chat_id}, message_id={sent_message.message_id}")

        try:
            bot.delete_message(chat_id, message_id)
            logging.debug(f"[DEBUG] –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –æ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ {user_id} —É–¥–∞–ª–µ–Ω–æ, message_id={message_id}")
        except Exception as e:
            logging.error(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ: {e}")

        callback_data = f"confirm_code_{number}_{tg_number}"
        logging.debug(f"[DEBUG] –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω callback_data: {repr(callback_data)}")
        markup = telebot.types.InlineKeyboardMarkup()
        markup.add(
            telebot.types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=callback_data),
            telebot.types.InlineKeyboardButton("‚ùå –ù–µ –≤–∞–ª–∏–¥–Ω–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è", callback_data=f"invalid_code_{number}_{tg_number}")
        )
        try:
            bot.send_photo(
                owner_id,
                photo_id,
                caption=f"üì± <b><u>–í–¶ {tg_number}</u></b>\n"
                        f"üéâ –í–∞—à –Ω–æ–º–µ—Ä <code>{number}</code> –≤–∑—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É! üî•\n"
                        f"<i>üöÄ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ñ–æ—Ç–∫–∏ –∏–ª–∏ –æ—Ç–º–µ—Ç—å—Ç–µ, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫! ‚ùå</i>",
                reply_markup=markup,
                parse_mode='HTML'
            )
            logging.debug(f"[DEBUG] –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–ª–∞–¥–µ–ª—å—Ü—É {owner_id}")
        except Exception as e:
            logging.error(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –≤–ª–∞–¥–µ–ª—å—Ü—É {owner_id}: {e}")
            bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –≤–ª–∞–¥–µ–ª—å—Ü—É.", parse_mode='HTML')
            return

        print(f"[DEBUG] –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ {photo_id} –¥–ª—è –Ω–æ–º–µ—Ä–∞ {number}")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {e}")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.")

def safe_send_message(chat_id, text, parse_mode=None, reply_markup=None):
    try:
        bot.send_message(chat_id, text, parse_mode=parse_mode, reply_markup=reply_markup)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫–æ–¥–æ–≤ –ø–æ user_id
active_code_requests = {}


@bot.callback_query_handler(func=lambda call: call.data == "toggle_afk")
def toggle_afk(call):
    user_id = call.from_user.id
    db.update_last_activity(user_id)
    new_afk_status = db_module.toggle_afk_status(user_id)
    
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞ –ê–§–ö
    try:
        if new_afk_status:
            bot.send_message(
                call.message.chat.id,
                "üîî –í—ã –≤–æ—à–ª–∏ –≤ —Ä–µ–∂–∏–º –ê–§–ö. –í–∞—à–∏ –Ω–æ–º–µ—Ä–∞ —Å–∫—Ä—ã—Ç—ã. –ß—Ç–æ-–±—ã –≤—ã–π—Ç–∏ –∏–∑ —Äe–∂–∏–º–∞ –ê–§–ö, –ø—Ä–æ–ø–∏—à–∏—Ç–µ /start",
                parse_mode='HTML'
            )
        else:
            bot.send_message(
                call.message.chat.id,
                "üîî –í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –ê–§–ö. –í–∞—à–∏ –Ω–æ–º–µ—Ä–∞ —Å–Ω–æ–≤–∞ –≤–∏–¥–Ω—ã.",
                parse_mode='HTML'
            )
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ –ê–§–ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    
    with db_module.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT PRICE, HOLD_TIME FROM settings')
        result = cursor.fetchone()
        price, hold_time = result if result else (2.0, 5)
    
    is_admin = user_id in config.ADMINS_ID
    is_moderator = db_module.is_moderator(user_id)
    
    if is_moderator:
        welcome_text = "–ó–∞—è–≤–∫–∏"
    else:
        welcome_text = (
                f"<b>üì¢ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {config.SERVICE_NAME}</b>\n\n"
                f"<b>‚è≥ –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:</b> <code>{config.WORK_TIME}</code>\n\n"
                f"<b>üíº –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?</b>\n"
                f"‚Ä¢ <i>–í—ã —Å–¥–∞–µ—Ç–µ –Ω–æ–º–µ—Ä</i> ‚Äì <b>–º—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã.</b>\n"
                f"‚Ä¢ <i>–ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã</i> ‚Äì <b>–ø–æ—Å–ª–µ —Å—Ç–æ–ø –≤–æ—Ä–∫–∞.</b>\n\n"
                f"<b>üìç –ü–æ—á–µ–º—É –≤—ã–±–∏—Ä–∞—é—Ç {config.SERVICE_NAME}?</b>\n"
                f"‚úÖ <i>–ü—Ä–æ–∑—Ä–∞—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞</i>\n"
                f"‚úÖ <i>–í—ã–≥–æ–¥–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã –∏ –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã</i>\n"
                f"‚úÖ <i>–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7</i>\n\n"
                f"<b>üí∞ –¢–∞—Ä–∏—Ñ—ã –Ω–∞ —Å–¥–∞—á—É –Ω–æ–º–µ—Ä–æ–≤:</b>\n"
                f"‚ñ™Ô∏è 6$ –∑–∞ –Ω–æ–º–µ—Ä (—Ö–æ–ª–¥ 1-6$, 2-12$)\n\n"
                "<b>üîπ –ù–∞—á–Ω–∏—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!</b>",
        )
    
    markup = types.InlineKeyboardMarkup()
    if not is_moderator or is_admin:
        markup.row(
            types.InlineKeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
            types.InlineKeyboardButton("üì± –°–¥–∞—Ç—å –Ω–æ–º–µ—Ä", callback_data="submit_number")
        )
    if is_admin:
        markup.add(types.InlineKeyboardButton("‚öôÔ∏è –ê–¥–º–∏–Ω–∫–∞", callback_data="admin_panel"))
    if is_moderator:
        markup.add(
            types.InlineKeyboardButton("üì≤ –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä", callback_data="get_number"),
            types.InlineKeyboardButton("üìã –ú–æ–∏ –Ω–æ–º–µ—Ä–∞", callback_data="moderator_numbers")
        )
    afk_button_text = "üü¢ –í–∫–ª—é—á–∏—Ç—å –ê–§–ö" if not new_afk_status else "üî¥ –í—ã–∫–ª—é—á–∏—Ç—å –ê–§–ö"
    markup.add(types.InlineKeyboardButton(afk_button_text, callback_data="toggle_afk"))
    
    bot.edit_message_text(
        welcome_text,
        call.message.chat.id,
        call.message.message_id,
        parse_mode='HTML' if not is_moderator else None,
        reply_markup=markup
    )
    
    status_text = "–≤–∫–ª—é—á—ë–Ω" if new_afk_status else "–≤—ã–∫–ª—é—á–µ–Ω"
    bot.answer_callback_query(call.id, f"–†–µ–∂–∏–º –ê–§–ö {status_text}. –í–∞—à–∏ –Ω–æ–º–µ—Ä–∞ {'—Å–∫—Ä—ã—Ç—ã' if new_afk_status else '–≤–∏–¥–∏–º—ã'}.")


def init_db():
    db_module.create_tables()
    db_module.migrate_db()
    with db.get_db() as conn:
        cursor = conn.cursor()
        cursor.execute("PRAGMA table_info(numbers)")
        columns = [col[1] for col in cursor.fetchall()]
        
        if 'GROUP_CHAT_ID' not in columns:
            try:
                cursor.execute('ALTER TABLE numbers ADD COLUMN GROUP_CHAT_ID INTEGER')
                print("[INFO] –°—Ç–æ–ª–±–µ—Ü GROUP_CHAT_ID —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü—É numbers.")
            except sqlite3.OperationalError as e:
                print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–æ–ª–±–µ—Ü GROUP_CHAT_ID: {e}")

        if 'TG_NUMBER' not in columns:
            try:
                cursor.execute('ALTER TABLE numbers ADD COLUMN TG_NUMBER INTEGER DEFAULT 1')
                print("[INFO] –°—Ç–æ–ª–±–µ—Ü TG_NUMBER —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü—É numbers.")
            except sqlite3.OperationalError as e:
                print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–æ–ª–±–µ—Ü TG_NUMBER: {e}")

        if 'VERIFICATION_CODE' not in columns:
            try:
                cursor.execute('ALTER TABLE numbers ADD COLUMN VERIFICATION_CODE TEXT')
                print("[INFO] –°—Ç–æ–ª–±–µ—Ü VERIFICATION_CODE —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü—É numbers.")
            except sqlite3.OperationalError as e:
                print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–æ–ª–±–µ—Ü VERIFICATION_CODE: {e}")

        if 'IS_EXCLUDED' not in columns:
            try:
                cursor.execute('ALTER TABLE numbers ADD COLUMN IS_EXCLUDED INTEGER DEFAULT 0')
                print("[INFO] –°—Ç–æ–ª–±–µ—Ü IS_EXCLUDED —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü—É numbers.")
            except sqlite3.OperationalError as e:
                print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–æ–ª–±–µ—Ü IS_EXCLUDED: {e}")

        cursor.execute("PRAGMA table_info(users)")
        user_columns = [col[1] for col in cursor.fetchall()]
        
        if 'IS_AFK' not in user_columns:
            try:
                cursor.execute('ALTER TABLE users ADD COLUMN IS_AFK INTEGER DEFAULT 0')
                print("[INFO] –°—Ç–æ–ª–±–µ—Ü IS_AFK —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü—É users.")
            except sqlite3.OperationalError as e:
                print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–æ–ª–±–µ—Ü IS_AFK: {e}")

        if 'LAST_ACTIVITY' not in user_columns:
            try:
                cursor.execute('ALTER TABLE users ADD COLUMN LAST_ACTIVITY TEXT')
                print("[INFO] –°—Ç–æ–ª–±–µ—Ü LAST_ACTIVITY —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü—É users.")
            except sqlite3.OperationalError as e:
                print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–æ–ª–±–µ—Ü LAST_ACTIVITY: {e}")

        if 'WARNINGS' not in user_columns:
            try:
                cursor.execute('ALTER TABLE users ADD COLUMN WARNINGS INTEGER DEFAULT 0')
                print("[INFO] –°—Ç–æ–ª–±–µ—Ü WARNINGS —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü—É users.")
            except sqlite3.OperationalError as e:
                print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–æ–ª–±–µ—Ü WARNINGS: {e}")

        conn.commit()

@bot.callback_query_handler(func=lambda call: call.data.startswith("number_invalid_"))
def number_invalid(call):
    try:
        parts = call.data.split("_")
        if len(parts) < 4:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö!")
            return

        number = parts[2]
        tg_number = int(parts[3])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        if not db_module.is_moderator(call.from_user.id) and call.from_user.id not in config.ADMINS_ID:
            bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–º–µ—Ä–∞!")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–æ–º–µ—Ä–∞ –Ω–∞ "—Å–ª–µ—Ç–µ–ª"
        current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        with db_module.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('''
                UPDATE numbers 
                SET STATUS = "—Å–ª–µ—Ç–µ–ª", 
                    SHUTDOWN_DATE = ?,
                    VERIFICATION_CODE = NULL
                WHERE NUMBER = ?
            ''', (current_time, number))
            conn.commit()

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞
        with db_module.get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT ID_OWNER FROM numbers WHERE NUMBER = ?', (number,))
            owner = cursor.fetchone()

        if owner:
            try:
                bot.send_message(
                    owner[0],
                    f"‚ùå –í–∞—à –Ω–æ–º–µ—Ä <code>{number}</code> –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π.",
                    parse_mode='HTML'
                )
                print(f"[DEBUG] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–ª–∞–¥–µ–ª—å—Ü—É {owner[0]} –æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –Ω–æ–º–µ—Ä–∞ {number}")
            except Exception as e:
                print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É {owner[0]}: {e}")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ
        if number in code_messages:
            bot.edit_message_text(
                f"üì± <b>–í–¶ {tg_number}</b>\n"
                f"‚ùå –ù–æ–º–µ—Ä <code>{number}</code> –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –≤ {current_time}.",
                code_messages[number]["chat_id"],
                code_messages[number]["message_id"],
                parse_mode='HTML'
            )
            del code_messages[number]

        bot.answer_callback_query(call.id, "‚ùå –ù–æ–º–µ—Ä –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π.")

        print(f"[DEBUG] –ù–æ–º–µ—Ä {number} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º {call.from_user.id}")

    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –≤ number_invalid: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–º–µ—Ä–∞!")

db_lock = Lock()

def check_inactivity():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –∏—Ö –≤ –ê–§–ö —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç."""
    while True:
        try:
            with db.get_db() as conn:
                cursor = conn.cursor()
                cursor.execute('SELECT ID, LAST_ACTIVITY, IS_AFK FROM users')
                users = cursor.fetchall()
                current_time = datetime.now()
                for user_id, last_activity, is_afk in users:
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –≤ –ê–§–ö –∏–ª–∏ –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                    if is_afk or not last_activity:
                        continue
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º
                    cursor.execute('SELECT ID FROM personal WHERE ID = ? AND TYPE = ?', (user_id, 'moder'))
                    is_moder = cursor.fetchone() is not None
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–∑ config.ADMINS_ID
                    is_admin = user_id in config.ADMINS_ID
                    if is_moder or is_admin:
                        continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
                    try:
                        last_activity_time = datetime.strptime(last_activity, "%Y-%m-%d %H:%M:%S")
                        if current_time - last_activity_time >= timedelta(minutes=10):
                            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –ê–§–ö, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â—ë –Ω–µ –≤ –ê–§–ö
                            if not db_module.get_afk_status(user_id):
                                db_module.toggle_afk_status(user_id)
                                try:
                                    bot.send_message(
                                        user_id,
                                        "üîî –í—ã –±—ã–ª–∏ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –≤ —Ä–µ–∂–∏–º –ê–§–ö –∏–∑-–∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (10 –º–∏–Ω—É—Ç). "
                                        "–í–∞—à–∏ –Ω–æ–º–µ—Ä–∞ —Å–∫—Ä—ã—Ç—ã. –ù–∞–∂–º–∏—Ç–µ '–í—ã–∫–ª—é—á–∏—Ç—å –ê–§–ö' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è.",
                                        parse_mode='HTML'
                                    )
                                except Exception as e:
                                    print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –ê–§–ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                    except ValueError as e:
                        print(f"[ERROR] –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        except Exception as e:
            print(f"[ERROR] –û—à–∏–±–∫–∞ –≤ check_inactivity: {e}")
            time.sleep(60)

if __name__ == "__main__":
    init_db()
    check_all_users_for_afk()
    timeout_thread = threading.Thread(target=check_number_timeout, daemon=True)
    timeout_thread.start()
    hold_time_thread = threading.Thread(target=check_number_hold_time, daemon=True)
    hold_time_thread.start()
    inactivity_thread = threading.Thread(target=check_inactivity, daemon=True)
    inactivity_thread.start()
    run_bot()